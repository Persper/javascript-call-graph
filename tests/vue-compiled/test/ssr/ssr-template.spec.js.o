'use strict';

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _vueRuntimeCommon = require('../../dist/vue.runtime.common.js');

var _vueRuntimeCommon2 = _interopRequireDefault(_vueRuntimeCommon);

var _compileWithWebpack = require('./compile-with-webpack');

var _vueServerRenderer = require('../../packages/vue-server-renderer');

var _clientPlugin = require('../../packages/vue-server-renderer/client-plugin');

var _clientPlugin2 = _interopRequireDefault(_clientPlugin);

var _ssrBundleRenderSpec = require('./ssr-bundle-render.spec.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultTemplate = '<html><head></head><body><!--vue-ssr-outlet--></body></html>';
var interpolateTemplate = '<html><head><title>{{ title }}</title></head><body><!--vue-ssr-outlet-->{{{ snippet }}}</body></html>';

function generateClientManifest(file, cb) {
  (0, _compileWithWebpack.compileWithWebpack)(file, {
    output: {
      path: '/',
      filename: '[name].js'
    },
    plugins: [new _webpack2.default.optimize.CommonsChunkPlugin({
      name: 'manifest',
      minChunks: Infinity
    }), new _clientPlugin2.default()]
  }, function (fs) {
    cb(JSON.parse(fs.readFileSync('/vue-ssr-client-manifest.json', 'utf-8')));
  });
}

function createRendererWithManifest(file, options, cb) {
  if (typeof options === 'function') {
    cb = options;
    options = null;
  }
  generateClientManifest(file, function (clientManifest) {
    (0, _ssrBundleRenderSpec.createRenderer)(file, Object.assign({
      asBundle: true,
      template: defaultTemplate,
      clientManifest: clientManifest
    }, options), cb);
  });
}

describe('SSR: template option', function () {
  it('renderToString', function (done) {
    var renderer = (0, _vueServerRenderer.createRenderer)({
      template: defaultTemplate
    });

    var context = {
      head: '<meta name="viewport" content="width=device-width">',
      styles: '<style>h1 { color: red }</style>',
      state: { a: 1 }
    };

    renderer.renderToString(new _vueRuntimeCommon2.default({
      template: '<div>hi</div>'
    }), context, function (err, res) {
      expect(err).toBeNull();
      expect(res).toContain('<html><head>' + context.head + context.styles + '</head><body>' + '<div data-server-rendered="true">hi</div>' + '<script>window.__INITIAL_STATE__={"a":1}</script>' + '</body></html>');
      done();
    });
  });

  it('renderToString with interpolation', function (done) {
    var renderer = (0, _vueServerRenderer.createRenderer)({
      template: interpolateTemplate
    });

    var context = {
      title: '<script>hacks</script>',
      snippet: '<div>foo</div>',
      head: '<meta name="viewport" content="width=device-width">',
      styles: '<style>h1 { color: red }</style>',
      state: { a: 1 }
    };

    renderer.renderToString(new _vueRuntimeCommon2.default({
      template: '<div>hi</div>'
    }), context, function (err, res) {
      expect(err).toBeNull();
      expect(res).toContain('<html><head>' +
      // double mustache should be escaped
      '<title>&lt;script&gt;hacks&lt;/script&gt;</title>' + ('' + context.head + context.styles + '</head><body>') + '<div data-server-rendered="true">hi</div>' + '<script>window.__INITIAL_STATE__={"a":1}</script>' +
      // triple should be raw
      '<div>foo</div>' + '</body></html>');
      done();
    });
  });

  it('renderToStream', function (done) {
    var renderer = (0, _vueServerRenderer.createRenderer)({
      template: defaultTemplate
    });

    var context = {
      head: '<meta name="viewport" content="width=device-width">',
      styles: '<style>h1 { color: red }</style>',
      state: { a: 1 }
    };

    var stream = renderer.renderToStream(new _vueRuntimeCommon2.default({
      template: '<div>hi</div>'
    }), context);

    var res = '';
    stream.on('data', function (chunk) {
      res += chunk;
    });
    stream.on('end', function () {
      expect(res).toContain('<html><head>' + context.head + context.styles + '</head><body>' + '<div data-server-rendered="true">hi</div>' + '<script>window.__INITIAL_STATE__={"a":1}</script>' + '</body></html>');
      done();
    });
  });

  it('renderToStream with interpolation', function (done) {
    var renderer = (0, _vueServerRenderer.createRenderer)({
      template: interpolateTemplate
    });

    var context = {
      title: '<script>hacks</script>',
      snippet: '<div>foo</div>',
      head: '<meta name="viewport" content="width=device-width">',
      styles: '<style>h1 { color: red }</style>',
      state: { a: 1 }
    };

    var stream = renderer.renderToStream(new _vueRuntimeCommon2.default({
      template: '<div>hi</div>'
    }), context);

    var res = '';
    stream.on('data', function (chunk) {
      res += chunk;
    });
    stream.on('end', function () {
      expect(res).toContain('<html><head>' +
      // double mustache should be escaped
      '<title>&lt;script&gt;hacks&lt;/script&gt;</title>' + ('' + context.head + context.styles + '</head><body>') + '<div data-server-rendered="true">hi</div>' + '<script>window.__INITIAL_STATE__={"a":1}</script>' +
      // triple should be raw
      '<div>foo</div>' + '</body></html>');
      done();
    });
  });

  it('bundleRenderer + renderToString', function (done) {
    (0, _ssrBundleRenderSpec.createRenderer)('app.js', {
      asBundle: true,
      template: defaultTemplate
    }, function (renderer) {
      var context = {
        head: '<meta name="viewport" content="width=device-width">',
        styles: '<style>h1 { color: red }</style>',
        state: { a: 1 },
        url: '/test'
      };
      renderer.renderToString(context, function (err, res) {
        expect(err).toBeNull();
        expect(res).toContain('<html><head>' + context.head + context.styles + '</head><body>' + '<div data-server-rendered="true">/test</div>' + '<script>window.__INITIAL_STATE__={"a":1}</script>' + '</body></html>');
        expect(context.msg).toBe('hello');
        done();
      });
    });
  });

  it('bundleRenderer + renderToStream', function (done) {
    (0, _ssrBundleRenderSpec.createRenderer)('app.js', {
      asBundle: true,
      template: defaultTemplate
    }, function (renderer) {
      var context = {
        head: '<meta name="viewport" content="width=device-width">',
        styles: '<style>h1 { color: red }</style>',
        state: { a: 1 },
        url: '/test'
      };
      var stream = renderer.renderToStream(context);
      var res = '';
      stream.on('data', function (chunk) {
        res += chunk.toString();
      });
      stream.on('end', function () {
        expect(res).toContain('<html><head>' + context.head + context.styles + '</head><body>' + '<div data-server-rendered="true">/test</div>' + '<script>window.__INITIAL_STATE__={"a":1}</script>' + '</body></html>');
        expect(context.msg).toBe('hello');
        done();
      });
    });
  });

  var expectedHTMLWithManifest = function expectedHTMLWithManifest() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return '<html><head>' +
    // used chunks should have preload
    '<link rel="preload" href="/manifest.js" as="script">' + '<link rel="preload" href="/main.js" as="script">' + '<link rel="preload" href="/0.js" as="script">' + '<link rel="preload" href="/test.css" as="style">' + (
    // images and fonts are only preloaded when explicitly asked for
    options.preloadOtherAssets ? '<link rel="preload" href="/test.woff2" as="font" type="font/woff2" crossorigin>' : '') + (options.preloadOtherAssets ? '<link rel="preload" href="/test.png" as="image">' : '') + (
    // unused chunks should have prefetch
    options.noPrefetch ? '' : '<link rel="prefetch" href="/1.js">') +
    // css assets should be loaded
    '<link rel="stylesheet" href="/test.css">' + '</head><body>' + '<div data-server-rendered="true"><div>async test.woff2 test.png</div></div>' + (
    // state should be inlined before scripts
    '<script>window.' + (options.stateKey || '__INITIAL_STATE__') + '={"a":1}</script>') +
    // manifest chunk should be first
    '<script src="/manifest.js" defer></script>' +
    // async chunks should be before main chunk
    '<script src="/0.js" defer></script>' + '<script src="/main.js" defer></script>' + '</body></html>';
  };

  createClientManifestAssertions(true);
  createClientManifestAssertions(false);

  function createClientManifestAssertions(runInNewContext) {
    it('bundleRenderer + renderToString + clientManifest ()', function (done) {
      createRendererWithManifest('split.js', { runInNewContext: runInNewContext }, function (renderer) {
        renderer.renderToString({ state: { a: 1 } }, function (err, res) {
          expect(err).toBeNull();
          expect(res).toContain(expectedHTMLWithManifest());
          done();
        });
      });
    });

    it('bundleRenderer + renderToStream + clientManifest + shouldPreload', function (done) {
      createRendererWithManifest('split.js', {
        runInNewContext: runInNewContext,
        shouldPreload: function shouldPreload(file, type) {
          if (type === 'image' || type === 'script' || type === 'font' || type === 'style') {
            return true;
          }
        }
      }, function (renderer) {
        var stream = renderer.renderToStream({ state: { a: 1 } });
        var res = '';
        stream.on('data', function (chunk) {
          res += chunk.toString();
        });
        stream.on('end', function () {
          expect(res).toContain(expectedHTMLWithManifest({
            preloadOtherAssets: true
          }));
          done();
        });
      });
    });

    it('bundleRenderer + renderToStream + clientManifest + shouldPrefetch', function (done) {
      createRendererWithManifest('split.js', {
        runInNewContext: runInNewContext,
        shouldPrefetch: function shouldPrefetch(file, type) {
          if (type === 'script') {
            return false;
          }
        }
      }, function (renderer) {
        var stream = renderer.renderToStream({ state: { a: 1 } });
        var res = '';
        stream.on('data', function (chunk) {
          res += chunk.toString();
        });
        stream.on('end', function () {
          expect(res).toContain(expectedHTMLWithManifest({
            noPrefetch: true
          }));
          done();
        });
      });
    });

    it('bundleRenderer + renderToString + clientManifest + inject: false', function (done) {
      createRendererWithManifest('split.js', {
        runInNewContext: runInNewContext,
        template: '<html>' + '<head>{{{ renderResourceHints() }}}{{{ renderStyles() }}}</head>' + '<body><!--vue-ssr-outlet-->{{{ renderState({ windowKey: \'__FOO__\', contextKey: \'foo\' }) }}}{{{ renderScripts() }}}</body>' + '</html>',
        inject: false
      }, function (renderer) {
        var context = { foo: { a: 1 } };
        renderer.renderToString(context, function (err, res) {
          expect(err).toBeNull();
          expect(res).toContain(expectedHTMLWithManifest({
            stateKey: '__FOO__'
          }));
          done();
        });
      });
    });

    it('bundleRenderer + renderToString + clientManifest + no template', function (done) {
      createRendererWithManifest('split.js', {
        runInNewContext: runInNewContext,
        template: null
      }, function (renderer) {
        var context = { foo: { a: 1 } };
        renderer.renderToString(context, function (err, res) {
          expect(err).toBeNull();

          var customOutput = '<html><head>' + (context.renderResourceHints() + context.renderStyles()) + '</head><body>' + (res + context.renderState({
            windowKey: '__FOO__',
            contextKey: 'foo'
          }) + context.renderScripts()) + '</body></html>';

          expect(customOutput).toContain(expectedHTMLWithManifest({
            stateKey: '__FOO__'
          }));
          done();
        });
      });
    });

    it('whitespace insensitive interpolation', function (done) {
      var interpolateTemplate = '<html><head><title>{{title}}</title></head><body><!--vue-ssr-outlet-->{{{snippet}}}</body></html>';
      var renderer = (0, _vueServerRenderer.createRenderer)({
        template: interpolateTemplate
      });

      var context = {
        title: '<script>hacks</script>',
        snippet: '<div>foo</div>',
        head: '<meta name="viewport" content="width=device-width">',
        styles: '<style>h1 { color: red }</style>',
        state: { a: 1 }
      };

      renderer.renderToString(new _vueRuntimeCommon2.default({
        template: '<div>hi</div>'
      }), context, function (err, res) {
        expect(err).toBeNull();
        expect(res).toContain('<html><head>' +
        // double mustache should be escaped
        '<title>&lt;script&gt;hacks&lt;/script&gt;</title>' + ('' + context.head + context.styles + '</head><body>') + '<div data-server-rendered="true">hi</div>' + '<script>window.__INITIAL_STATE__={"a":1}</script>' +
        // triple should be raw
        '<div>foo</div>' + '</body></html>');
        done();
      });
    });
  }
});

