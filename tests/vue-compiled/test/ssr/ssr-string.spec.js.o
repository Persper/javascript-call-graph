'use strict';

var _vueRuntimeCommon = require('../../dist/vue.runtime.common.js');

var _vueRuntimeCommon2 = _interopRequireDefault(_vueRuntimeCommon);

var _vm = require('vm');

var _vm2 = _interopRequireDefault(_vm);

var _vueServerRenderer = require('../../packages/vue-server-renderer');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _createRenderer = (0, _vueServerRenderer.createRenderer)(),
    renderToString = _createRenderer.renderToString;

describe('SSR: renderToString', function () {
  it('static attributes', function (done) {
    renderVmWithOptions({
      template: '<div id="foo" bar="123"></div>'
    }, function (result) {
      expect(result).toContain('<div id="foo" bar="123" data-server-rendered="true"></div>');
      done();
    });
  });

  it('unary tags', function (done) {
    renderVmWithOptions({
      template: '<input value="123">'
    }, function (result) {
      expect(result).toContain('<input value="123" data-server-rendered="true">');
      done();
    });
  });

  it('dynamic attributes', function (done) {
    renderVmWithOptions({
      template: '<div qux="quux" :id="foo" :bar="baz"></div>',
      data: {
        foo: 'hi',
        baz: 123
      }
    }, function (result) {
      expect(result).toContain('<div qux="quux" id="hi" bar="123" data-server-rendered="true"></div>');
      done();
    });
  });

  it('static class', function (done) {
    renderVmWithOptions({
      template: '<div class="foo bar"></div>'
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true" class="foo bar"></div>');
      done();
    });
  });

  it('dynamic class', function (done) {
    renderVmWithOptions({
      template: '<div class="foo bar" :class="[a, { qux: hasQux, quux: hasQuux }]"></div>',
      data: {
        a: 'baz',
        hasQux: true,
        hasQuux: false
      }
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true" class="foo bar baz qux"></div>');
      done();
    });
  });

  it('custom component class', function (done) {
    renderVmWithOptions({
      template: '<div><cmp class="cmp"></cmp></div>',
      components: {
        cmp: {
          render: function render(h) {
            return h('div', 'test');
          }
        }
      }
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true"><div class="cmp">test</div></div>');
      done();
    });
  });

  it('nested component class', function (done) {
    renderVmWithOptions({
      template: '<cmp class="outer" :class="cls"></cmp>',
      data: { cls: { 'success': 1 } },
      components: {
        cmp: {
          render: function render(h) {
            return h('div', [h('nested', { staticClass: 'nested', 'class': { 'error': 1 } })]);
          },
          components: {
            nested: {
              render: function render(h) {
                return h('div', { staticClass: 'inner' }, 'test');
              }
            }
          }
        }
      }
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true" class="outer success">' + '<div class="inner nested error">test</div>' + '</div>');
      done();
    });
  });

  it('dynamic style', function (done) {
    renderVmWithOptions({
      template: '<div style="background-color:black" :style="{ fontSize: fontSize + \'px\', color: color }"></div>',
      data: {
        fontSize: 14,
        color: 'red'
      }
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true" style="background-color:black;font-size:14px;color:red;"></div>');
      done();
    });
  });

  it('dynamic string style', function (done) {
    renderVmWithOptions({
      template: '<div :style="style"></div>',
      data: {
        style: 'color:red'
      }
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true" style="color:red;"></div>');
      done();
    });
  });

  it('auto-prefixed style value as array', function (done) {
    renderVmWithOptions({
      template: '<div :style="style"></div>',
      data: {
        style: {
          display: ['-webkit-box', '-ms-flexbox', 'flex']
        }
      }
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true" style="display:-webkit-box;display:-ms-flexbox;display:flex;"></div>');
      done();
    });
  });

  it('custom component style', function (done) {
    renderVmWithOptions({
      template: '<section><comp :style="style"></comp></section>',
      data: {
        style: 'color:red'
      },
      components: {
        comp: {
          template: '<div></div>'
        }
      }
    }, function (result) {
      expect(result).toContain('<section data-server-rendered="true"><div style="color:red;"></div></section>');
      done();
    });
  });

  it('nested custom component style', function (done) {
    renderVmWithOptions({
      template: '<comp style="color: blue" :style="style"></comp>',
      data: {
        style: 'color:red'
      },
      components: {
        comp: {
          template: '<nested style="text-align: left;" :style="{fontSize:\'520rem\'}"></nested>',
          components: {
            nested: {
              template: '<div></div>'
            }
          }
        }
      }
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true" style="text-align:left;font-size:520rem;color:red;"></div>');
      done();
    });
  });

  it('component style not passed to child', function (done) {
    renderVmWithOptions({
      template: '<comp :style="style"></comp>',
      data: {
        style: 'color:red'
      },
      components: {
        comp: {
          template: '<div><div></div></div>'
        }
      }
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true" style="color:red;"><div></div></div>');
      done();
    });
  });

  it('component style not passed to slot', function (done) {
    renderVmWithOptions({
      template: '<comp :style="style"><span style="color:black"></span></comp>',
      data: {
        style: 'color:red'
      },
      components: {
        comp: {
          template: '<div><slot></slot></div>'
        }
      }
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true" style="color:red;"><span style="color:black;"></span></div>');
      done();
    });
  });

  it('attrs merging on components', function (done) {
    var Test = {
      render: function render(h) {
        return h('div', {
          attrs: { id: 'a' }
        });
      }
    };
    renderVmWithOptions({
      render: function render(h) {
        return h(Test, {
          attrs: { id: 'b', name: 'c' }
        });
      }
    }, function (res) {
      expect(res).toContain('<div id="b" data-server-rendered="true" name="c"></div>');
      done();
    });
  });

  it('domProps merging on components', function (done) {
    var Test = {
      render: function render(h) {
        return h('div', {
          domProps: { innerHTML: 'a' }
        });
      }
    };
    renderVmWithOptions({
      render: function render(h) {
        return h(Test, {
          domProps: { innerHTML: 'b', value: 'c' }
        });
      }
    }, function (res) {
      expect(res).toContain('<div data-server-rendered="true" value="c">b</div>');
      done();
    });
  });

  it('v-show directive render', function (done) {
    renderVmWithOptions({
      template: '<div v-show="false"><span>inner</span></div>'
    }, function (res) {
      expect(res).toContain('<div data-server-rendered="true" style="display:none;"><span>inner</span></div>');
      done();
    });
  });

  it('v-show directive not passed to child', function (done) {
    renderVmWithOptions({
      template: '<foo v-show="false"></foo>',
      components: {
        foo: {
          template: '<div><span>inner</span></div>'
        }
      }
    }, function (res) {
      expect(res).toContain('<div data-server-rendered="true" style="display:none;"><span>inner</span></div>');
      done();
    });
  });

  it('v-show directive not passed to slot', function (done) {
    renderVmWithOptions({
      template: '<foo v-show="false"><span>inner</span></foo>',
      components: {
        foo: {
          template: '<div><slot></slot></div>'
        }
      }
    }, function (res) {
      expect(res).toContain('<div data-server-rendered="true" style="display:none;"><span>inner</span></div>');
      done();
    });
  });

  it('v-show directive merging on components', function (done) {
    renderVmWithOptions({
      template: '<foo v-show="false"></foo>',
      components: {
        foo: {
          render: function render(h) {
            return h('bar', {
              directives: [{
                name: 'show',
                value: true
              }]
            });
          },
          components: {
            bar: {
              render: function render(h) {
                return h('div', 'inner');
              }
            }
          }
        }
      }
    }, function (res) {
      expect(res).toContain('<div data-server-rendered="true" style="display:none;">inner</div>');
      done();
    });
  });

  it('text interpolation', function (done) {
    renderVmWithOptions({
      template: '<div>{{ foo }} side {{ bar }}</div>',
      data: {
        foo: 'server',
        bar: '<span>rendering</span>'
      }
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true">server side &lt;span&gt;rendering&lt;/span&gt;</div>');
      done();
    });
  });

  it('v-html on root', function (done) {
    renderVmWithOptions({
      template: '<div v-html="text"></div>',
      data: {
        text: '<span>foo</span>'
      }
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true"><span>foo</span></div>');
      done();
    });
  });

  it('v-text on root', function (done) {
    renderVmWithOptions({
      template: '<div v-text="text"></div>',
      data: {
        text: '<span>foo</span>'
      }
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true">&lt;span&gt;foo&lt;/span&gt;</div>');
      done();
    });
  });

  it('v-html', function (done) {
    renderVmWithOptions({
      template: '<div><div v-html="text"></div></div>',
      data: {
        text: '<span>foo</span>'
      }
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true"><div><span>foo</span></div></div>');
      done();
    });
  });

  it('v-html with null value', function (done) {
    renderVmWithOptions({
      template: '<div><div v-html="text"></div></div>',
      data: {
        text: null
      }
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true"><div></div></div>');
      done();
    });
  });

  it('v-text', function (done) {
    renderVmWithOptions({
      template: '<div><div v-text="text"></div></div>',
      data: {
        text: '<span>foo</span>'
      }
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true"><div>&lt;span&gt;foo&lt;/span&gt;</div></div>');
      done();
    });
  });

  it('v-text with null value', function (done) {
    renderVmWithOptions({
      template: '<div><div v-text="text"></div></div>',
      data: {
        text: null
      }
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true"><div></div></div>');
      done();
    });
  });

  it('child component (hoc)', function (done) {
    renderVmWithOptions({
      template: '<child class="foo" :msg="msg"></child>',
      data: {
        msg: 'hello'
      },
      components: {
        child: {
          props: ['msg'],
          data: function data() {
            return { name: 'bar' };
          },
          render: function render() {
            var h = this.$createElement;
            return h('div', { class: ['bar'] }, [this.msg + ' ' + this.name]);
          }
        }
      }
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true" class="foo bar">hello bar</div>');
      done();
    });
  });

  it('has correct lifecycle during render', function (done) {
    var lifecycleCount = 1;
    renderVmWithOptions({
      template: '<div><span>{{ val }}</span><test></test></div>',
      data: {
        val: 'hi'
      },
      beforeCreate: function beforeCreate() {
        expect(lifecycleCount++).toBe(1);
      },
      created: function created() {
        this.val = 'hello';
        expect(this.val).toBe('hello');
        expect(lifecycleCount++).toBe(2);
      },

      components: {
        test: {
          beforeCreate: function beforeCreate() {
            expect(lifecycleCount++).toBe(3);
          },
          created: function created() {
            expect(lifecycleCount++).toBe(4);
          },
          render: function render() {
            expect(lifecycleCount++).toBeGreaterThan(4);
            return this.$createElement('span', { class: ['b'] }, 'testAsync');
          }
        }
      }
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true">' + '<span>hello</span>' + '<span class="b">testAsync</span>' + '</div>');
      done();
    });
  });

  it('computed properties', function (done) {
    renderVmWithOptions({
      template: '<div>{{ b }}</div>',
      data: {
        a: {
          b: 1
        }
      },
      computed: {
        b: function b() {
          return this.a.b + 1;
        }
      },
      created: function created() {
        this.a.b = 2;
        expect(this.b).toBe(3);
      }
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true">3</div>');
      done();
    });
  });

  it('renders async component', function (done) {
    renderVmWithOptions({
      template: '\n        <div>\n          <test-async></test-async>\n        </div>\n      ',
      components: {
        testAsync: function testAsync(resolve) {
          setTimeout(function () {
            return resolve({
              render: function render() {
                return this.$createElement('span', { class: ['b'] }, 'testAsync');
              }
            });
          }, 1);
        }
      }
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true"><span class="b">testAsync</span></div>');
      done();
    });
  });

  it('renders async component (Promise, nested)', function (done) {
    var Foo = function Foo() {
      return Promise.resolve({
        render: function render(h) {
          return h('div', [h('span', 'foo'), h(Bar)]);
        }
      });
    };
    var Bar = function Bar() {
      return {
        component: Promise.resolve({
          render: function render(h) {
            return h('span', 'bar');
          }
        })
      };
    };
    renderVmWithOptions({
      render: function render(h) {
        return h(Foo);
      }
    }, function (res) {
      expect(res).toContain('<div data-server-rendered="true"><span>foo</span><span>bar</span></div>');
      done();
    });
  });

  it('renders async component (ES module)', function (done) {
    var Foo = function Foo() {
      return Promise.resolve({
        __esModule: true,
        default: {
          render: function render(h) {
            return h('div', [h('span', 'foo'), h(Bar)]);
          }
        }
      });
    };
    var Bar = function Bar() {
      return {
        component: Promise.resolve({
          __esModule: true,
          default: {
            render: function render(h) {
              return h('span', 'bar');
            }
          }
        })
      };
    };
    renderVmWithOptions({
      render: function render(h) {
        return h(Foo);
      }
    }, function (res) {
      expect(res).toContain('<div data-server-rendered="true"><span>foo</span><span>bar</span></div>');
      done();
    });
  });

  it('renders async component (hoc)', function (done) {
    renderVmWithOptions({
      template: '<test-async></test-async>',
      components: {
        testAsync: function testAsync() {
          return Promise.resolve({
            render: function render() {
              return this.$createElement('span', { class: ['b'] }, 'testAsync');
            }
          });
        }
      }
    }, function (result) {
      expect(result).toContain('<span data-server-rendered="true" class="b">testAsync</span>');
      done();
    });
  });

  it('renders async component (functional, single node)', function (done) {
    renderVmWithOptions({
      template: '\n        <div>\n          <test-async></test-async>\n        </div>\n      ',
      components: {
        testAsync: function testAsync(resolve) {
          setTimeout(function () {
            return resolve({
              functional: true,
              render: function render(h) {
                return h('span', { class: ['b'] }, 'testAsync');
              }
            });
          }, 1);
        }
      }
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true"><span class="b">testAsync</span></div>');
      done();
    });
  });

  it('renders async component (functional, multiple nodes)', function (done) {
    renderVmWithOptions({
      template: '\n        <div>\n          <test-async></test-async>\n        </div>\n      ',
      components: {
        testAsync: function testAsync(resolve) {
          setTimeout(function () {
            return resolve({
              functional: true,
              render: function render(h) {
                return [h('span', { class: ['a'] }, 'foo'), h('span', { class: ['b'] }, 'bar')];
              }
            });
          }, 1);
        }
      }
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true">' + '<span class="a">foo</span>' + '<span class="b">bar</span>' + '</div>');
      done();
    });
  });

  it('should catch async component error', function (done) {
    _vueRuntimeCommon2.default.config.silent = true;
    renderToString(new _vueRuntimeCommon2.default({
      template: '<test-async></test-async>',
      components: {
        testAsync: function testAsync() {
          return Promise.resolve({
            render: function render() {
              throw new Error('foo');
            }
          });
        }
      }
    }), function (err, result) {
      _vueRuntimeCommon2.default.config.silent = false;
      expect(err).toBeTruthy();
      expect(result).toBeUndefined();
      done();
    });
  });

  it('everything together', function (done) {
    renderVmWithOptions({
      template: '\n        <div>\n          <p class="hi">yoyo</p>\n          <div id="ho" :class="{ red: isRed }"></div>\n          <span>{{ test }}</span>\n          <input :value="test">\n          <img :src="imageUrl">\n          <test></test>\n          <test-async></test-async>\n        </div>\n      ',
      data: {
        test: 'hi',
        isRed: true,
        imageUrl: 'https://vuejs.org/images/logo.png'
      },
      components: {
        test: {
          render: function render() {
            return this.$createElement('div', { class: ['a'] }, 'test');
          }
        },
        testAsync: function testAsync(resolve) {
          resolve({
            render: function render() {
              return this.$createElement('span', { class: ['b'] }, 'testAsync');
            }
          });
        }
      }
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true">' + '<p class="hi">yoyo</p> ' + '<div id="ho" class="red"></div> ' + '<span>hi</span> ' + '<input value="hi"> ' + '<img src="https://vuejs.org/images/logo.png"> ' + '<div class="a">test</div> ' + '<span class="b">testAsync</span>' + '</div>');
      done();
    });
  });

  it('normal attr', function (done) {
    renderVmWithOptions({
      template: '\n        <div>\n          <span :test="\'ok\'">hello</span>\n          <span :test="null">hello</span>\n          <span :test="false">hello</span>\n          <span :test="true">hello</span>\n          <span :test="0">hello</span>\n        </div>\n      '
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true">' + '<span test="ok">hello</span> ' + '<span>hello</span> ' + '<span>hello</span> ' + '<span test="true">hello</span> ' + '<span test="0">hello</span>' + '</div>');
      done();
    });
  });

  it('enumerated attr', function (done) {
    renderVmWithOptions({
      template: '\n        <div>\n          <span :draggable="true">hello</span>\n          <span :draggable="\'ok\'">hello</span>\n          <span :draggable="null">hello</span>\n          <span :draggable="false">hello</span>\n          <span :draggable="\'\'">hello</span>\n          <span :draggable="\'false\'">hello</span>\n        </div>\n      '
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true">' + '<span draggable="true">hello</span> ' + '<span draggable="true">hello</span> ' + '<span draggable="false">hello</span> ' + '<span draggable="false">hello</span> ' + '<span draggable="true">hello</span> ' + '<span draggable="false">hello</span>' + '</div>');
      done();
    });
  });

  it('boolean attr', function (done) {
    renderVmWithOptions({
      template: '\n        <div>\n          <span :disabled="true">hello</span>\n          <span :disabled="\'ok\'">hello</span>\n          <span :disabled="null">hello</span>\n          <span :disabled="\'\'">hello</span>\n        </div>\n      '
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true">' + '<span disabled="disabled">hello</span> ' + '<span disabled="disabled">hello</span> ' + '<span>hello</span> ' + '<span disabled="disabled">hello</span>' + '</div>');
      done();
    });
  });

  it('v-bind object', function (done) {
    renderVmWithOptions({
      data: {
        test: { id: 'a', class: ['a', 'b'], value: 'c' }
      },
      template: '<input v-bind="test">'
    }, function (result) {
      expect(result).toContain('<input id="a" data-server-rendered="true" value="c" class="a b">');
      done();
    });
  });

  it('custom directives', function (done) {
    var renderer = (0, _vueServerRenderer.createRenderer)({
      directives: {
        'class-prefixer': function classPrefixer(node, dir) {
          if (node.data.class) {
            node.data.class = dir.value + '-' + node.data.class;
          }
          if (node.data.staticClass) {
            node.data.staticClass = dir.value + '-' + node.data.staticClass;
          }
        }
      }
    });
    renderer.renderToString(new _vueRuntimeCommon2.default({
      render: function render() {
        var h = this.$createElement;
        return h('p', {
          class: 'class1',
          staticClass: 'class2',
          directives: [{
            name: 'class-prefixer',
            value: 'my'
          }]
        }, ['hello world']);
      }
    }), function (err, result) {
      expect(err).toBeNull();
      expect(result).toContain('<p data-server-rendered="true" class="my-class2 my-class1">hello world</p>');
      done();
    });
  });

  it('_scopeId', function (done) {
    renderVmWithOptions({
      _scopeId: '_v-parent',
      template: '<div id="foo"><p><child></child></p></div>',
      components: {
        child: {
          _scopeId: '_v-child',
          render: function render() {
            var h = this.$createElement;
            return h('div', null, [h('span', null, ['foo'])]);
          }
        }
      }
    }, function (result) {
      expect(result).toContain('<div id="foo" data-server-rendered="true" _v-parent>' + '<p _v-parent>' + '<div _v-child _v-parent><span _v-child>foo</span></div>' + '</p>' + '</div>');
      done();
    });
  });

  it('_scopeId on slot content', function (done) {
    renderVmWithOptions({
      _scopeId: '_v-parent',
      template: '<div><child><p>foo</p></child></div>',
      components: {
        child: {
          _scopeId: '_v-child',
          render: function render() {
            var h = this.$createElement;
            return h('div', null, this.$slots.default);
          }
        }
      }
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true" _v-parent>' + '<div _v-child _v-parent><p _v-child _v-parent>foo</p></div>' + '</div>');
      done();
    });
  });

  it('comment nodes', function (done) {
    renderVmWithOptions({
      template: '<div><transition><div v-if="false"></div></transition></div>'
    }, function (result) {
      expect(result).toContain('<div data-server-rendered="true"><!----></div>');
      done();
    });
  });

  it('should catch error', function (done) {
    _vueRuntimeCommon2.default.config.silent = true;
    renderToString(new _vueRuntimeCommon2.default({
      render: function render() {
        throw new Error('oops');
      }
    }), function (err) {
      expect(err instanceof Error).toBe(true);
      _vueRuntimeCommon2.default.config.silent = false;
      done();
    });
  });

  it('default value Foreign Function', function () {
    var FunctionConstructor = _vm2.default.runInNewContext('Function');
    var func = function func() {
      return 123;
    };
    var vm = new _vueRuntimeCommon2.default({
      props: {
        a: {
          type: FunctionConstructor,
          default: func
        }
      },
      propsData: {
        a: undefined
      }
    });
    expect(vm.a).toBe(func);
  });

  it('should prevent xss in attributes', function (done) {
    renderVmWithOptions({
      data: {
        xss: '"><script>alert(1)</script>'
      },
      template: '\n        <div>\n          <a :title="xss" :style="{ color: xss }" :class="[xss]">foo</a>\n        </div>\n      '
    }, function (res) {
      expect(res).not.toContain('<script>alert(1)</script>');
      done();
    });
  });

  it('should prevent script xss with v-bind object syntax + array value', function (done) {
    renderVmWithOptions({
      data: {
        test: ['"><script>alert(1)</script><!--"']
      },
      template: '<div v-bind="{ test }"></div>'
    }, function (res) {
      expect(res).not.toContain('<script>alert(1)</script>');
      done();
    });
  });

  it('v-if', function (done) {
    renderVmWithOptions({
      template: '\n        <div>\n          <span v-if="true">foo</span>\n          <span v-if="false">bar</span>\n        </div>\n      '
    }, function (res) {
      expect(res).toContain('<div data-server-rendered="true"><span>foo</span> <!----></div>');
      done();
    });
  });

  it('v-for', function (done) {
    renderVmWithOptions({
      template: '\n        <div>\n          <span>foo</span>\n          <span v-for="i in 2">{{ i }}</span>\n        </div>\n      '
    }, function (res) {
      expect(res).toContain('<div data-server-rendered="true"><span>foo</span> <span>1</span><span>2</span></div>');
      done();
    });
  });

  it('template v-if', function (done) {
    renderVmWithOptions({
      template: '\n        <div>\n          <span>foo</span>\n          <template v-if="true">\n            <span>foo</span> bar <span>baz</span>\n          </template>\n        </div>\n      '
    }, function (res) {
      expect(res).toContain('<div data-server-rendered="true"><span>foo</span> <span>foo</span> bar <span>baz</span></div>');
      done();
    });
  });

  it('template v-for', function (done) {
    renderVmWithOptions({
      template: '\n        <div>\n          <span>foo</span>\n          <template v-for="i in 2">\n            <span>{{ i }}</span><span>bar</span>\n          </template>\n        </div>\n      '
    }, function (res) {
      expect(res).toContain('<div data-server-rendered="true"><span>foo</span> <span>1</span><span>bar</span><span>2</span><span>bar</span></div>');
      done();
    });
  });

  it('with inheritAttrs: false + $attrs', function (done) {
    renderVmWithOptions({
      template: '<foo id="a"/>',
      components: {
        foo: {
          inheritAttrs: false,
          template: '<div><div v-bind="$attrs"></div></div>'
        }
      }
    }, function (res) {
      expect(res).toBe('<div data-server-rendered="true"><div id="a"></div></div>');
      done();
    });
  });

  it('should escape static strings', function (done) {
    renderVmWithOptions({
      template: '<div>&lt;foo&gt;</div>'
    }, function (res) {
      expect(res).toBe('<div data-server-rendered="true">&lt;foo&gt;</div>');
      done();
    });
  });

  it('should not cache computed properties', function (done) {
    renderVmWithOptions({
      template: '<div>{{ foo }}</div>',
      data: function data() {
        return { bar: 1 };
      },
      computed: {
        foo: function foo() {
          return this.bar + 1;
        }
      },
      created: function created() {
        this.foo; // access
        this.bar++; // trigger change
      }
    }, function (res) {
      expect(res).toBe('<div data-server-rendered="true">3</div>');
      done();
    });
  });

  it('return Promise', function (done) {
    renderToString(new _vueRuntimeCommon2.default({
      template: '<div>{{ foo }}</div>',
      data: { foo: 'bar' }
    })).then(function (res) {
      expect(res).toBe('<div data-server-rendered="true">bar</div>');
      done();
    });
  });

  it('return Promise (error)', function (done) {
    _vueRuntimeCommon2.default.config.silent = true;
    renderToString(new _vueRuntimeCommon2.default({
      render: function render() {
        throw new Error('foobar');
      }
    })).catch(function (err) {
      expect(err.toString()).toContain('foobar');
      _vueRuntimeCommon2.default.config.silent = false;
      done();
    });
  });

  it('should catch template compilation error', function (done) {
    renderToString(new _vueRuntimeCommon2.default({
      template: '<div></div><div></div>'
    }), function (err, res) {
      expect(err.toString()).toContain('Component template should contain exactly one root element');
      done();
    });
  });

  // #6907
  it('should not optimize root if conditions', function (done) {
    renderVmWithOptions({
      data: { foo: 123 },
      template: '<input :type="\'text\'" v-model="foo">'
    }, function (res) {
      expect(res).toBe('<input type="text" data-server-rendered="true" value="123">');
      done();
    });
  });

  it('render muted properly', function (done) {
    renderVmWithOptions({
      template: '<video muted></video>'
    }, function (result) {
      expect(result).toContain('<video muted="muted" data-server-rendered="true"></video>');
      done();
    });
  });

  it('render v-model with textarea', function (done) {
    renderVmWithOptions({
      data: { foo: 'bar' },
      template: '<div><textarea v-model="foo"></textarea></div>'
    }, function (result) {
      expect(result).toContain('<textarea>bar</textarea>');
      done();
    });
  });

  it('render v-model with textarea (non-optimized)', function (done) {
    renderVmWithOptions({
      render: function render(h) {
        return h('textarea', {
          domProps: {
            value: 'foo'
          }
        });
      }
    }, function (result) {
      expect(result).toContain('<textarea data-server-rendered="true">foo</textarea>');
      done();
    });
  });

  it('render v-model with <select> (value binding)', function (done) {
    renderVmWithOptions({
      data: {
        selected: 2,
        options: [{ id: 1, label: 'one' }, { id: 2, label: 'two' }]
      },
      template: '\n      <div>\n        <select v-model="selected">\n          <option v-for="o in options" :value="o.id">{{ o.label }}</option>\n        </select>\n      </div>\n      '
    }, function (result) {
      expect(result).toContain('<select>' + '<option value="1">one</option>' + '<option selected="selected" value="2">two</option>' + '</select>');
      done();
    });
  });

  it('render v-model with <select> (static value)', function (done) {
    renderVmWithOptions({
      data: {
        selected: 2
      },
      template: '\n      <div>\n        <select v-model="selected">\n          <option value="1">one</option>\n          <option value="2">two</option>\n        </select>\n      </div>\n      '
    }, function (result) {
      expect(result).toContain('<select>' + '<option value="1">one</option> ' + '<option value="2" selected="selected">two</option>' + '</select>');
      done();
    });
  });

  it('render v-model with <select> (text as value)', function (done) {
    renderVmWithOptions({
      data: {
        selected: 2,
        options: [{ id: 1, label: 'one' }, { id: 2, label: 'two' }]
      },
      template: '\n      <div>\n        <select v-model="selected">\n          <option v-for="o in options">{{ o.id }}</option>\n        </select>\n      </div>\n      '
    }, function (result) {
      expect(result).toContain('<select>' + '<option>1</option>' + '<option selected="selected">2</option>' + '</select>');
      done();
    });
  });

  // #7223
  it('should not double escape attribute values', function (done) {
    renderVmWithOptions({
      template: '\n      <div>\n        <div id="a\nb"></div>\n      </div>\n      '
    }, function (result) {
      expect(result).toContain('<div id="a\nb"></div>');
      done();
    });
  });

  it('should expose ssr helpers on functional context', function (done) {
    var called = false;
    renderVmWithOptions({
      template: '<div><foo/></div>',
      components: {
        foo: {
          functional: true,
          render: function render(h, ctx) {
            expect(ctx._ssrNode).toBeTruthy();
            called = true;
          }
        }
      }
    }, function () {
      expect(called).toBe(true);
      done();
    });
  });
});

function renderVmWithOptions(options, cb) {
  renderToString(new _vueRuntimeCommon2.default(options), function (err, res) {
    expect(err).toBeNull();
    cb(res);
  });
}

