'use strict';

function noop() {}

if (typeof console === 'undefined') {
  window.console = {
    warn: noop,
    error: noop
  };
}

// avoid info messages during test
console.info = noop;

var asserted = void 0;

function createCompareFn(spy) {
  var hasWarned = function hasWarned(msg) {
    var count = spy.calls.count();
    var args;
    while (count--) {
      args = spy.calls.argsFor(count);
      if (args.some(containsMsg)) {
        return true;
      }
    }

    function containsMsg(arg) {
      return arg.toString().indexOf(msg) > -1;
    }
  };

  return {
    compare: function compare(msg) {
      asserted = asserted.concat(msg);
      var warned = Array.isArray(msg) ? msg.some(hasWarned) : hasWarned(msg);
      return {
        pass: warned,
        message: warned ? 'Expected message "' + msg + '" not to have been warned' : 'Expected message "' + msg + '" to have been warned'
      };
    }
  };
}

// define custom matcher for warnings
beforeEach(function () {
  asserted = [];
  spyOn(console, 'warn');
  spyOn(console, 'error');
  jasmine.addMatchers({
    toHaveBeenWarned: function toHaveBeenWarned() {
      return createCompareFn(console.error);
    },
    toHaveBeenTipped: function toHaveBeenTipped() {
      return createCompareFn(console.warn);
    }
  });
});

afterEach(function (done) {
  var warned = function warned(msg) {
    return asserted.some(function (assertedMsg) {
      return msg.toString().indexOf(assertedMsg) > -1;
    });
  };
  var count = console.error.calls.count();
  var args = void 0;
  while (count--) {
    args = console.error.calls.argsFor(count);
    if (!warned(args[0])) {
      done.fail('Unexpected console.error message: ' + args[0]);
      return;
    }
  }
  done();
});

