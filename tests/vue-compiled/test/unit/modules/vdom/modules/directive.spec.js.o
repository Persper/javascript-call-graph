'use strict';

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

var _patch = require('web/runtime/patch');

var _vnode = require('core/vdom/vnode');

var _vnode2 = _interopRequireDefault(_vnode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('vdom directive module', function () {
  it('should work', function () {
    var directive1 = {
      bind: jasmine.createSpy('bind'),
      update: jasmine.createSpy('update'),
      unbind: jasmine.createSpy('unbind')
    };
    var vm = new _vue2.default({ directives: { directive1: directive1 } });
    // create
    var vnode1 = new _vnode2.default('div', {}, [new _vnode2.default('p', {
      directives: [{
        name: 'directive1', value: 'hello', arg: 'arg1', modifiers: { modifier1: true }
      }]
    }, undefined, 'hello world', undefined, vm)]);
    (0, _patch.patch)(null, vnode1);
    expect(directive1.bind).toHaveBeenCalled();
    // update
    var vnode2 = new _vnode2.default('div', {}, [new _vnode2.default('p', {
      directives: [{
        name: 'directive1', value: 'world', arg: 'arg1', modifiers: { modifier1: true }
      }]
    }, undefined, 'hello world', undefined, vm)]);
    (0, _patch.patch)(vnode1, vnode2);
    expect(directive1.update).toHaveBeenCalled();
    // destroy
    var vnode3 = new _vnode2.default('div');
    (0, _patch.patch)(vnode2, vnode3);
    expect(directive1.unbind).toHaveBeenCalled();
  });
});

