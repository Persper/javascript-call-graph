'use strict';

var _patch = require('web/runtime/patch');

var _vnode = require('core/vdom/vnode');

var _vnode2 = _interopRequireDefault(_vnode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('vdom class module', function () {
  it('should create an element with staticClass', function () {
    var vnode = new _vnode2.default('p', { staticClass: 'class1' });
    var elm = (0, _patch.patch)(null, vnode);
    expect(elm).toHaveClass('class1');
  });

  it('should create an element with class', function () {
    var vnode = new _vnode2.default('p', { class: 'class1' });
    var elm = (0, _patch.patch)(null, vnode);
    expect(elm).toHaveClass('class1');
  });

  it('should create an element with array class', function () {
    var vnode = new _vnode2.default('p', { class: ['class1', 'class2'] });
    var elm = (0, _patch.patch)(null, vnode);
    expect(elm).toHaveClass('class1');
    expect(elm).toHaveClass('class2');
  });

  it('should create an element with object class', function () {
    var vnode = new _vnode2.default('p', {
      class: { class1: true, class2: false, class3: true }
    });
    var elm = (0, _patch.patch)(null, vnode);
    expect(elm).toHaveClass('class1');
    expect(elm).not.toHaveClass('class2');
    expect(elm).toHaveClass('class3');
  });

  it('should create an element with mixed class', function () {
    var vnode = new _vnode2.default('p', {
      class: [{ class1: false, class2: true, class3: false }, 'class4', ['class5', 'class6']]
    });
    var elm = (0, _patch.patch)(null, vnode);
    expect(elm).not.toHaveClass('class1');
    expect(elm).toHaveClass('class2');
    expect(elm).not.toHaveClass('class3');
    expect(elm).toHaveClass('class4');
    expect(elm).toHaveClass('class5');
    expect(elm).toHaveClass('class6');
  });

  it('should create an element with staticClass and class', function () {
    var vnode = new _vnode2.default('p', { staticClass: 'class1', class: 'class2' });
    var elm = (0, _patch.patch)(null, vnode);
    expect(elm).toHaveClass('class1');
    expect(elm).toHaveClass('class2');
  });

  it('should handle transition class', function () {
    var vnode1 = new _vnode2.default('p', {
      class: { class1: true, class2: false, class3: true }
    });
    var elm = (0, _patch.patch)(null, vnode1);
    elm._transitionClasses = ['class4'];
    var vnode2 = new _vnode2.default('p', {
      class: { class1: true, class2: true, class3: true }
    });
    elm = (0, _patch.patch)(vnode1, vnode2);
    expect(elm).toHaveClass('class1');
    expect(elm).toHaveClass('class2');
    expect(elm).toHaveClass('class3');
    expect(elm).toHaveClass('class4');
  });

  it('should change the elements class', function () {
    var vnode1 = new _vnode2.default('p', {
      class: { class1: true, class2: false, class3: true }
    });
    var vnode2 = new _vnode2.default('p', { staticClass: 'foo bar' });
    var elm = (0, _patch.patch)(null, vnode1);
    elm = (0, _patch.patch)(vnode1, vnode2);
    expect(elm).not.toHaveClass('class1');
    expect(elm).not.toHaveClass('class2');
    expect(elm).not.toHaveClass('class3');
    expect(elm).toHaveClass('foo');
    expect(elm).toHaveClass('bar');
  });

  it('should remove the elements class', function () {
    var vnode1 = new _vnode2.default('p', {
      class: { class1: true, class2: false, class3: true }
    });
    var vnode2 = new _vnode2.default('p', { class: {} });
    var elm = (0, _patch.patch)(null, vnode1);
    elm = (0, _patch.patch)(vnode1, vnode2);
    expect(elm).not.toHaveClass('class1');
    expect(elm).not.toHaveClass('class2');
    expect(elm).not.toHaveClass('class3');
  });

  it('should remove class for new nodes without class data', function () {
    var vnode1 = new _vnode2.default('p', {
      class: { class1: true, class2: false, class3: true }
    });
    var vnode2 = new _vnode2.default('p', {});
    var elm = (0, _patch.patch)(null, vnode1);
    elm = (0, _patch.patch)(vnode1, vnode2);
    expect(elm).not.toHaveClass('class1');
    expect(elm).not.toHaveClass('class2');
    expect(elm).not.toHaveClass('class3');
  });
});

