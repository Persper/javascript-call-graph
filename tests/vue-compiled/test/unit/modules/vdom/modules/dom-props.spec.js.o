'use strict';

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

var _patch = require('web/runtime/patch');

var _vnode = require('core/vdom/vnode');

var _vnode2 = _interopRequireDefault(_vnode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('vdom domProps module', function () {
  it('should create an element with domProps', function () {
    var vnode = new _vnode2.default('a', { domProps: { src: 'http://localhost/' } });
    var elm = (0, _patch.patch)(null, vnode);
    expect(elm.src).toBe('http://localhost/');
  });

  it('should change the elements domProps', function () {
    var vnode1 = new _vnode2.default('a', { domProps: { src: 'http://localhost/' } });
    var vnode2 = new _vnode2.default('a', { domProps: { src: 'https://vuejs.org/' } });
    (0, _patch.patch)(null, vnode1);
    var elm = (0, _patch.patch)(vnode1, vnode2);
    expect(elm.src).toBe('https://vuejs.org/');
  });

  it('should remove the elements domProps', function () {
    var vnode1 = new _vnode2.default('a', { domProps: { src: 'http://localhost/' } });
    var vnode2 = new _vnode2.default('a', { domProps: {} });
    (0, _patch.patch)(null, vnode1);
    var elm = (0, _patch.patch)(vnode1, vnode2);
    expect(elm.src).toBe('');
  });

  it('should initialize the elements value to zero', function () {
    var vnode = new _vnode2.default('input', { domProps: { value: 0 } });
    var elm = (0, _patch.patch)(null, vnode);
    expect(elm.value).toBe('0');
  });

  it('should save raw value on element', function () {
    var value = {};
    var vnode = new _vnode2.default('input', { domProps: { value: value } });
    var elm = (0, _patch.patch)(null, vnode);
    expect(elm._value).toBe(value);
  });

  it('should discard vnode children if the node has innerHTML or textContent as a prop', function () {
    var vnode = new _vnode2.default('div', { domProps: { innerHTML: 'hi' } }, [new _vnode2.default('span'), new _vnode2.default('span')]);
    var elm = (0, _patch.patch)(null, vnode);
    expect(elm.innerHTML).toBe('hi');
    expect(vnode.children.length).toBe(0);

    var vnode2 = new _vnode2.default('div', { domProps: { textContent: 'hi' } }, [new _vnode2.default('span'), new _vnode2.default('span')]);
    var elm2 = (0, _patch.patch)(null, vnode2);
    expect(elm2.textContent).toBe('hi');
    expect(vnode2.children.length).toBe(0);

    var vnode3 = new _vnode2.default('div', undefined, undefined, '123');
    (0, _patch.patch)(null, vnode3);
    var elm3 = (0, _patch.patch)(vnode3, vnode2);
    expect(elm3.textContent).toBe('hi');

    var vnode4 = new _vnode2.default('div', undefined, undefined, new _vnode2.default('span'));
    (0, _patch.patch)(null, vnode4);
    var elm4 = (0, _patch.patch)(vnode4, vnode);
    expect(elm4.textContent).toBe('hi');
  });

  it('should handle mutating observed props object', function (done) {
    var vm = new _vue2.default({
      data: {
        props: {
          id: 'foo'
        }
      },
      render: function render(h) {
        return h('div', {
          domProps: this.props
        });
      }
    }).$mount();

    expect(vm.$el.id).toBe('foo');
    vm.props.id = 'bar';
    waitForUpdate(function () {
      expect(vm.$el.id).toBe('bar');
      vm.props = { id: 'baz' };
    }).then(function () {
      expect(vm.$el.id).toBe('baz');
    }).then(done);
  });
});

