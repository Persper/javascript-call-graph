'use strict';

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

var _patch = require('web/runtime/patch');

var _vnode = require('core/vdom/vnode');

var _vnode2 = _interopRequireDefault(_vnode);

var _index = require('web/util/index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('vdom attrs module', function () {
  it('should create an element with attrs', function () {
    var vnode = new _vnode2.default('p', { attrs: { id: 1, class: 'class1' } });
    var elm = (0, _patch.patch)(null, vnode);
    expect(elm.id).toBe('1');
    expect(elm).toHaveClass('class1');
  });

  it('should change the elements attrs', function () {
    var vnode1 = new _vnode2.default('i', { attrs: { id: '1', class: 'i am vdom' } });
    var vnode2 = new _vnode2.default('i', { attrs: { id: '2', class: 'i am' } });
    (0, _patch.patch)(null, vnode1);
    var elm = (0, _patch.patch)(vnode1, vnode2);
    expect(elm.id).toBe('2');
    expect(elm).toHaveClass('i');
    expect(elm).toHaveClass('am');
    expect(elm).not.toHaveClass('vdom');
  });

  it('should remove the elements attrs', function () {
    var vnode1 = new _vnode2.default('i', { attrs: { id: '1', class: 'i am vdom' } });
    var vnode2 = new _vnode2.default('i', { attrs: { id: '1' } });
    (0, _patch.patch)(null, vnode1);
    var elm = (0, _patch.patch)(vnode1, vnode2);
    expect(elm.id).toBe('1');
    expect(elm.className).toBe('');
  });

  it('should remove the elements attrs for new nodes without attrs data', function () {
    var vnode1 = new _vnode2.default('i', { attrs: { id: '1', class: 'i am vdom' } });
    var vnode2 = new _vnode2.default('i', {});
    (0, _patch.patch)(null, vnode1);
    var elm = (0, _patch.patch)(vnode1, vnode2);
    expect(elm.id).toBe('');
    expect(elm.className).toBe('');
  });

  it('should remove the falsy value from boolean attr', function () {
    var vnode = new _vnode2.default('option', { attrs: { disabled: null } });
    var elm = (0, _patch.patch)(null, vnode);
    expect(elm.getAttribute('disabled')).toBe(null);
  });

  it('should set the attr name to boolean attr', function () {
    var vnode = new _vnode2.default('option', { attrs: { disabled: true } });
    var elm = (0, _patch.patch)(null, vnode);
    expect(elm.getAttribute('disabled')).toBe('disabled');
  });

  it('should set the falsy value to enumerated attr', function () {
    var vnode = new _vnode2.default('div', { attrs: { contenteditable: null } });
    var elm = (0, _patch.patch)(null, vnode);
    expect(elm.getAttribute('contenteditable')).toBe('false');
  });

  it('should set the boolean string value to enumerated attr', function () {
    var vnode = new _vnode2.default('div', { attrs: { contenteditable: 'true' } });
    var elm = (0, _patch.patch)(null, vnode);
    expect(elm.getAttribute('contenteditable')).toBe('true');
  });

  it('should set the xlink value to attr', function () {
    var vnode = new _vnode2.default('a', { attrs: { 'xlink:href': '#id1' } });
    var elm = (0, _patch.patch)(null, vnode);
    expect(elm.getAttributeNS(_index.xlinkNS, 'href')).toBe('#id1');
  });

  it('should set the xlink boolean string value to attr', function () {
    var vnode = new _vnode2.default('option', { attrs: { 'xlink:disabled': true } });
    var elm = (0, _patch.patch)(null, vnode);
    expect(elm.getAttributeNS(_index.xlinkNS, 'disabled')).toBe('true');
  });

  it('should handle mutating observed attrs object', function (done) {
    var vm = new _vue2.default({
      data: {
        attrs: {
          id: 'foo'
        }
      },
      render: function render(h) {
        return h('div', {
          attrs: this.attrs
        });
      }
    }).$mount();

    expect(vm.$el.id).toBe('foo');
    vm.attrs.id = 'bar';
    waitForUpdate(function () {
      expect(vm.$el.id).toBe('bar');
      vm.attrs = { id: 'baz' };
    }).then(function () {
      expect(vm.$el.id).toBe('baz');
    }).then(done);
  });
});

