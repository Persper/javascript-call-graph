'use strict';

var _nextTick = require('core/util/next-tick');

describe('nextTick', function () {
  it('accepts a callback', function (done) {
    (0, _nextTick.nextTick)(done);
  });

  it('returns undefined when passed a callback', function () {
    expect((0, _nextTick.nextTick)(function () {})).toBeUndefined();
  });

  if (typeof Promise !== 'undefined') {
    it('returns a Promise when provided no callback', function (done) {
      (0, _nextTick.nextTick)().then(done);
    });

    it('returns a Promise with a context argument when provided a falsy callback and an object', function (done) {
      var obj = {};
      (0, _nextTick.nextTick)(undefined, obj).then(function (ctx) {
        expect(ctx).toBe(obj);
        done();
      });
    });

    it('returned Promise should resolve correctly vs callback', function (done) {
      var spy = jasmine.createSpy();
      (0, _nextTick.nextTick)(spy);
      (0, _nextTick.nextTick)().then(function () {
        expect(spy).toHaveBeenCalled();
        done();
      });
    });
  }
});

