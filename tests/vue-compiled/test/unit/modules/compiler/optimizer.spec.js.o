'use strict';

var _index = require('compiler/parser/index');

var _util = require('shared/util');

var _optimizer = require('compiler/optimizer');

var _options = require('web/compiler/options');

describe('optimizer', function () {
  it('simple', function () {
    var ast = (0, _index.parse)('<h1 id="section1"><span>hello world</span></h1>', _options.baseOptions);
    (0, _optimizer.optimize)(ast, _options.baseOptions);
    expect(ast.static).toBe(true); // h1
    expect(ast.staticRoot).toBe(true);
    expect(ast.children[0].static).toBe(true); // span
  });

  it('simple with comment', function () {
    var options = (0, _util.extend)({
      comments: true
    }, _options.baseOptions);
    var ast = (0, _index.parse)('<h1 id="section1"><span>hello world</span><!--comment--></h1>', options);
    (0, _optimizer.optimize)(ast, options);
    expect(ast.static).toBe(true); // h1
    expect(ast.staticRoot).toBe(true);
    expect(ast.children.length).toBe(2);
    expect(ast.children[0].static).toBe(true); // span
    expect(ast.children[1].static).toBe(true); // comment
  });

  it('skip simple nodes', function () {
    var ast = (0, _index.parse)('<h1 id="section1">hello</h1>', _options.baseOptions);
    (0, _optimizer.optimize)(ast, _options.baseOptions);
    expect(ast.static).toBe(true);
    expect(ast.staticRoot).toBe(false); // this is too simple to warrant a static tree
  });

  it('interpolation', function () {
    var ast = (0, _index.parse)('<h1>{{msg}}</h1>', _options.baseOptions);
    (0, _optimizer.optimize)(ast, _options.baseOptions);
    expect(ast.static).toBe(false); // h1
    expect(ast.children[0].static).toBe(false); // text node with interpolation
  });

  it('nested elements', function () {
    var ast = (0, _index.parse)('<ul><li>hello</li><li>world</li></ul>', _options.baseOptions);
    (0, _optimizer.optimize)(ast, _options.baseOptions);
    // ul
    expect(ast.static).toBe(true);
    expect(ast.staticRoot).toBe(true);
    // li
    expect(ast.children[0].static).toBe(true); // first
    expect(ast.children[1].static).toBe(true); // second
    // text node inside li
    expect(ast.children[0].children[0].static).toBe(true); // first
    expect(ast.children[1].children[0].static).toBe(true); // second
  });

  it('nested complex elements', function () {
    var ast = (0, _index.parse)('<ul><li>{{msg1}}</li><li>---</li><li>{{msg2}}</li></ul>', _options.baseOptions);
    (0, _optimizer.optimize)(ast, _options.baseOptions);
    // ul
    expect(ast.static).toBe(false); // ul
    // li
    expect(ast.children[0].static).toBe(false); // first
    expect(ast.children[1].static).toBe(true); // second
    expect(ast.children[2].static).toBe(false); // third
    // text node inside li
    expect(ast.children[0].children[0].static).toBe(false); // first
    expect(ast.children[1].children[0].static).toBe(true); // second
    expect(ast.children[2].children[0].static).toBe(false); // third
  });

  it('v-if directive', function () {
    var ast = (0, _index.parse)('<div id="section1" v-if="show"><p><span>hello world</span></p></div>', _options.baseOptions);
    (0, _optimizer.optimize)(ast, _options.baseOptions);
    expect(ast.static).toBe(false);
    expect(ast.children[0].static).toBe(true);
  });

  it('v-else directive', function () {
    var ast = (0, _index.parse)('<div><p v-if="show">hello world</p><div v-else><p><span>foo bar</span></p></div></div>', _options.baseOptions);
    (0, _optimizer.optimize)(ast, _options.baseOptions);
    expect(ast.static).toBe(false);
    expect(ast.children[0].static).toBe(false);
    expect(ast.children[0].ifConditions[0].block.static).toBe(false);
    expect(ast.children[0].ifConditions[1].block.static).toBe(false);
    expect(ast.children[0].ifConditions[0].block.children[0].static).toBe(true);
    expect(ast.children[0].ifConditions[1].block.children[0].static).toBe(true);
  });

  it('v-pre directive', function () {
    var ast = (0, _index.parse)('<ul v-pre><li>{{msg}}</li><li>world</li></ul>', _options.baseOptions);
    (0, _optimizer.optimize)(ast, _options.baseOptions);
    expect(ast.static).toBe(true);
    expect(ast.staticRoot).toBe(true);
    expect(ast.children[0].static).toBe(true);
    expect(ast.children[1].static).toBe(true);
    expect(ast.children[0].children[0].static).toBe(true);
    expect(ast.children[1].children[0].static).toBe(true);
  });

  it('v-for directive', function () {
    var ast = (0, _index.parse)('<ul><li v-for="item in items">hello world {{$index}}</li></ul>', _options.baseOptions);
    (0, _optimizer.optimize)(ast, _options.baseOptions);
    // ul
    expect(ast.static).toBe(false);
    // li with v-for
    expect(ast.children[0].static).toBe(false);
    expect(ast.children[0].children[0].static).toBe(false);
  });

  it('v-once directive', function () {
    var ast = (0, _index.parse)('<p v-once>{{msg}}</p>', _options.baseOptions);
    (0, _optimizer.optimize)(ast, _options.baseOptions);
    expect(ast.static).toBe(false); // p
    expect(ast.children[0].static).toBe(false); // text node
  });

  it('single slot', function () {
    var ast = (0, _index.parse)('<div><slot>hello</slot></div>', _options.baseOptions);
    (0, _optimizer.optimize)(ast, _options.baseOptions);
    expect(ast.children[0].static).toBe(false); // slot
    expect(ast.children[0].children[0].static).toBe(true); // text node
  });

  it('named slot', function () {
    var ast = (0, _index.parse)('<div><slot name="one">hello world</slot></div>', _options.baseOptions);
    (0, _optimizer.optimize)(ast, _options.baseOptions);
    expect(ast.children[0].static).toBe(false); // slot
    expect(ast.children[0].children[0].static).toBe(true); // text node
  });

  it('slot target', function () {
    var ast = (0, _index.parse)('<p slot="one">hello world</p>', _options.baseOptions);
    (0, _optimizer.optimize)(ast, _options.baseOptions);
    expect(ast.static).toBe(false); // slot
    expect(ast.children[0].static).toBe(true); // text node
  });

  it('component', function () {
    var ast = (0, _index.parse)('<my-component></my-component>', _options.baseOptions);
    (0, _optimizer.optimize)(ast, _options.baseOptions);
    expect(ast.static).toBe(false); // component
  });

  it('component for inline-template', function () {
    var ast = (0, _index.parse)('<my-component inline-template><p>hello world</p><p>{{msg}}</p></my-component>', _options.baseOptions);
    (0, _optimizer.optimize)(ast, _options.baseOptions);
    // component
    expect(ast.static).toBe(false); // component
    // p
    expect(ast.children[0].static).toBe(true); // first
    expect(ast.children[1].static).toBe(false); // second
    // text node inside p
    expect(ast.children[0].children[0].static).toBe(true); // first
    expect(ast.children[1].children[0].static).toBe(false); // second
  });

  it('class binding', function () {
    var ast = (0, _index.parse)('<p :class="class1">hello world</p>', _options.baseOptions);
    (0, _optimizer.optimize)(ast, _options.baseOptions);
    expect(ast.static).toBe(false);
    expect(ast.children[0].static).toBe(true);
  });

  it('style binding', function () {
    var ast = (0, _index.parse)('<p :style="error">{{msg}}</p>', _options.baseOptions);
    (0, _optimizer.optimize)(ast, _options.baseOptions);
    expect(ast.static).toBe(false);
    expect(ast.children[0].static).toBe(false);
  });

  it('key', function () {
    var ast = (0, _index.parse)('<p key="foo">hello world</p>', _options.baseOptions);
    (0, _optimizer.optimize)(ast, _options.baseOptions);
    expect(ast.static).toBe(false);
    expect(ast.children[0].static).toBe(true);
  });

  it('ref', function () {
    var ast = (0, _index.parse)('<p ref="foo">hello world</p>', _options.baseOptions);
    (0, _optimizer.optimize)(ast, _options.baseOptions);
    expect(ast.static).toBe(false);
    expect(ast.children[0].static).toBe(true);
  });

  it('transition', function () {
    var ast = (0, _index.parse)('<p v-if="show" transition="expand">hello world</p>', _options.baseOptions);
    (0, _optimizer.optimize)(ast, _options.baseOptions);
    expect(ast.static).toBe(false);
    expect(ast.children[0].static).toBe(true);
  });

  it('v-bind directive', function () {
    var ast = (0, _index.parse)('<input type="text" name="field1" :value="msg">', _options.baseOptions);
    (0, _optimizer.optimize)(ast, _options.baseOptions);
    expect(ast.static).toBe(false);
  });

  it('v-on directive', function () {
    var ast = (0, _index.parse)('<input type="text" name="field1" :value="msg" @input="onInput">', _options.baseOptions);
    (0, _optimizer.optimize)(ast, _options.baseOptions);
    expect(ast.static).toBe(false);
  });

  it('custom directive', function () {
    var ast = (0, _index.parse)('<form><input type="text" name="field1" :value="msg" v-validate:field1="required"></form>', _options.baseOptions);
    (0, _optimizer.optimize)(ast, _options.baseOptions);
    expect(ast.static).toBe(false);
    expect(ast.children[0].static).toBe(false);
  });

  it('not root ast', function () {
    var ast = null;
    (0, _optimizer.optimize)(ast, _options.baseOptions);
    expect(ast).toBe(null);
  });

  it('not specified isReservedTag option', function () {
    var ast = (0, _index.parse)('<h1 id="section1">hello world</h1>', _options.baseOptions);
    (0, _optimizer.optimize)(ast, {});
    expect(ast.static).toBe(false);
  });

  it('mark static trees inside v-for', function () {
    var ast = (0, _index.parse)('<div><div v-for="i in 10"><p><span>hi</span></p></div></div>', _options.baseOptions);
    (0, _optimizer.optimize)(ast, _options.baseOptions);
    expect(ast.children[0].children[0].staticRoot).toBe(true);
    expect(ast.children[0].children[0].staticInFor).toBe(true);
  });

  it('mark static trees inside v-for with nested v-else and v-once', function () {
    var ast = (0, _index.parse)('\n      <div v-if="1"></div>\n      <div v-else-if="2">\n        <div v-for="i in 10" :key="i">\n          <div v-if="1">{{ i }}</div>\n          <div v-else-if="2" v-once>{{ i }}</div>\n          <div v-else v-once>{{ i }}</div>\n        </div>\n      </div>\n      <div v-else>\n        <div v-for="i in 10" :key="i">\n          <div v-if="1">{{ i }}</div>\n          <div v-else v-once>{{ i }}</div>\n        </div>\n      </div>\n      ', _options.baseOptions);
    (0, _optimizer.optimize)(ast, _options.baseOptions);
    expect(ast.ifConditions[1].block.children[0].children[0].ifConditions[1].block.staticRoot).toBe(false);
    expect(ast.ifConditions[1].block.children[0].children[0].ifConditions[1].block.staticInFor).toBe(true);

    expect(ast.ifConditions[1].block.children[0].children[0].ifConditions[2].block.staticRoot).toBe(false);
    expect(ast.ifConditions[1].block.children[0].children[0].ifConditions[2].block.staticInFor).toBe(true);

    expect(ast.ifConditions[2].block.children[0].children[0].ifConditions[1].block.staticRoot).toBe(false);
    expect(ast.ifConditions[2].block.children[0].children[0].ifConditions[1].block.staticInFor).toBe(true);
  });
});

