'use strict';

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

var _debug = require('core/util/debug');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Debug utilities', function () {
  it('properly format component names', function () {
    var vm = new _vue2.default();
    expect((0, _debug.formatComponentName)(vm)).toBe('<Root>');

    vm.$root = null;
    vm.$options.name = 'hello-there';
    expect((0, _debug.formatComponentName)(vm)).toBe('<HelloThere>');

    vm.$options.name = null;
    vm.$options._componentTag = 'foo-bar-1';
    expect((0, _debug.formatComponentName)(vm)).toBe('<FooBar1>');

    vm.$options._componentTag = null;
    vm.$options.__file = '/foo/bar/baz/SomeThing.vue';
    expect((0, _debug.formatComponentName)(vm)).toBe('<SomeThing> at ' + vm.$options.__file);
    expect((0, _debug.formatComponentName)(vm, false)).toBe('<SomeThing>');

    vm.$options.__file = 'C:\\foo\\bar\\baz\\windows_file.vue';
    expect((0, _debug.formatComponentName)(vm)).toBe('<WindowsFile> at ' + vm.$options.__file);
    expect((0, _debug.formatComponentName)(vm, false)).toBe('<WindowsFile>');
  });

  it('generate correct component hierarchy trace', function () {
    var one = {
      name: 'one',
      render: function render(h) {
        return h(two);
      }
    };
    var two = {
      name: 'two',
      render: function render(h) {
        return h(three);
      }
    };
    var three = {
      name: 'three'
    };
    new _vue2.default({
      render: function render(h) {
        return h(one);
      }
    }).$mount();

    expect('Failed to mount component: template or render function not defined.\n\nfound in\n\n---> <Three>\n       <Two>\n         <One>\n           <Root>').toHaveBeenWarned();
  });

  it('generate correct component hierarchy trace (recursive)', function () {
    var i = 0;
    var one = {
      name: 'one',
      render: function render(h) {
        return i++ < 5 ? h(one) : h(two);
      }
    };
    var two = {
      name: 'two',
      render: function render(h) {
        return h(three);
      }
    };
    var three = {
      name: 'three'
    };
    new _vue2.default({
      render: function render(h) {
        return h(one);
      }
    }).$mount();

    expect('Failed to mount component: template or render function not defined.\n\nfound in\n\n---> <Three>\n       <Two>\n         <One>... (5 recursive calls)\n           <Root>').toHaveBeenWarned();
  });

  describe('warn', function () {
    var msg = 'message';
    var vm = new _vue2.default();

    it('calls warnHandler if warnHandler is set', function () {
      _vue2.default.config.warnHandler = jasmine.createSpy();

      (0, _debug.warn)(msg, vm);

      expect(_vue2.default.config.warnHandler).toHaveBeenCalledWith(msg, vm, jasmine.any(String));

      _vue2.default.config.warnHandler = null;
    });

    it('calls console.error if silent is false', function () {
      _vue2.default.config.silent = false;

      (0, _debug.warn)(msg, vm);

      expect(msg).toHaveBeenWarned();
      expect(console.error).toHaveBeenCalled();
    });

    it('does not call console.error if silent is true', function () {
      _vue2.default.config.silent = true;

      (0, _debug.warn)(msg, vm);

      expect(console.error).not.toHaveBeenCalled();

      _vue2.default.config.silent = false;
    });
  });
});

