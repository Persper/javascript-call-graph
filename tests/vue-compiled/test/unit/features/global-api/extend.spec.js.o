'use strict';

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Global API: extend', function () {
  it('should correctly merge options', function () {
    var Test = _vue2.default.extend({
      name: 'test',
      a: 1,
      b: 2
    });
    expect(Test.options.a).toBe(1);
    expect(Test.options.b).toBe(2);
    expect(Test.super).toBe(_vue2.default);
    var t = new Test({
      a: 2
    });
    expect(t.$options.a).toBe(2);
    expect(t.$options.b).toBe(2);
    // inheritance
    var Test2 = Test.extend({
      a: 2
    });
    expect(Test2.options.a).toBe(2);
    expect(Test2.options.b).toBe(2);
    var t2 = new Test2({
      a: 3
    });
    expect(t2.$options.a).toBe(3);
    expect(t2.$options.b).toBe(2);
  });

  it('should warn invalid names', function () {
    _vue2.default.extend({ name: '123' });
    expect('Invalid component name: "123"').toHaveBeenWarned();
    _vue2.default.extend({ name: '_fesf' });
    expect('Invalid component name: "_fesf"').toHaveBeenWarned();
    _vue2.default.extend({ name: 'Some App' });
    expect('Invalid component name: "Some App"').toHaveBeenWarned();
  });

  it('should work when used as components', function () {
    var foo = _vue2.default.extend({
      template: '<span>foo</span>'
    });
    var bar = _vue2.default.extend({
      template: '<span>bar</span>'
    });
    var vm = new _vue2.default({
      template: '<div><foo></foo><bar></bar></div>',
      components: { foo: foo, bar: bar }
    }).$mount();
    expect(vm.$el.innerHTML).toBe('<span>foo</span><span>bar</span>');
  });

  it('should merge lifecycle hooks', function () {
    var calls = [];
    var A = _vue2.default.extend({
      created: function created() {
        calls.push(1);
      }
    });
    var B = A.extend({
      created: function created() {
        calls.push(2);
      }
    });
    new B({
      created: function created() {
        calls.push(3);
      }
    });
    expect(calls).toEqual([1, 2, 3]);
  });

  it('should merge methods', function () {
    var A = _vue2.default.extend({
      methods: {
        a: function a() {
          return this.n;
        }
      }
    });
    var B = A.extend({
      methods: {
        b: function b() {
          return this.n + 1;
        }
      }
    });
    var b = new B({
      data: { n: 0 },
      methods: {
        c: function c() {
          return this.n + 2;
        }
      }
    });
    expect(b.a()).toBe(0);
    expect(b.b()).toBe(1);
    expect(b.c()).toBe(2);
  });

  it('should merge assets', function () {
    var A = _vue2.default.extend({
      components: {
        aa: {
          template: '<div>A</div>'
        }
      }
    });
    var B = A.extend({
      components: {
        bb: {
          template: '<div>B</div>'
        }
      }
    });
    var b = new B({
      template: '<div><aa></aa><bb></bb></div>'
    }).$mount();
    expect(b.$el.innerHTML).toBe('<div>A</div><div>B</div>');
  });

  it('caching', function () {
    var options = {
      template: '<div></div>'
    };
    var A = _vue2.default.extend(options);
    var B = _vue2.default.extend(options);
    expect(A).toBe(B);
  });

  // #4767
  it('extended options should use different identify from parent', function () {
    var A = _vue2.default.extend({ computed: {} });
    var B = A.extend();
    B.options.computed.b = function () {
      return 'foo';
    };
    expect(B.options.computed).not.toBe(A.options.computed);
    expect(A.options.computed.b).toBeUndefined();
  });
});

