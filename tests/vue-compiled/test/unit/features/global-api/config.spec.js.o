'use strict';

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

var _debug = require('core/util/debug');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Global config', function () {
  it('should warn replacing config object', function () {
    var originalConfig = _vue2.default.config;
    _vue2.default.config = {};
    expect(_vue2.default.config).toBe(originalConfig);
    expect('Do not replace the Vue.config object').toHaveBeenWarned();
  });

  describe('silent', function () {
    it('should be false by default', function () {
      (0, _debug.warn)('foo');
      expect('foo').toHaveBeenWarned();
    });

    it('should work when set to true', function () {
      _vue2.default.config.silent = true;
      (0, _debug.warn)('foo');
      expect('foo').not.toHaveBeenWarned();
      _vue2.default.config.silent = false;
    });
  });

  describe('optionMergeStrategies', function () {
    it('should allow defining custom option merging strategies', function () {
      var spy = jasmine.createSpy('option merging');
      _vue2.default.config.optionMergeStrategies.__test__ = function (parent, child, vm) {
        spy(parent, child, vm);
        return child + 1;
      };
      var Test = _vue2.default.extend({
        __test__: 1
      });
      expect(spy.calls.count()).toBe(1);
      expect(spy).toHaveBeenCalledWith(undefined, 1, undefined);
      expect(Test.options.__test__).toBe(2);
      var test = new Test({
        __test__: 2
      });
      expect(spy.calls.count()).toBe(2);
      expect(spy).toHaveBeenCalledWith(2, 2, test);
      expect(test.$options.__test__).toBe(3);
    });
  });

  describe('ignoredElements', function () {
    it('should work', function () {
      _vue2.default.config.ignoredElements = ['foo', /^ion-/];
      new _vue2.default({
        template: '<div><foo/><ion-foo/><ion-bar/></div>'
      }).$mount();
      expect('Unknown custom element').not.toHaveBeenWarned();
      _vue2.default.config.ignoredElements = [];
    });
  });
});

