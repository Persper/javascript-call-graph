'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

describe('Global API: set/delete', function () {
  describe('Vue.set', function () {
    it('should update a vue object', function (done) {
      var vm = new _vue2.default({
        template: '<div>{{x}}</div>',
        data: { x: 1 }
      }).$mount();
      expect(vm.$el.innerHTML).toBe('1');
      _vue2.default.set(vm, 'x', 2);
      waitForUpdate(function () {
        expect(vm.$el.innerHTML).toBe('2');
      }).then(done);
    });

    it('should update a observing object', function (done) {
      var vm = new _vue2.default({
        template: '<div>{{foo.x}}</div>',
        data: { foo: { x: 1 } }
      }).$mount();
      expect(vm.$el.innerHTML).toBe('1');
      _vue2.default.set(vm.foo, 'x', 2);
      waitForUpdate(function () {
        expect(vm.$el.innerHTML).toBe('2');
      }).then(done);
    });

    it('should update a observing array', function (done) {
      var vm = new _vue2.default({
        template: '<div><div v-for="v,k in list">{{k}}-{{v}}</div></div>',
        data: { list: ['a', 'b', 'c'] }
      }).$mount();
      expect(vm.$el.innerHTML).toBe('<div>0-a</div><div>1-b</div><div>2-c</div>');
      _vue2.default.set(vm.list, 1, 'd');
      waitForUpdate(function () {
        expect(vm.$el.innerHTML).toBe('<div>0-a</div><div>1-d</div><div>2-c</div>');
        _vue2.default.set(vm.list, '2', 'e');
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('<div>0-a</div><div>1-d</div><div>2-e</div>');
        /* eslint-disable no-new-wrappers */
        _vue2.default.set(vm.list, new Number(1), 'f');
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('<div>0-a</div><div>1-f</div><div>2-e</div>');
        _vue2.default.set(vm.list, '3g', 'g');
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('<div>0-a</div><div>1-f</div><div>2-e</div>');
      }).then(done);
    });

    it('should update a vue object with nothing', function (done) {
      var vm = new _vue2.default({
        template: '<div>{{x}}</div>',
        data: { x: 1 }
      }).$mount();
      expect(vm.$el.innerHTML).toBe('1');
      _vue2.default.set(vm, 'x', null);
      waitForUpdate(function () {
        expect(vm.$el.innerHTML).toBe('');
        _vue2.default.set(vm, 'x');
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('');
      }).then(done);
    });

    it('be able to use string type index in array', function (done) {
      var vm = new _vue2.default({
        template: '<div><p v-for="obj in lists">{{obj.name}}</p></div>',
        data: {
          lists: [{ name: 'A' }, { name: 'B' }, { name: 'C' }]
        }
      }).$mount();
      expect(vm.$el.innerHTML).toBe('<p>A</p><p>B</p><p>C</p>');
      _vue2.default.set(vm.lists, '0', { name: 'D' });
      waitForUpdate(function () {
        expect(vm.$el.innerHTML).toBe('<p>D</p><p>B</p><p>C</p>');
      }).then(done);
    });

    // #6845
    it('should not overwrite properties on prototype chain', function () {
      var Model = function () {
        function Model() {
          _classCallCheck(this, Model);

          this._bar = null;
        }

        _createClass(Model, [{
          key: 'bar',
          get: function get() {
            return this._bar;
          },
          set: function set(newvalue) {
            this._bar = newvalue;
          }
        }]);

        return Model;
      }();

      var vm = new _vue2.default({
        data: {
          data: new Model()
        }
      });

      _vue2.default.set(vm.data, 'bar', 123);
      expect(vm.data.bar).toBe(123);
      expect(vm.data.hasOwnProperty('bar')).toBe(false);
      expect(vm.data._bar).toBe(123);
    });
  });

  describe('Vue.delete', function () {
    it('should delete a key', function (done) {
      var vm = new _vue2.default({
        template: '<div>{{obj.x}}</div>',
        data: { obj: { x: 1 } }
      }).$mount();
      expect(vm.$el.innerHTML).toBe('1');
      vm.obj.x = 2;
      waitForUpdate(function () {
        expect(vm.$el.innerHTML).toBe('2');
        _vue2.default.delete(vm.obj, 'x');
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('');
        vm.obj.x = 3;
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('');
      }).then(done);
    });

    it('be able to delete an item in array', function (done) {
      var vm = new _vue2.default({
        template: '<div><p v-for="obj in lists">{{obj.name}}</p></div>',
        data: {
          lists: [{ name: 'A' }, { name: 'B' }, { name: 'C' }]
        }
      }).$mount();
      expect(vm.$el.innerHTML).toBe('<p>A</p><p>B</p><p>C</p>');
      _vue2.default.delete(vm.lists, 1);
      waitForUpdate(function () {
        expect(vm.$el.innerHTML).toBe('<p>A</p><p>C</p>');
        _vue2.default.delete(vm.lists, NaN);
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('<p>A</p><p>C</p>');
        _vue2.default.delete(vm.lists, -1);
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('<p>A</p><p>C</p>');
        _vue2.default.delete(vm.lists, '1.3');
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('<p>A</p><p>C</p>');
        _vue2.default.delete(vm.lists, true);
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('<p>A</p><p>C</p>');
        _vue2.default.delete(vm.lists, {});
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('<p>A</p><p>C</p>');
        _vue2.default.delete(vm.lists, '1');
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('<p>A</p>');
        /* eslint-disable no-new-wrappers */
        _vue2.default.delete(vm.lists, new Number(0));
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('');
      }).then(done);
    });
  });
});

