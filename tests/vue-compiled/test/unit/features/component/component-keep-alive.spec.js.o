'use strict';

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

var _injectStyles2 = require('../transition/inject-styles');

var _injectStyles3 = _interopRequireDefault(_injectStyles2);

var _env = require('core/util/env');

var _transitionUtil = require('web/runtime/transition-util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Component keep-alive', function () {
  var _injectStyles = (0, _injectStyles3.default)(),
      duration = _injectStyles.duration,
      buffer = _injectStyles.buffer;

  var components = void 0,
      one = void 0,
      two = void 0,
      el = void 0;
  beforeEach(function () {
    one = {
      template: '<div>one</div>',
      created: jasmine.createSpy('one created'),
      mounted: jasmine.createSpy('one mounted'),
      activated: jasmine.createSpy('one activated'),
      deactivated: jasmine.createSpy('one deactivated'),
      destroyed: jasmine.createSpy('one destroyed')
    };
    two = {
      template: '<div>two</div>',
      created: jasmine.createSpy('two created'),
      mounted: jasmine.createSpy('two mounted'),
      activated: jasmine.createSpy('two activated'),
      deactivated: jasmine.createSpy('two deactivated'),
      destroyed: jasmine.createSpy('two destroyed')
    };
    components = {
      one: one,
      two: two
    };
    el = document.createElement('div');
    document.body.appendChild(el);
  });

  function assertHookCalls(component, callCounts) {
    expect([component.created.calls.count(), component.mounted.calls.count(), component.activated.calls.count(), component.deactivated.calls.count(), component.destroyed.calls.count()]).toEqual(callCounts);
  }

  it('should work', function (done) {
    var vm = new _vue2.default({
      template: '\n        <div v-if="ok">\n          <keep-alive>\n            <component :is="view"></component>\n          </keep-alive>\n        </div>\n      ',
      data: {
        view: 'one',
        ok: true
      },
      components: components
    }).$mount();
    expect(vm.$el.textContent).toBe('one');
    assertHookCalls(one, [1, 1, 1, 0, 0]);
    assertHookCalls(two, [0, 0, 0, 0, 0]);
    vm.view = 'two';
    waitForUpdate(function () {
      expect(vm.$el.textContent).toBe('two');
      assertHookCalls(one, [1, 1, 1, 1, 0]);
      assertHookCalls(two, [1, 1, 1, 0, 0]);
      vm.view = 'one';
    }).then(function () {
      expect(vm.$el.textContent).toBe('one');
      assertHookCalls(one, [1, 1, 2, 1, 0]);
      assertHookCalls(two, [1, 1, 1, 1, 0]);
      vm.view = 'two';
    }).then(function () {
      expect(vm.$el.textContent).toBe('two');
      assertHookCalls(one, [1, 1, 2, 2, 0]);
      assertHookCalls(two, [1, 1, 2, 1, 0]);
      vm.ok = false; // teardown
    }).then(function () {
      expect(vm.$el.textContent).toBe('');
      assertHookCalls(one, [1, 1, 2, 2, 1]);
      assertHookCalls(two, [1, 1, 2, 2, 1]);
    }).then(done);
  });

  it('should invoke hooks on the entire sub tree', function (done) {
    one.template = '<two/>';
    one.components = { two: two };

    var vm = new _vue2.default({
      template: '\n        <div>\n          <keep-alive>\n            <one v-if="ok"/>\n          </keep-alive>\n        </div>\n      ',
      data: {
        ok: true
      },
      components: components
    }).$mount();

    expect(vm.$el.textContent).toBe('two');
    assertHookCalls(one, [1, 1, 1, 0, 0]);
    assertHookCalls(two, [1, 1, 1, 0, 0]);
    vm.ok = false;
    waitForUpdate(function () {
      expect(vm.$el.textContent).toBe('');
      assertHookCalls(one, [1, 1, 1, 1, 0]);
      assertHookCalls(two, [1, 1, 1, 1, 0]);
      vm.ok = true;
    }).then(function () {
      expect(vm.$el.textContent).toBe('two');
      assertHookCalls(one, [1, 1, 2, 1, 0]);
      assertHookCalls(two, [1, 1, 2, 1, 0]);
      vm.ok = false;
    }).then(function () {
      expect(vm.$el.textContent).toBe('');
      assertHookCalls(one, [1, 1, 2, 2, 0]);
      assertHookCalls(two, [1, 1, 2, 2, 0]);
    }).then(done);
  });

  it('should handle nested keep-alive hooks properly', function (done) {
    one.template = '<keep-alive><two v-if="ok" /></keep-alive>';
    one.data = function () {
      return { ok: true };
    };
    one.components = { two: two };

    var vm = new _vue2.default({
      template: '\n        <div>\n          <keep-alive>\n            <one v-if="ok" ref="one" />\n          </keep-alive>\n        </div>\n      ',
      data: {
        ok: true
      },
      components: components
    }).$mount();

    var oneInstance = vm.$refs.one;
    expect(vm.$el.textContent).toBe('two');
    assertHookCalls(one, [1, 1, 1, 0, 0]);
    assertHookCalls(two, [1, 1, 1, 0, 0]);
    vm.ok = false;
    waitForUpdate(function () {
      expect(vm.$el.textContent).toBe('');
      assertHookCalls(one, [1, 1, 1, 1, 0]);
      assertHookCalls(two, [1, 1, 1, 1, 0]);
    }).then(function () {
      vm.ok = true;
    }).then(function () {
      expect(vm.$el.textContent).toBe('two');
      assertHookCalls(one, [1, 1, 2, 1, 0]);
      assertHookCalls(two, [1, 1, 2, 1, 0]);
    }).then(function () {
      // toggle sub component when activated
      oneInstance.ok = false;
    }).then(function () {
      expect(vm.$el.textContent).toBe('');
      assertHookCalls(one, [1, 1, 2, 1, 0]);
      assertHookCalls(two, [1, 1, 2, 2, 0]);
    }).then(function () {
      oneInstance.ok = true;
    }).then(function () {
      expect(vm.$el.textContent).toBe('two');
      assertHookCalls(one, [1, 1, 2, 1, 0]);
      assertHookCalls(two, [1, 1, 3, 2, 0]);
    }).then(function () {
      vm.ok = false;
    }).then(function () {
      expect(vm.$el.textContent).toBe('');
      assertHookCalls(one, [1, 1, 2, 2, 0]);
      assertHookCalls(two, [1, 1, 3, 3, 0]);
    }).then(function () {
      // toggle sub component when parent is deactivated
      oneInstance.ok = false;
    }).then(function () {
      expect(vm.$el.textContent).toBe('');
      assertHookCalls(one, [1, 1, 2, 2, 0]);
      assertHookCalls(two, [1, 1, 3, 3, 0]); // should not be affected
    }).then(function () {
      oneInstance.ok = true;
    }).then(function () {
      expect(vm.$el.textContent).toBe('');
      assertHookCalls(one, [1, 1, 2, 2, 0]);
      assertHookCalls(two, [1, 1, 3, 3, 0]); // should not be affected
    }).then(function () {
      vm.ok = true;
    }).then(function () {
      expect(vm.$el.textContent).toBe('two');
      assertHookCalls(one, [1, 1, 3, 2, 0]);
      assertHookCalls(two, [1, 1, 4, 3, 0]);
    }).then(function () {
      oneInstance.ok = false;
      vm.ok = false;
    }).then(function () {
      expect(vm.$el.textContent).toBe('');
      assertHookCalls(one, [1, 1, 3, 3, 0]);
      assertHookCalls(two, [1, 1, 4, 4, 0]);
    }).then(function () {
      vm.ok = true;
    }).then(function () {
      expect(vm.$el.textContent).toBe('');
      assertHookCalls(one, [1, 1, 4, 3, 0]);
      assertHookCalls(two, [1, 1, 4, 4, 0]); // should remain inactive
    }).then(done);
  });

  function sharedAssertions(vm, done) {
    expect(vm.$el.textContent).toBe('one');
    assertHookCalls(one, [1, 1, 1, 0, 0]);
    assertHookCalls(two, [0, 0, 0, 0, 0]);
    vm.view = 'two';
    waitForUpdate(function () {
      expect(vm.$el.textContent).toBe('two');
      assertHookCalls(one, [1, 1, 1, 1, 0]);
      assertHookCalls(two, [1, 1, 0, 0, 0]);
      vm.view = 'one';
    }).then(function () {
      expect(vm.$el.textContent).toBe('one');
      assertHookCalls(one, [1, 1, 2, 1, 0]);
      assertHookCalls(two, [1, 1, 0, 0, 1]);
      vm.view = 'two';
    }).then(function () {
      expect(vm.$el.textContent).toBe('two');
      assertHookCalls(one, [1, 1, 2, 2, 0]);
      assertHookCalls(two, [2, 2, 0, 0, 1]);
      vm.ok = false; // teardown
    }).then(function () {
      expect(vm.$el.textContent).toBe('');
      assertHookCalls(one, [1, 1, 2, 2, 1]);
      assertHookCalls(two, [2, 2, 0, 0, 2]);
    }).then(done);
  }

  it('include (string)', function (done) {
    var vm = new _vue2.default({
      template: '\n        <div v-if="ok">\n          <keep-alive include="one">\n            <component :is="view"></component>\n          </keep-alive>\n        </div>\n      ',
      data: {
        view: 'one',
        ok: true
      },
      components: components
    }).$mount();
    sharedAssertions(vm, done);
  });

  it('include (regex)', function (done) {
    var vm = new _vue2.default({
      template: '\n        <div v-if="ok">\n          <keep-alive :include="/^one$/">\n            <component :is="view"></component>\n          </keep-alive>\n        </div>\n      ',
      data: {
        view: 'one',
        ok: true
      },
      components: components
    }).$mount();
    sharedAssertions(vm, done);
  });

  it('include (array)', function (done) {
    var vm = new _vue2.default({
      template: '\n        <div v-if="ok">\n          <keep-alive :include="[\'one\']">\n            <component :is="view"></component>\n          </keep-alive>\n        </div>\n      ',
      data: {
        view: 'one',
        ok: true
      },
      components: components
    }).$mount();
    sharedAssertions(vm, done);
  });

  it('exclude (string)', function (done) {
    var vm = new _vue2.default({
      template: '\n        <div v-if="ok">\n          <keep-alive exclude="two">\n            <component :is="view"></component>\n          </keep-alive>\n        </div>\n      ',
      data: {
        view: 'one',
        ok: true
      },
      components: components
    }).$mount();
    sharedAssertions(vm, done);
  });

  it('exclude (regex)', function (done) {
    var vm = new _vue2.default({
      template: '\n        <div v-if="ok">\n          <keep-alive :exclude="/^two$/">\n            <component :is="view"></component>\n          </keep-alive>\n        </div>\n      ',
      data: {
        view: 'one',
        ok: true
      },
      components: components
    }).$mount();
    sharedAssertions(vm, done);
  });

  it('exclude (array)', function (done) {
    var vm = new _vue2.default({
      template: '\n        <div v-if="ok">\n          <keep-alive :exclude="[\'two\']">\n            <component :is="view"></component>\n          </keep-alive>\n        </div>\n      ',
      data: {
        view: 'one',
        ok: true
      },
      components: components
    }).$mount();
    sharedAssertions(vm, done);
  });

  it('include + exclude', function (done) {
    var vm = new _vue2.default({
      template: '\n        <div v-if="ok">\n          <keep-alive include="one,two" exclude="two">\n            <component :is="view"></component>\n          </keep-alive>\n        </div>\n      ',
      data: {
        view: 'one',
        ok: true
      },
      components: components
    }).$mount();
    sharedAssertions(vm, done);
  });

  it('prune cache on include/exclude change', function (done) {
    var vm = new _vue2.default({
      template: '\n        <div>\n          <keep-alive :include="include">\n            <component :is="view"></component>\n          </keep-alive>\n        </div>\n      ',
      data: {
        view: 'one',
        include: 'one,two'
      },
      components: components
    }).$mount();

    vm.view = 'two';
    waitForUpdate(function () {
      assertHookCalls(one, [1, 1, 1, 1, 0]);
      assertHookCalls(two, [1, 1, 1, 0, 0]);
      vm.include = 'two';
    }).then(function () {
      assertHookCalls(one, [1, 1, 1, 1, 1]);
      assertHookCalls(two, [1, 1, 1, 0, 0]);
      vm.view = 'one';
    }).then(function () {
      assertHookCalls(one, [2, 2, 1, 1, 1]);
      assertHookCalls(two, [1, 1, 1, 1, 0]);
    }).then(done);
  });

  it('prune cache on include/exclude change + view switch', function (done) {
    var vm = new _vue2.default({
      template: '\n        <div>\n          <keep-alive :include="include">\n            <component :is="view"></component>\n          </keep-alive>\n        </div>\n      ',
      data: {
        view: 'one',
        include: 'one,two'
      },
      components: components
    }).$mount();

    vm.view = 'two';
    waitForUpdate(function () {
      assertHookCalls(one, [1, 1, 1, 1, 0]);
      assertHookCalls(two, [1, 1, 1, 0, 0]);
      vm.include = 'one';
      vm.view = 'one';
    }).then(function () {
      assertHookCalls(one, [1, 1, 2, 1, 0]);
      // two should be pruned
      assertHookCalls(two, [1, 1, 1, 1, 1]);
    }).then(done);
  });

  it('should not prune currently active instance', function (done) {
    var vm = new _vue2.default({
      template: '\n        <div>\n          <keep-alive :include="include">\n            <component :is="view"></component>\n          </keep-alive>\n        </div>\n      ',
      data: {
        view: 'one',
        include: 'one,two'
      },
      components: components
    }).$mount();

    vm.include = 'two';
    waitForUpdate(function () {
      assertHookCalls(one, [1, 1, 1, 0, 0]);
      assertHookCalls(two, [0, 0, 0, 0, 0]);
      vm.view = 'two';
    }).then(function () {
      assertHookCalls(one, [1, 1, 1, 0, 1]);
      assertHookCalls(two, [1, 1, 1, 0, 0]);
    }).then(done);
  });

  // #3882
  it('deeply nested keep-alive should be destroyed properly', function (done) {
    one.template = '<div><keep-alive><two></two></keep-alive></div>';
    one.components = { two: two };
    var vm = new _vue2.default({
      template: '<div><parent v-if="ok"></parent></div>',
      data: { ok: true },
      components: {
        parent: {
          template: '<div><keep-alive><one></one></keep-alive></div>',
          components: { one: one }
        }
      }
    }).$mount();

    assertHookCalls(one, [1, 1, 1, 0, 0]);
    assertHookCalls(two, [1, 1, 1, 0, 0]);

    vm.ok = false;
    waitForUpdate(function () {
      assertHookCalls(one, [1, 1, 1, 1, 1]);
      assertHookCalls(two, [1, 1, 1, 1, 1]);
    }).then(done);
  });

  // #4237
  it('should update latest props/listeners for a re-activated component', function (done) {
    var one = {
      props: ['prop'],
      template: '<div>one {{ prop }}</div>'
    };
    var two = {
      props: ['prop'],
      template: '<div>two {{ prop }}</div>'
    };
    var vm = new _vue2.default({
      data: { view: 'one', n: 1 },
      template: '\n        <div>\n          <keep-alive>\n            <component :is="view" :prop="n"></component>\n          </keep-alive>\n        </div>\n      ',
      components: { one: one, two: two }
    }).$mount();

    expect(vm.$el.textContent).toBe('one 1');
    vm.n++;
    waitForUpdate(function () {
      expect(vm.$el.textContent).toBe('one 2');
      vm.view = 'two';
    }).then(function () {
      expect(vm.$el.textContent).toBe('two 2');
    }).then(done);
  });

  it('max', function (done) {
    var spyA = jasmine.createSpy();
    var spyB = jasmine.createSpy();
    var spyC = jasmine.createSpy();
    var spyAD = jasmine.createSpy();
    var spyBD = jasmine.createSpy();
    var spyCD = jasmine.createSpy();

    function assertCount(calls) {
      expect([spyA.calls.count(), spyAD.calls.count(), spyB.calls.count(), spyBD.calls.count(), spyC.calls.count(), spyCD.calls.count()]).toEqual(calls);
    }

    var vm = new _vue2.default({
      template: '\n        <keep-alive max="2">\n          <component :is="n"></component>\n        </keep-alive>\n      ',
      data: {
        n: 'aa'
      },
      components: {
        aa: {
          template: '<div>a</div>',
          created: spyA,
          destroyed: spyAD
        },
        bb: {
          template: '<div>bbb</div>',
          created: spyB,
          destroyed: spyBD
        },
        cc: {
          template: '<div>ccc</div>',
          created: spyC,
          destroyed: spyCD
        }
      }
    }).$mount();

    assertCount([1, 0, 0, 0, 0, 0]);
    vm.n = 'bb';
    waitForUpdate(function () {
      assertCount([1, 0, 1, 0, 0, 0]);
      vm.n = 'cc';
    }).then(function () {
      // should prune A because max cache reached
      assertCount([1, 1, 1, 0, 1, 0]);
      vm.n = 'bb';
    }).then(function () {
      // B should be reused, and made latest
      assertCount([1, 1, 1, 0, 1, 0]);
      vm.n = 'aa';
    }).then(function () {
      // C should be pruned because B was used last so C is the oldest cached
      assertCount([2, 1, 1, 0, 1, 1]);
    }).then(done);
  });

  it('should warn unknown component inside', function () {
    new _vue2.default({
      template: '<keep-alive><foo/></keep-alive>'
    }).$mount();
    expect('Unknown custom element: <foo>').toHaveBeenWarned();
  });

  // #6938
  it('should not cache anonymous component when include is specified', function (done) {
    var Foo = {
      name: 'foo',
      template: '<div>foo</div>',
      created: jasmine.createSpy('foo')
    };

    var Bar = {
      template: '<div>bar</div>',
      created: jasmine.createSpy('bar')
    };

    var Child = {
      functional: true,
      render: function render(h, ctx) {
        return h(ctx.props.view ? Foo : Bar);
      }
    };

    var vm = new _vue2.default({
      template: '\n        <keep-alive include="foo">\n          <child :view="view"></child>\n        </keep-alive>\n      ',
      data: {
        view: true
      },
      components: { Child: Child }
    }).$mount();

    function assert(foo, bar) {
      expect(Foo.created.calls.count()).toBe(foo);
      expect(Bar.created.calls.count()).toBe(bar);
    }

    expect(vm.$el.textContent).toBe('foo');
    assert(1, 0);
    vm.view = false;
    waitForUpdate(function () {
      expect(vm.$el.textContent).toBe('bar');
      assert(1, 1);
      vm.view = true;
    }).then(function () {
      expect(vm.$el.textContent).toBe('foo');
      assert(1, 1);
      vm.view = false;
    }).then(function () {
      expect(vm.$el.textContent).toBe('bar');
      assert(1, 2);
    }).then(done);
  });

  it('should cache anonymous components if include is not specified', function (done) {
    var Foo = {
      template: '<div>foo</div>',
      created: jasmine.createSpy('foo')
    };

    var Bar = {
      template: '<div>bar</div>',
      created: jasmine.createSpy('bar')
    };

    var Child = {
      functional: true,
      render: function render(h, ctx) {
        return h(ctx.props.view ? Foo : Bar);
      }
    };

    var vm = new _vue2.default({
      template: '\n        <keep-alive>\n          <child :view="view"></child>\n        </keep-alive>\n      ',
      data: {
        view: true
      },
      components: { Child: Child }
    }).$mount();

    function assert(foo, bar) {
      expect(Foo.created.calls.count()).toBe(foo);
      expect(Bar.created.calls.count()).toBe(bar);
    }

    expect(vm.$el.textContent).toBe('foo');
    assert(1, 0);
    vm.view = false;
    waitForUpdate(function () {
      expect(vm.$el.textContent).toBe('bar');
      assert(1, 1);
      vm.view = true;
    }).then(function () {
      expect(vm.$el.textContent).toBe('foo');
      assert(1, 1);
      vm.view = false;
    }).then(function () {
      expect(vm.$el.textContent).toBe('bar');
      assert(1, 1);
    }).then(done);
  });

  // #7105
  it('should not destroy active instance when pruning cache', function (done) {
    var Foo = {
      template: '<div>foo</div>',
      destroyed: jasmine.createSpy('destroyed')
    };
    var vm = new _vue2.default({
      template: '\n        <div>\n          <keep-alive :include="include">\n            <foo/>\n          </keep-alive>\n        </div>\n      ',
      data: {
        include: ['foo']
      },
      components: { Foo: Foo }
    }).$mount();
    // condition: a render where a previous component is reused
    vm.include = ['foo'];
    waitForUpdate(function () {
      vm.include = [''];
    }).then(function () {
      expect(Foo.destroyed).not.toHaveBeenCalled();
    }).then(done);
  });

  if (!_env.isIE9) {
    it('with transition-mode out-in', function (done) {
      var next = void 0;
      var vm = new _vue2.default({
        template: '<div>\n          <transition name="test" mode="out-in" @after-leave="afterLeave">\n            <keep-alive>\n              <component :is="view" class="test"></component>\n            </keep-alive>\n          </transition>\n        </div>',
        data: {
          view: 'one'
        },
        components: components,
        methods: {
          afterLeave: function afterLeave() {
            next();
          }
        }
      }).$mount(el);
      expect(vm.$el.textContent).toBe('one');
      assertHookCalls(one, [1, 1, 1, 0, 0]);
      assertHookCalls(two, [0, 0, 0, 0, 0]);
      vm.view = 'two';
      waitForUpdate(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test test-leave test-leave-active">one</div><!---->');
        assertHookCalls(one, [1, 1, 1, 1, 0]);
        assertHookCalls(two, [0, 0, 0, 0, 0]);
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test test-leave-active test-leave-to">one</div><!---->');
      }).thenWaitFor(function (_next) {
        next = _next;
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('<!---->');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test test-enter test-enter-active">two</div>');
        assertHookCalls(one, [1, 1, 1, 1, 0]);
        assertHookCalls(two, [1, 1, 1, 0, 0]);
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test test-enter-active test-enter-to">two</div>');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test">two</div>');
        assertHookCalls(one, [1, 1, 1, 1, 0]);
        assertHookCalls(two, [1, 1, 1, 0, 0]);
      }).then(function () {
        vm.view = 'one';
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test test-leave test-leave-active">two</div><!---->');
        assertHookCalls(one, [1, 1, 1, 1, 0]);
        assertHookCalls(two, [1, 1, 1, 1, 0]);
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test test-leave-active test-leave-to">two</div><!---->');
      }).thenWaitFor(function (_next) {
        next = _next;
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('<!---->');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test test-enter test-enter-active">one</div>');
        assertHookCalls(one, [1, 1, 2, 1, 0]);
        assertHookCalls(two, [1, 1, 1, 1, 0]);
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test test-enter-active test-enter-to">one</div>');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test">one</div>');
        assertHookCalls(one, [1, 1, 2, 1, 0]);
        assertHookCalls(two, [1, 1, 1, 1, 0]);
      }).then(done);
    });

    it('with transition-mode out-in + include', function (done) {
      var next = void 0;
      var vm = new _vue2.default({
        template: '<div>\n          <transition name="test" mode="out-in" @after-leave="afterLeave">\n            <keep-alive include="one">\n              <component :is="view" class="test"></component>\n            </keep-alive>\n          </transition>\n        </div>',
        data: {
          view: 'one'
        },
        components: components,
        methods: {
          afterLeave: function afterLeave() {
            next();
          }
        }
      }).$mount(el);
      expect(vm.$el.textContent).toBe('one');
      assertHookCalls(one, [1, 1, 1, 0, 0]);
      assertHookCalls(two, [0, 0, 0, 0, 0]);
      vm.view = 'two';
      waitForUpdate(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test test-leave test-leave-active">one</div><!---->');
        assertHookCalls(one, [1, 1, 1, 1, 0]);
        assertHookCalls(two, [0, 0, 0, 0, 0]);
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test test-leave-active test-leave-to">one</div><!---->');
      }).thenWaitFor(function (_next) {
        next = _next;
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('<!---->');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test test-enter test-enter-active">two</div>');
        assertHookCalls(one, [1, 1, 1, 1, 0]);
        assertHookCalls(two, [1, 1, 0, 0, 0]);
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test test-enter-active test-enter-to">two</div>');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test">two</div>');
        assertHookCalls(one, [1, 1, 1, 1, 0]);
        assertHookCalls(two, [1, 1, 0, 0, 0]);
      }).then(function () {
        vm.view = 'one';
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test test-leave test-leave-active">two</div><!---->');
        assertHookCalls(one, [1, 1, 1, 1, 0]);
        assertHookCalls(two, [1, 1, 0, 0, 1]);
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test test-leave-active test-leave-to">two</div><!---->');
      }).thenWaitFor(function (_next) {
        next = _next;
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('<!---->');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test test-enter test-enter-active">one</div>');
        assertHookCalls(one, [1, 1, 2, 1, 0]);
        assertHookCalls(two, [1, 1, 0, 0, 1]);
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test test-enter-active test-enter-to">one</div>');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test">one</div>');
        assertHookCalls(one, [1, 1, 2, 1, 0]);
        assertHookCalls(two, [1, 1, 0, 0, 1]);
      }).then(done);
    });

    it('with transition-mode in-out', function (done) {
      var next = void 0;
      var vm = new _vue2.default({
        template: '<div>\n          <transition name="test" mode="in-out" @after-enter="afterEnter">\n            <keep-alive>\n              <component :is="view" class="test"></component>\n            </keep-alive>\n          </transition>\n        </div>',
        data: {
          view: 'one'
        },
        components: components,
        methods: {
          afterEnter: function afterEnter() {
            next();
          }
        }
      }).$mount(el);
      expect(vm.$el.textContent).toBe('one');
      assertHookCalls(one, [1, 1, 1, 0, 0]);
      assertHookCalls(two, [0, 0, 0, 0, 0]);
      vm.view = 'two';
      waitForUpdate(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test">one</div>' + '<div class="test test-enter test-enter-active">two</div>');
        assertHookCalls(one, [1, 1, 1, 1, 0]);
        assertHookCalls(two, [1, 1, 1, 0, 0]);
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test">one</div>' + '<div class="test test-enter-active test-enter-to">two</div>');
      }).thenWaitFor(function (_next) {
        next = _next;
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test">one</div>' + '<div class="test">two</div>');
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test test-leave test-leave-active">one</div>' + '<div class="test">two</div>');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test test-leave-active test-leave-to">one</div>' + '<div class="test">two</div>');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test">two</div>');
        assertHookCalls(one, [1, 1, 1, 1, 0]);
        assertHookCalls(two, [1, 1, 1, 0, 0]);
      }).then(function () {
        vm.view = 'one';
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test">two</div>' + '<div class="test test-enter test-enter-active">one</div>');
        assertHookCalls(one, [1, 1, 2, 1, 0]);
        assertHookCalls(two, [1, 1, 1, 1, 0]);
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test">two</div>' + '<div class="test test-enter-active test-enter-to">one</div>');
      }).thenWaitFor(function (_next) {
        next = _next;
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test">two</div>' + '<div class="test">one</div>');
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test test-leave test-leave-active">two</div>' + '<div class="test">one</div>');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test test-leave-active test-leave-to">two</div>' + '<div class="test">one</div>');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test">one</div>');
        assertHookCalls(one, [1, 1, 2, 1, 0]);
        assertHookCalls(two, [1, 1, 1, 1, 0]);
      }).then(done);
    });

    it('dynamic components, in-out with early cancel', function (done) {
      var next = void 0;
      var vm = new _vue2.default({
        template: '<div>\n          <transition name="test" mode="in-out" @after-enter="afterEnter">\n            <keep-alive>\n              <component :is="view" class="test"></component>\n            </keep-alive>\n          </transition>\n        </div>',
        data: { view: 'one' },
        components: components,
        methods: {
          afterEnter: function afterEnter() {
            next();
          }
        }
      }).$mount(el);
      expect(vm.$el.textContent).toBe('one');
      vm.view = 'two';
      waitForUpdate(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test">one</div>' + '<div class="test test-enter test-enter-active">two</div>');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test">one</div>' + '<div class="test test-enter-active test-enter-to">two</div>');
        // switch again before enter finishes,
        // this cancels both enter and leave.
        vm.view = 'one';
      }).then(function () {
        // 1. the pending leaving "one" should be removed instantly.
        // 2. the entering "two" should be placed into its final state instantly.
        // 3. a new "one" is created and entering
        expect(vm.$el.innerHTML).toBe('<div class="test">two</div>' + '<div class="test test-enter test-enter-active">one</div>');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test">two</div>' + '<div class="test test-enter-active test-enter-to">one</div>');
      }).thenWaitFor(function (_next) {
        next = _next;
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test">two</div>' + '<div class="test">one</div>');
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test test-leave test-leave-active">two</div>' + '<div class="test">one</div>');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test test-leave-active test-leave-to">two</div>' + '<div class="test">one</div>');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test">one</div>');
      }).then(done).then(done);
    });

    // #4339
    it('component with inner transition', function (done) {
      var vm = new _vue2.default({
        template: '\n          <div>\n            <keep-alive>\n              <component ref="test" :is="view"></component>\n            </keep-alive>\n          </div>\n        ',
        data: { view: 'foo' },
        components: {
          foo: { template: '<transition><div class="test">foo</div></transition>' },
          bar: { template: '<transition name="test"><div class="test">bar</div></transition>' }
        }
      }).$mount(el);

      // should not apply transition on initial render by default
      expect(vm.$el.innerHTML).toBe('<div class="test">foo</div>');
      vm.view = 'bar';
      waitForUpdate(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test v-leave v-leave-active">foo</div>' + '<div class="test test-enter test-enter-active">bar</div>');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test v-leave-active v-leave-to">foo</div>' + '<div class="test test-enter-active test-enter-to">bar</div>');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test">bar</div>');
        vm.view = 'foo';
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test test-leave test-leave-active">bar</div>' + '<div class="test v-enter v-enter-active">foo</div>');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test test-leave-active test-leave-to">bar</div>' + '<div class="test v-enter-active v-enter-to">foo</div>');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test">foo</div>');
      }).then(done);
    });

    it('async components with transition-mode out-in', function (done) {
      var barResolve = jasmine.createSpy('bar resolved');
      var _next2 = void 0;
      var foo = function foo(resolve) {
        setTimeout(function () {
          resolve(one);
          _vue2.default.nextTick(_next2);
        }, duration / 2);
      };
      var bar = function bar(resolve) {
        setTimeout(function () {
          resolve(two);
          barResolve();
        }, duration / 2);
      };
      components = {
        foo: foo,
        bar: bar
      };
      var vm = new _vue2.default({
        template: '<div>\n          <transition name="test" mode="out-in" @after-enter="afterEnter" @after-leave="afterLeave">\n            <keep-alive>\n              <component :is="view" class="test"></component>\n            </keep-alive>\n          </transition>\n        </div>',
        data: {
          view: 'foo'
        },
        components: components,
        methods: {
          afterEnter: function afterEnter() {
            _next2();
          },
          afterLeave: function afterLeave() {
            _next2();
          }
        }
      }).$mount(el);
      expect(vm.$el.textContent).toBe('');
      _next2 = function next() {
        assertHookCalls(one, [1, 1, 1, 0, 0]);
        assertHookCalls(two, [0, 0, 0, 0, 0]);
        waitForUpdate(function () {
          expect(vm.$el.innerHTML).toBe('<div class="test test-enter test-enter-active">one</div>');
        }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
          expect(vm.$el.innerHTML).toBe('<div class="test test-enter-active test-enter-to">one</div>');
        }).thenWaitFor(function (_next) {
          _next2 = _next;
        }).then(function () {
          // foo afterEnter get called
          expect(vm.$el.innerHTML).toBe('<div class="test">one</div>');
          vm.view = 'bar';
        }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
          assertHookCalls(one, [1, 1, 1, 1, 0]);
          assertHookCalls(two, [0, 0, 0, 0, 0]);
          expect(vm.$el.innerHTML).toBe('<div class="test test-leave-active test-leave-to">one</div><!---->');
        }).thenWaitFor(function (_next) {
          _next2 = _next;
        }).then(function () {
          // foo afterLeave get called
          // and bar has already been resolved before afterLeave get called
          expect(barResolve.calls.count()).toBe(1);
          expect(vm.$el.innerHTML).toBe('<!---->');
        }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
          expect(vm.$el.innerHTML).toBe('<div class="test test-enter test-enter-active">two</div>');
          assertHookCalls(one, [1, 1, 1, 1, 0]);
          assertHookCalls(two, [1, 1, 1, 0, 0]);
        }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
          expect(vm.$el.innerHTML).toBe('<div class="test test-enter-active test-enter-to">two</div>');
        }).thenWaitFor(function (_next) {
          _next2 = _next;
        }).then(function () {
          // bar afterEnter get called
          expect(vm.$el.innerHTML).toBe('<div class="test">two</div>');
        }).then(done);
      };
    });
  }
});

