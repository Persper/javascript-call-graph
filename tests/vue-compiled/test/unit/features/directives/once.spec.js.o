'use strict';

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Directive v-once', function () {
  it('should not rerender component', function (done) {
    var vm = new _vue2.default({
      template: '<div v-once>{{ a }}</div>',
      data: { a: 'hello' }
    }).$mount();
    expect(vm.$el.innerHTML).toBe('hello');
    vm.a = 'world';
    waitForUpdate(function () {
      expect(vm.$el.innerHTML).toBe('hello');
    }).then(done);
  });

  it('should not rerender self and child component', function (done) {
    var vm = new _vue2.default({
      template: '\n        <div v-once>\n          <span>{{ a }}</span>\n          <item :b="a"></item>\n        </div>',
      data: { a: 'hello' },
      components: {
        item: {
          template: '<div>{{ b }}</div>',
          props: ['b']
        }
      }
    }).$mount();
    expect(vm.$children.length).toBe(1);
    expect(vm.$el.innerHTML).toBe('<span>hello</span> <div>hello</div>');
    vm.a = 'world';
    waitForUpdate(function () {
      expect(vm.$el.innerHTML).toBe('<span>hello</span> <div>hello</div>');
    }).then(done);
  });

  it('should rerender parent but not self', function (done) {
    var vm = new _vue2.default({
      template: '\n        <div>\n          <span>{{ a }}</span>\n          <item v-once :b="a"></item>\n        </div>',
      data: { a: 'hello' },
      components: {
        item: {
          template: '<div>{{ b }}</div>',
          props: ['b']
        }
      }
    }).$mount();
    expect(vm.$children.length).toBe(1);
    expect(vm.$el.innerHTML).toBe('<span>hello</span> <div>hello</div>');
    vm.a = 'world';
    waitForUpdate(function () {
      expect(vm.$el.innerHTML).toBe('<span>world</span> <div>hello</div>');
    }).then(done);
  });

  it('should not rerender static sub nodes', function (done) {
    var vm = new _vue2.default({
      template: '\n        <div>\n          <span v-once>{{ a }}</span>\n          <item :b="a"></item>\n          <span>{{ suffix }}</span>\n        </div>',
      data: {
        a: 'hello',
        suffix: '?'
      },
      components: {
        item: {
          template: '<div>{{ b }}</div>',
          props: ['b']
        }
      }
    }).$mount();
    expect(vm.$el.innerHTML).toBe('<span>hello</span> <div>hello</div> <span>?</span>');
    vm.a = 'world';
    waitForUpdate(function () {
      expect(vm.$el.innerHTML).toBe('<span>hello</span> <div>world</div> <span>?</span>');
      vm.suffix = '!';
    }).then(function () {
      expect(vm.$el.innerHTML).toBe('<span>hello</span> <div>world</div> <span>!</span>');
    }).then(done);
  });

  it('should work with v-if', function (done) {
    var vm = new _vue2.default({
      data: {
        tester: true,
        yes: 'y',
        no: 'n'
      },
      template: '\n        <div>\n          <div v-if="tester">{{ yes }}</div>\n          <div v-else>{{ no }}</div>\n          <div v-if="tester" v-once>{{ yes }}</div>\n          <div v-else>{{ no }}</div>\n          <div v-if="tester">{{ yes }}</div>\n          <div v-else v-once>{{ no }}</div>\n          <div v-if="tester" v-once>{{ yes }}</div>\n          <div v-else v-once>{{ no }}</div>\n        </div>\n      '
    }).$mount();
    expectTextContent(vm, 'yyyy');
    vm.yes = 'yes';
    waitForUpdate(function () {
      expectTextContent(vm, 'yesyyesy');
      vm.tester = false;
    }).then(function () {
      expectTextContent(vm, 'nnnn');
      vm.no = 'no';
    }).then(function () {
      expectTextContent(vm, 'nononn');
    }).then(done);
  });

  it('should work with v-for', function (done) {
    var vm = new _vue2.default({
      data: {
        list: [1, 2, 3]
      },
      template: '<div><div v-for="i in list" v-once>{{i}}</div></div>'
    }).$mount();
    expect(vm.$el.textContent).toBe('123');
    vm.list.reverse();
    waitForUpdate(function () {
      expect(vm.$el.textContent).toBe('123');
    }).then(done);
  });

  it('should work inside v-for', function (done) {
    var vm = new _vue2.default({
      data: {
        list: [{ id: 0, text: 'a' }, { id: 1, text: 'b' }, { id: 2, text: 'c' }]
      },
      template: '\n        <div>\n          <div v-for="i in list" :key="i.id">\n            <div>\n              <span v-once>{{ i.text }}</span><span>{{ i.text }}</span>\n            </div>\n          </div>\n        </div>\n      '
    }).$mount();

    expect(vm.$el.textContent).toBe('aabbcc');

    vm.list[0].text = 'd';
    waitForUpdate(function () {
      expect(vm.$el.textContent).toBe('adbbcc');
      vm.list[1].text = 'e';
    }).then(function () {
      expect(vm.$el.textContent).toBe('adbecc');
      vm.list.reverse();
    }).then(function () {
      expect(vm.$el.textContent).toBe('ccbead');
    }).then(done);
  });

  it('should work inside v-for with v-if', function (done) {
    var vm = new _vue2.default({
      data: {
        list: [{ id: 0, text: 'a', tester: true, truthy: 'y' }]
      },
      template: '\n        <div>\n          <div v-for="i in list" :key="i.id">\n              <span v-if="i.tester" v-once>{{ i.truthy }}</span>\n              <span v-else v-once>{{ i.text }}</span>\n              <span v-if="i.tester" v-once>{{ i.truthy }}</span>\n              <span v-else>{{ i.text }}</span>\n              <span v-if="i.tester">{{ i.truthy }}</span>\n              <span v-else v-once>{{ i.text }}</span>\n              <span v-if="i.tester">{{ i.truthy }}</span>\n              <span v-else>{{ i.text }}</span>\n          </div>\n        </div>\n      '
    }).$mount();

    expectTextContent(vm, 'yyyy');

    vm.list[0].truthy = 'yy';
    waitForUpdate(function () {
      expectTextContent(vm, 'yyyyyy');
      vm.list[0].tester = false;
    }).then(function () {
      expectTextContent(vm, 'aaaa');
      vm.list[0].text = 'nn';
    }).then(function () {
      expectTextContent(vm, 'annann');
    }).then(done);
  });

  it('should work inside v-for with nested v-else', function (done) {
    var vm = new _vue2.default({
      data: {
        list: [{ id: 0, text: 'a', tester: true, truthy: 'y' }]
      },
      template: '\n        <div v-if="0"></div>\n        <div v-else>\n          <div v-for="i in list" :key="i.id">\n            <span v-if="i.tester" v-once>{{ i.truthy }}</span>\n            <span v-else v-once>{{ i.text }}</span>\n          </div>\n        </div>\n      '
    }).$mount();

    expectTextContent(vm, 'y');
    vm.list[0].truthy = 'yy';
    waitForUpdate(function () {
      expectTextContent(vm, 'y');
      vm.list[0].tester = false;
    }).then(function () {
      expectTextContent(vm, 'a');
      vm.list[0].text = 'nn';
    }).then(function () {
      expectTextContent(vm, 'a');
    }).then(done);
  });

  it('should work inside v-for with nested v-else-if and v-else', function (done) {
    var vm = new _vue2.default({
      data: {
        tester: false,
        list: [{ id: 0, text: 'a', tester: true, truthy: 'y' }]
      },
      template: '\n        <div v-if="0"></div>\n        <div v-else-if="tester">\n          <div v-for="i in list" :key="i.id">\n            <span v-if="i.tester" v-once>{{ i.truthy }}</span>\n            <span v-else-if="tester" v-once>{{ i.text }}elseif</span>\n            <span v-else v-once>{{ i.text }}</span>\n          </div>\n        </div>\n        <div v-else>\n          <div v-for="i in list" :key="i.id">\n            <span v-if="i.tester" v-once>{{ i.truthy }}</span>\n            <span v-else-if="tester">{{ i.text }}elseif</span>\n            <span v-else v-once>{{ i.text }}</span>\n          </div>\n        </div>\n      '
    }).$mount();

    expectTextContent(vm, 'y');
    vm.list[0].truthy = 'yy';
    waitForUpdate(function () {
      expectTextContent(vm, 'y');
      vm.list[0].tester = false;
    }).then(function () {
      expectTextContent(vm, 'a');
      vm.list[0].text = 'nn';
    }).then(function () {
      expectTextContent(vm, 'a');
      vm.tester = true;
    }).then(function () {
      expectTextContent(vm, 'nnelseif');
      vm.list[0].text = 'xx';
    }).then(function () {
      expectTextContent(vm, 'nnelseif');
      vm.list[0].tester = true;
    }).then(function () {
      expectTextContent(vm, 'yy');
      vm.list[0].truthy = 'nn';
    }).then(function () {
      expectTextContent(vm, 'yy');
    }).then(done);
  });

  it('should warn inside non-keyed v-for', function () {
    var vm = new _vue2.default({
      data: {
        list: [{ id: 0, text: 'a' }, { id: 1, text: 'b' }, { id: 2, text: 'c' }]
      },
      template: '\n        <div>\n          <div v-for="i in list">\n            <span v-once>{{ i.text }}</span><span>{{ i.text }}</span>\n          </div>\n        </div>\n      '
    }).$mount();

    expect(vm.$el.textContent).toBe('aabbcc');
    expect('v-once can only be used inside v-for that is keyed.').toHaveBeenWarned();
  });

  // #4288
  it('should inherit child reference for v-once', function (done) {
    var vm = new _vue2.default({
      template: '<div>{{a}}<test v-if="ok" v-once></test></div>',
      data: {
        a: 0,
        ok: true
      },
      components: {
        test: {
          template: '<div>foo</div>'
        }
      }
    }).$mount();
    vm.a++; // first update to force a patch
    waitForUpdate(function () {
      expect(vm.$el.textContent).toBe('1foo');
    }).then(function () {
      vm.ok = false; // teardown component with v-once
    }).then(done); // should not throw
  });

  // #6826
  it('should render different component instances properly', function (done) {
    var vm = new _vue2.default({
      components: {
        foo: {
          props: ['name'],
          template: '<div v-once>{{ name }}</div>'
        }
      },
      template: '\n        <div>\n          <foo name="a" v-once></foo>\n          <foo name="b" v-once></foo>\n        </div>\n      '
    }).$mount();
    waitForUpdate(function () {
      expect(vm.$el.children[0].innerHTML).toBe('a');
      expect(vm.$el.children[1].innerHTML).toBe('b');
    }).then(done);
  });
});

function expectTextContent(vm, text) {
  expect(vm.$el.textContent.replace(/\s+/g, '')).toBe(text);
}

