'use strict';

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Directive v-if', function () {
  it('should check if value is truthy', function () {
    var vm = new _vue2.default({
      template: '<div><span v-if="foo">hello</span></div>',
      data: { foo: true }
    }).$mount();
    expect(vm.$el.innerHTML).toBe('<span>hello</span>');
  });

  it('should check if value is falsy', function () {
    var vm = new _vue2.default({
      template: '<div><span v-if="foo">hello</span></div>',
      data: { foo: false }
    }).$mount();
    expect(vm.$el.innerHTML).toBe('<!---->');
  });

  it('should update if value changed', function (done) {
    var vm = new _vue2.default({
      template: '<div><span v-if="foo">hello</span></div>',
      data: { foo: true }
    }).$mount();
    expect(vm.$el.innerHTML).toBe('<span>hello</span>');
    vm.foo = false;
    waitForUpdate(function () {
      expect(vm.$el.innerHTML).toBe('<!---->');
      vm.foo = {};
    }).then(function () {
      expect(vm.$el.innerHTML).toBe('<span>hello</span>');
      vm.foo = 0;
    }).then(function () {
      expect(vm.$el.innerHTML).toBe('<!---->');
      vm.foo = [];
    }).then(function () {
      expect(vm.$el.innerHTML).toBe('<span>hello</span>');
      vm.foo = null;
    }).then(function () {
      expect(vm.$el.innerHTML).toBe('<!---->');
      vm.foo = '0';
    }).then(function () {
      expect(vm.$el.innerHTML).toBe('<span>hello</span>');
      vm.foo = undefined;
    }).then(function () {
      expect(vm.$el.innerHTML).toBe('<!---->');
      vm.foo = 1;
    }).then(function () {
      expect(vm.$el.innerHTML).toBe('<span>hello</span>');
    }).then(done);
  });

  it('should work well with v-else', function (done) {
    var vm = new _vue2.default({
      template: '\n        <div>\n          <span v-if="foo">hello</span>\n          <span v-else>bye</span>\n        </div>\n      ',
      data: { foo: true }
    }).$mount();
    expect(vm.$el.innerHTML.trim()).toBe('<span>hello</span>');
    vm.foo = false;
    waitForUpdate(function () {
      expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span>');
      vm.foo = {};
    }).then(function () {
      expect(vm.$el.innerHTML.trim()).toBe('<span>hello</span>');
      vm.foo = 0;
    }).then(function () {
      expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span>');
      vm.foo = [];
    }).then(function () {
      expect(vm.$el.innerHTML.trim()).toBe('<span>hello</span>');
      vm.foo = null;
    }).then(function () {
      expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span>');
      vm.foo = '0';
    }).then(function () {
      expect(vm.$el.innerHTML.trim()).toBe('<span>hello</span>');
      vm.foo = undefined;
    }).then(function () {
      expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span>');
      vm.foo = 1;
    }).then(function () {
      expect(vm.$el.innerHTML.trim()).toBe('<span>hello</span>');
    }).then(done);
  });

  it('should work well with v-else-if', function (done) {
    var vm = new _vue2.default({
      template: '\n        <div>\n          <span v-if="foo">hello</span>\n          <span v-else-if="bar">elseif</span>\n          <span v-else>bye</span>\n        </div>\n      ',
      data: { foo: true, bar: false }
    }).$mount();
    expect(vm.$el.innerHTML.trim()).toBe('<span>hello</span>');
    vm.foo = false;
    waitForUpdate(function () {
      expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span>');
      vm.bar = true;
    }).then(function () {
      expect(vm.$el.innerHTML.trim()).toBe('<span>elseif</span>');
      vm.bar = false;
    }).then(function () {
      expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span>');
      vm.foo = true;
    }).then(function () {
      expect(vm.$el.innerHTML.trim()).toBe('<span>hello</span>');
      vm.foo = false;
      vm.bar = {};
    }).then(function () {
      expect(vm.$el.innerHTML.trim()).toBe('<span>elseif</span>');
      vm.bar = 0;
    }).then(function () {
      expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span>');
      vm.bar = [];
    }).then(function () {
      expect(vm.$el.innerHTML.trim()).toBe('<span>elseif</span>');
      vm.bar = null;
    }).then(function () {
      expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span>');
      vm.bar = '0';
    }).then(function () {
      expect(vm.$el.innerHTML.trim()).toBe('<span>elseif</span>');
      vm.bar = undefined;
    }).then(function () {
      expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span>');
      vm.bar = 1;
    }).then(function () {
      expect(vm.$el.innerHTML.trim()).toBe('<span>elseif</span>');
    }).then(done);
  });

  it('should work well with v-for', function (done) {
    var vm = new _vue2.default({
      template: '\n        <div>\n          <span v-for="(item, i) in list" v-if="item.value">{{i}}</span>\n        </div>\n      ',
      data: {
        list: [{ value: true }, { value: false }, { value: true }]
      }
    }).$mount();
    expect(vm.$el.innerHTML).toBe('<span>0</span><!----><span>2</span>');
    vm.list[0].value = false;
    waitForUpdate(function () {
      expect(vm.$el.innerHTML).toBe('<!----><!----><span>2</span>');
      vm.list.push({ value: true });
    }).then(function () {
      expect(vm.$el.innerHTML).toBe('<!----><!----><span>2</span><span>3</span>');
      vm.list.splice(1, 2);
    }).then(function () {
      expect(vm.$el.innerHTML).toBe('<!----><span>1</span>');
    }).then(done);
  });

  it('should work well with v-for and v-else', function (done) {
    var vm = new _vue2.default({
      template: '\n        <div>\n          <span v-for="(item, i) in list" v-if="item.value">hello</span>\n          <span v-else>bye</span>\n        </div>\n      ',
      data: {
        list: [{ value: true }, { value: false }, { value: true }]
      }
    }).$mount();
    expect(vm.$el.innerHTML.trim()).toBe('<span>hello</span><span>bye</span><span>hello</span>');
    vm.list[0].value = false;
    waitForUpdate(function () {
      expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span><span>bye</span><span>hello</span>');
      vm.list.push({ value: true });
    }).then(function () {
      expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span><span>bye</span><span>hello</span><span>hello</span>');
      vm.list.splice(1, 2);
    }).then(function () {
      expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span><span>hello</span>');
    }).then(done);
  });

  it('should work with v-for on v-else branch', function (done) {
    var vm = new _vue2.default({
      template: '\n        <div>\n          <span v-if="false">hello</span>\n          <span v-else v-for="item in list">{{ item }}</span>\n        </div>\n      ',
      data: {
        list: [1, 2, 3]
      }
    }).$mount();
    expect(vm.$el.textContent.trim()).toBe('123');
    vm.list.reverse();
    waitForUpdate(function () {
      expect(vm.$el.textContent.trim()).toBe('321');
    }).then(done);
  });

  it('should work properly on component root', function (done) {
    var vm = new _vue2.default({
      template: '\n        <div>\n          <test class="test"></test>\n        </div>\n      ',
      components: {
        test: {
          data: function data() {
            return { ok: true };
          },

          template: '<div v-if="ok" id="ok" class="inner">test</div>'
        }
      }
    }).$mount();
    expect(vm.$el.children[0].id).toBe('ok');
    expect(vm.$el.children[0].className).toBe('inner test');
    vm.$children[0].ok = false;
    waitForUpdate(function () {
      // attrs / class modules should not attempt to patch the comment node
      expect(vm.$el.innerHTML).toBe('<!---->');
      vm.$children[0].ok = true;
    }).then(function () {
      expect(vm.$el.children[0].id).toBe('ok');
      expect(vm.$el.children[0].className).toBe('inner test');
    }).then(done);
  });

  it('should maintain stable list to avoid unnecessary patches', function (done) {
    var created = jasmine.createSpy();
    var destroyed = jasmine.createSpy();
    var vm = new _vue2.default({
      data: {
        ok: true
      },
      // when the first div is toggled, the second div should be reused
      // instead of re-created/destroyed
      template: '\n        <div>\n          <div v-if="ok"></div>\n          <div><test></test></div>\n        </div>\n      ',
      components: {
        test: {
          template: '<div></div>',
          created: created,
          destroyed: destroyed
        }
      }
    }).$mount();

    expect(created.calls.count()).toBe(1);
    vm.ok = false;
    waitForUpdate(function () {
      expect(created.calls.count()).toBe(1);
      expect(destroyed).not.toHaveBeenCalled();
    }).then(done);
  });
});

