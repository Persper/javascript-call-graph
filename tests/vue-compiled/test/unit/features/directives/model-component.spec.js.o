'use strict';

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Directive v-model component', function () {
  it('should work', function (done) {
    var vm = new _vue2.default({
      data: {
        msg: 'hello'
      },
      template: '\n        <div>\n          <p>{{ msg }}</p>\n          <test v-model="msg"></test>\n        </div>\n      ',
      components: {
        test: {
          props: ['value'],
          template: '<input :value="value" @input="$emit(\'input\', $event.target.value)">'
        }
      }
    }).$mount();
    document.body.appendChild(vm.$el);
    waitForUpdate(function () {
      var input = vm.$el.querySelector('input');
      input.value = 'world';
      triggerEvent(input, 'input');
    }).then(function () {
      expect(vm.msg).toEqual('world');
      expect(vm.$el.querySelector('p').textContent).toEqual('world');
      vm.msg = 'changed';
    }).then(function () {
      expect(vm.$el.querySelector('p').textContent).toEqual('changed');
      expect(vm.$el.querySelector('input').value).toEqual('changed');
    }).then(function () {
      document.body.removeChild(vm.$el);
    }).then(done);
  });

  it('should work with native tags with "is"', function (done) {
    var vm = new _vue2.default({
      data: {
        msg: 'hello'
      },
      template: '\n        <div>\n          <p>{{ msg }}</p>\n          <input is="test" v-model="msg">\n        </div>\n      ',
      components: {
        test: {
          props: ['value'],
          template: '<input :value="value" @input="$emit(\'input\', $event.target.value)">'
        }
      }
    }).$mount();
    document.body.appendChild(vm.$el);
    waitForUpdate(function () {
      var input = vm.$el.querySelector('input');
      input.value = 'world';
      triggerEvent(input, 'input');
    }).then(function () {
      expect(vm.msg).toEqual('world');
      expect(vm.$el.querySelector('p').textContent).toEqual('world');
      vm.msg = 'changed';
    }).then(function () {
      expect(vm.$el.querySelector('p').textContent).toEqual('changed');
      expect(vm.$el.querySelector('input').value).toEqual('changed');
    }).then(function () {
      document.body.removeChild(vm.$el);
    }).then(done);
  });

  it('should support customization via model option', function (done) {
    var spy = jasmine.createSpy('update');
    var vm = new _vue2.default({
      data: {
        msg: 'hello'
      },
      methods: {
        spy: spy
      },
      template: '\n        <div>\n          <p>{{ msg }}</p>\n          <test v-model="msg" @update="spy"></test>\n        </div>\n      ',
      components: {
        test: {
          model: {
            prop: 'currentValue',
            event: 'update'
          },
          props: ['currentValue'],
          template: '<input :value="currentValue" @input="$emit(\'update\', $event.target.value)">'
        }
      }
    }).$mount();
    document.body.appendChild(vm.$el);
    waitForUpdate(function () {
      var input = vm.$el.querySelector('input');
      input.value = 'world';
      triggerEvent(input, 'input');
    }).then(function () {
      expect(vm.msg).toEqual('world');
      expect(vm.$el.querySelector('p').textContent).toEqual('world');
      expect(spy).toHaveBeenCalledWith('world');
      vm.msg = 'changed';
    }).then(function () {
      expect(vm.$el.querySelector('p').textContent).toEqual('changed');
      expect(vm.$el.querySelector('input').value).toEqual('changed');
    }).then(function () {
      document.body.removeChild(vm.$el);
    }).then(done);
  });

  it('modifier: .number', function () {
    var vm = new _vue2.default({
      template: '<div><my-input ref="input" v-model.number="text"></my-input></div>',
      data: { text: 'foo' },
      components: {
        'my-input': {
          template: '<input>'
        }
      }
    }).$mount();
    expect(vm.text).toBe('foo');
    vm.$refs.input.$emit('input', 'bar');
    expect(vm.text).toBe('bar');
    vm.$refs.input.$emit('input', '123');
    expect(vm.text).toBe(123);
  });

  it('modifier: .trim', function () {
    var vm = new _vue2.default({
      template: '<div><my-input ref="input" v-model.trim="text"></my-input></div>',
      data: { text: 'foo' },
      components: {
        'my-input': {
          template: '<input>'
        }
      }
    }).$mount();
    expect(vm.text).toBe('foo');
    vm.$refs.input.$emit('input', '  bar  ');
    expect(vm.text).toBe('bar');
    vm.$refs.input.$emit('input', '   foo o  ');
    expect(vm.text).toBe('foo o');
  });
});

