'use strict';

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Directive v-model radio', function () {
  it('should work', function (done) {
    var vm = new _vue2.default({
      data: {
        test: '1'
      },
      template: '\n        <div>\n          <input type="radio" value="1" v-model="test" name="test">\n          <input type="radio" value="2" v-model="test" name="test">\n        </div>\n      '
    }).$mount();
    document.body.appendChild(vm.$el);
    expect(vm.$el.children[0].checked).toBe(true);
    expect(vm.$el.children[1].checked).toBe(false);
    vm.test = '2';
    waitForUpdate(function () {
      expect(vm.$el.children[0].checked).toBe(false);
      expect(vm.$el.children[1].checked).toBe(true);
      vm.$el.children[0].click();
      expect(vm.$el.children[0].checked).toBe(true);
      expect(vm.$el.children[1].checked).toBe(false);
      expect(vm.test).toBe('1');
    }).then(function () {
      document.body.removeChild(vm.$el);
    }).then(done);
  });

  it('should respect value bindings', function (done) {
    var vm = new _vue2.default({
      data: {
        test: 1
      },
      template: '\n        <div>\n          <input type="radio" :value="1" v-model="test" name="test">\n          <input type="radio" :value="2" v-model="test" name="test">\n        </div>\n      '
    }).$mount();
    document.body.appendChild(vm.$el);
    expect(vm.$el.children[0].checked).toBe(true);
    expect(vm.$el.children[1].checked).toBe(false);
    vm.test = 2;
    waitForUpdate(function () {
      expect(vm.$el.children[0].checked).toBe(false);
      expect(vm.$el.children[1].checked).toBe(true);
      vm.$el.children[0].click();
      expect(vm.$el.children[0].checked).toBe(true);
      expect(vm.$el.children[1].checked).toBe(false);
      expect(vm.test).toBe(1);
    }).then(function () {
      document.body.removeChild(vm.$el);
    }).then(done);
  });

  it('should respect value bindings (object loose equal)', function (done) {
    var vm = new _vue2.default({
      data: {
        test: { a: 1 }
      },
      template: '\n        <div>\n          <input type="radio" :value="{ a: 1 }" v-model="test" name="test">\n          <input type="radio" :value="{ a: 2 }" v-model="test" name="test">\n        </div>\n      '
    }).$mount();
    document.body.appendChild(vm.$el);
    expect(vm.$el.children[0].checked).toBe(true);
    expect(vm.$el.children[1].checked).toBe(false);
    vm.test = { a: 2 };
    waitForUpdate(function () {
      expect(vm.$el.children[0].checked).toBe(false);
      expect(vm.$el.children[1].checked).toBe(true);
      vm.$el.children[0].click();
      expect(vm.$el.children[0].checked).toBe(true);
      expect(vm.$el.children[1].checked).toBe(false);
      expect(vm.test).toEqual({ a: 1 });
    }).then(function () {
      document.body.removeChild(vm.$el);
    }).then(done);
  });

  it('multiple radios ', function (done) {
    var spy = jasmine.createSpy();
    var vm = new _vue2.default({
      data: {
        selections: ['a', '1'],
        radioList: [{
          name: 'questionA',
          data: ['a', 'b', 'c']
        }, {
          name: 'questionB',
          data: ['1', '2']
        }]
      },
      watch: {
        selections: spy
      },
      template: '<div>' + '<div v-for="(radioGroup, idx) in radioList">' + '<div>' + '<span v-for="(item, index) in radioGroup.data">' + '<input :name="radioGroup.name" type="radio" :value="item" v-model="selections[idx]" :id="idx"/>' + '<label>{{item}}</label>' + '</span>' + '</div>' + '</div>' + '</div>'
    }).$mount();
    document.body.appendChild(vm.$el);
    var inputs = vm.$el.getElementsByTagName('input');
    inputs[1].click();
    waitForUpdate(function () {
      expect(vm.selections).toEqual(['b', '1']);
      expect(spy).toHaveBeenCalled();
    }).then(done);
  });

  it('.number modifier', function () {
    var vm = new _vue2.default({
      data: {
        test: 1
      },
      template: '\n        <div>\n          <input type="radio" value="1" v-model="test" name="test">\n          <input type="radio" value="2" v-model.number="test" name="test">\n        </div>\n      '
    }).$mount();
    document.body.appendChild(vm.$el);
    expect(vm.$el.children[0].checked).toBe(true);
    expect(vm.$el.children[1].checked).toBe(false);
    vm.$el.children[1].click();
    expect(vm.$el.children[0].checked).toBe(false);
    expect(vm.$el.children[1].checked).toBe(true);
    expect(vm.test).toBe(2);
  });

  it('should respect different primitive type value', function (done) {
    var vm = new _vue2.default({
      data: {
        test: 1
      },
      template: '<div>' + '<input type="radio" value="" v-model="test" name="test">' + '<input type="radio" value="0" v-model="test" name="test">' + '<input type="radio" value="1" v-model="test" name="test">' + '<input type="radio" value="false" v-model="test" name="test">' + '<input type="radio" value="true" v-model="test" name="test">' + '</div>'
    }).$mount();
    var radioboxInput = vm.$el.children;
    expect(radioboxInput[0].checked).toBe(false);
    expect(radioboxInput[1].checked).toBe(false);
    expect(radioboxInput[2].checked).toBe(true);
    expect(radioboxInput[3].checked).toBe(false);
    expect(radioboxInput[4].checked).toBe(false);
    vm.test = 0;
    waitForUpdate(function () {
      expect(radioboxInput[0].checked).toBe(false);
      expect(radioboxInput[1].checked).toBe(true);
      expect(radioboxInput[2].checked).toBe(false);
      expect(radioboxInput[3].checked).toBe(false);
      expect(radioboxInput[4].checked).toBe(false);
      vm.test = '';
    }).then(function () {
      expect(radioboxInput[0].checked).toBe(true);
      expect(radioboxInput[1].checked).toBe(false);
      expect(radioboxInput[2].checked).toBe(false);
      expect(radioboxInput[3].checked).toBe(false);
      expect(radioboxInput[4].checked).toBe(false);
      vm.test = false;
    }).then(function () {
      expect(radioboxInput[0].checked).toBe(false);
      expect(radioboxInput[1].checked).toBe(false);
      expect(radioboxInput[2].checked).toBe(false);
      expect(radioboxInput[3].checked).toBe(true);
      expect(radioboxInput[4].checked).toBe(false);
      vm.test = true;
    }).then(function () {
      expect(radioboxInput[0].checked).toBe(false);
      expect(radioboxInput[1].checked).toBe(false);
      expect(radioboxInput[2].checked).toBe(false);
      expect(radioboxInput[3].checked).toBe(false);
      expect(radioboxInput[4].checked).toBe(true);
    }).then(done);
  });

  // #4521
  it('should work with click event', function (done) {
    var vm = new _vue2.default({
      data: {
        num: 1,
        checked: 1
      },
      template: '<div @click="add">' + 'click {{ num }}<input name="test" type="radio" value="1" v-model="checked"/>' + '<input name="test" type="radio" value="2" v-model="checked"/>' + '</div>',
      methods: {
        add: function add() {
          this.num++;
        }
      }
    }).$mount();
    document.body.appendChild(vm.$el);
    var radios = vm.$el.getElementsByTagName('input');
    radios[0].click();
    waitForUpdate(function () {
      expect(radios[0].checked).toBe(true);
      expect(radios[1].checked).toBe(false);
      expect(vm.num).toBe(2);
      radios[0].click();
    }).then(function () {
      expect(radios[0].checked).toBe(true);
      expect(radios[1].checked).toBe(false);
      expect(vm.num).toBe(3);
      radios[1].click();
    }).then(function () {
      expect(radios[0].checked).toBe(false);
      expect(radios[1].checked).toBe(true);
      expect(vm.num).toBe(4);
    }).then(done);
  });

  it('should get updated with model when in focus', function (done) {
    var vm = new _vue2.default({
      data: {
        a: '2'
      },
      template: '<input type="radio" value="1" v-model="a"/>'
    }).$mount();
    document.body.appendChild(vm.$el);
    vm.$el.click();
    waitForUpdate(function () {
      expect(vm.$el.checked).toBe(true);
      vm.a = 2;
    }).then(function () {
      expect(vm.$el.checked).toBe(false);
    }).then(done);
  });
});

