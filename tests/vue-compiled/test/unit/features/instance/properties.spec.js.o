'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Instance properties', function () {
  it('$data', function () {
    var data = { a: 1 };
    var vm = new _vue2.default({
      data: data
    });
    expect(vm.a).toBe(1);
    expect(vm.$data).toBe(data);
    // vm -> data
    vm.a = 2;
    expect(data.a).toBe(2);
    // data -> vm
    data.a = 3;
    expect(vm.a).toBe(3);
  });

  it('$options', function () {
    var A = _vue2.default.extend({
      methods: {
        a: function a() {}
      }
    });
    var vm = new A({
      methods: {
        b: function b() {}
      }
    });
    expect(_typeof(vm.$options.methods.a)).toBe('function');
    expect(_typeof(vm.$options.methods.b)).toBe('function');
  });

  it('$root/$children', function (done) {
    var vm = new _vue2.default({
      template: '<div><test v-if="ok"></test></div>',
      data: { ok: true },
      components: {
        test: {
          template: '<div></div>'
        }
      }
    }).$mount();
    expect(vm.$root).toBe(vm);
    expect(vm.$children.length).toBe(1);
    expect(vm.$children[0].$root).toBe(vm);
    vm.ok = false;
    waitForUpdate(function () {
      expect(vm.$children.length).toBe(0);
      vm.ok = true;
    }).then(function () {
      expect(vm.$children.length).toBe(1);
      expect(vm.$children[0].$root).toBe(vm);
    }).then(done);
  });

  it('$parent', function () {
    var calls = [];
    var makeOption = function makeOption(name) {
      return {
        name: name,
        template: '<div><slot></slot></div>',
        created: function created() {
          calls.push(name + ':' + this.$parent.$options.name);
        }
      };
    };
    new _vue2.default({
      template: '\n        <div>\n          <outer><middle><inner></inner></middle></outer>\n          <next></next>\n        </div>\n      ',
      components: {
        outer: makeOption('outer'),
        middle: makeOption('middle'),
        inner: makeOption('inner'),
        next: makeOption('next')
      }
    }).$mount();
    expect(calls).toEqual(['outer:undefined', 'middle:outer', 'inner:middle', 'next:undefined']);
  });

  it('$props', function (done) {
    var Comp = _vue2.default.extend({
      props: ['msg'],
      template: '<div>{{ msg }} {{ $props.msg }}</div>'
    });
    var vm = new Comp({
      propsData: {
        msg: 'foo'
      }
    }).$mount();
    // check render
    expect(vm.$el.textContent).toContain('foo foo');
    // warn set
    vm.$props = {};
    expect('$props is readonly').toHaveBeenWarned();
    // check existence
    expect(vm.$props.msg).toBe('foo');
    // check change
    vm.msg = 'bar';
    expect(vm.$props.msg).toBe('bar');
    waitForUpdate(function () {
      expect(vm.$el.textContent).toContain('bar bar');
    }).then(function () {
      vm.$props.msg = 'baz';
      expect(vm.msg).toBe('baz');
    }).then(function () {
      expect(vm.$el.textContent).toContain('baz baz');
    }).then(done);
  });

  it('warn mutating $props', function () {
    var Comp = {
      props: ['msg'],
      render: function render() {},
      mounted: function mounted() {
        expect(this.$props.msg).toBe('foo');
        this.$props.msg = 'bar';
      }
    };
    new _vue2.default({
      template: '<comp ref="comp" msg="foo" />',
      components: { Comp: Comp }
    }).$mount();
    expect('Avoid mutating a prop').toHaveBeenWarned();
  });

  it('$attrs', function (done) {
    var vm = new _vue2.default({
      template: '<foo :id="foo" bar="1"/>',
      data: { foo: 'foo' },
      components: {
        foo: {
          props: ['bar'],
          template: '<div><div v-bind="$attrs"></div></div>'
        }
      }
    }).$mount();
    expect(vm.$el.children[0].id).toBe('foo');
    expect(vm.$el.children[0].hasAttribute('bar')).toBe(false);
    vm.foo = 'bar';
    waitForUpdate(function () {
      expect(vm.$el.children[0].id).toBe('bar');
      expect(vm.$el.children[0].hasAttribute('bar')).toBe(false);
    }).then(done);
  });

  // #6263
  it('$attrs should not be undefined when no props passed in', function () {
    var vm = new _vue2.default({
      template: '<foo/>',
      data: { foo: 'foo' },
      components: {
        foo: {
          template: '<div>{{ this.foo }}</div>'
        }
      }
    }).$mount();
    expect(vm.$attrs).toBeDefined();
  });

  it('warn mutating $attrs', function () {
    var vm = new _vue2.default();
    vm.$attrs = {};
    expect('$attrs is readonly').toHaveBeenWarned();
  });

  it('$listeners', function (done) {
    var spyA = jasmine.createSpy('A');
    var spyB = jasmine.createSpy('B');
    var vm = new _vue2.default({
      template: '<foo @click="foo"/>',
      data: { foo: spyA },
      components: {
        foo: {
          template: '<div v-on="$listeners"></div>'
        }
      }
    }).$mount();

    // has to be in dom for test to pass in IE
    document.body.appendChild(vm.$el);

    triggerEvent(vm.$el, 'click');
    expect(spyA.calls.count()).toBe(1);
    expect(spyB.calls.count()).toBe(0);

    vm.foo = spyB;
    waitForUpdate(function () {
      triggerEvent(vm.$el, 'click');
      expect(spyA.calls.count()).toBe(1);
      expect(spyB.calls.count()).toBe(1);
      document.body.removeChild(vm.$el);
    }).then(done);
  });

  it('warn mutating $listeners', function () {
    var vm = new _vue2.default();
    vm.$listeners = {};
    expect('$listeners is readonly').toHaveBeenWarned();
  });
});

