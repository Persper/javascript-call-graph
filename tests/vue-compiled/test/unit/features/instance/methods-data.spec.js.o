'use strict';

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Instance methods data', function () {
  it('$set/$delete', function (done) {
    var vm = new _vue2.default({
      template: '<div>{{ a.msg }}</div>',
      data: {
        a: {}
      }
    }).$mount();
    expect(vm.$el.innerHTML).toBe('');
    vm.$set(vm.a, 'msg', 'hello');
    waitForUpdate(function () {
      expect(vm.$el.innerHTML).toBe('hello');
      vm.$delete(vm.a, 'msg');
    }).then(function () {
      expect(vm.$el.innerHTML).toBe('');
    }).then(done);
  });

  describe('$watch', function () {
    var vm = void 0,
        spy = void 0;
    beforeEach(function () {
      spy = jasmine.createSpy('watch');
      vm = new _vue2.default({
        data: {
          a: {
            b: 1
          }
        },
        methods: {
          foo: spy
        }
      });
    });

    it('basic usage', function (done) {
      vm.$watch('a.b', spy);
      vm.a.b = 2;
      waitForUpdate(function () {
        expect(spy.calls.count()).toBe(1);
        expect(spy).toHaveBeenCalledWith(2, 1);
        vm.a = { b: 3 };
      }).then(function () {
        expect(spy.calls.count()).toBe(2);
        expect(spy).toHaveBeenCalledWith(3, 2);
      }).then(done);
    });

    it('immediate', function () {
      vm.$watch('a.b', spy, { immediate: true });
      expect(spy.calls.count()).toBe(1);
      expect(spy).toHaveBeenCalledWith(1);
    });

    it('unwatch', function (done) {
      var unwatch = vm.$watch('a.b', spy);
      unwatch();
      vm.a.b = 2;
      waitForUpdate(function () {
        expect(spy.calls.count()).toBe(0);
      }).then(done);
    });

    it('function watch', function (done) {
      vm.$watch(function () {
        return this.a.b;
      }, spy);
      vm.a.b = 2;
      waitForUpdate(function () {
        expect(spy).toHaveBeenCalledWith(2, 1);
      }).then(done);
    });

    it('deep watch', function (done) {
      var oldA = vm.a;
      vm.$watch('a', spy, { deep: true });
      vm.a.b = 2;
      waitForUpdate(function () {
        expect(spy).toHaveBeenCalledWith(oldA, oldA);
        vm.a = { b: 3 };
      }).then(function () {
        expect(spy).toHaveBeenCalledWith(vm.a, oldA);
      }).then(done);
    });

    it('handler option', function (done) {
      var oldA = vm.a;
      vm.$watch('a', {
        handler: spy,
        deep: true
      });
      vm.a.b = 2;
      waitForUpdate(function () {
        expect(spy).toHaveBeenCalledWith(oldA, oldA);
        vm.a = { b: 3 };
      }).then(function () {
        expect(spy).toHaveBeenCalledWith(vm.a, oldA);
      }).then(done);
    });

    it('handler option in string', function () {
      vm.$watch('a.b', {
        handler: 'foo',
        immediate: true
      });
      expect(spy.calls.count()).toBe(1);
      expect(spy).toHaveBeenCalledWith(1);
    });

    it('warn expression', function () {
      vm.$watch('a + b', spy);
      expect('Watcher only accepts simple dot-delimited paths').toHaveBeenWarned();
    });
  });
});

