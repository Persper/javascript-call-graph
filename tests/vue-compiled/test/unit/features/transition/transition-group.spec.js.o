'use strict';

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

var _injectStyles2 = require('./inject-styles');

var _injectStyles3 = _interopRequireDefault(_injectStyles2);

var _env = require('core/util/env');

var _transitionUtil = require('web/runtime/transition-util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (!_env.isIE9) {
  describe('Transition group', function () {
    var _injectStyles = (0, _injectStyles3.default)(),
        duration = _injectStyles.duration,
        buffer = _injectStyles.buffer;

    var el = void 0;
    beforeEach(function () {
      el = document.createElement('div');
      document.body.appendChild(el);
    });

    function createBasicVM(useIs, appear) {
      var vm = new _vue2.default({
        template: '\n          <div>\n            ' + (useIs ? '<span is="transition-group">' : '<transition-group' + (appear ? ' appear' : '') + '>') + '\n              <div v-for="item in items" :key="item" class="test">{{ item }}</div>\n            ' + (useIs ? '</span>' : '</transition-group>') + '\n          </div>\n        ',
        data: {
          items: ['a', 'b', 'c']
        }
      }).$mount(el);
      if (!appear) {
        expect(vm.$el.innerHTML).toBe('<span>' + vm.items.map(function (i) {
          return '<div class="test">' + i + '</div>';
        }).join('') + '</span>');
      }
      return vm;
    }

    it('enter', function (done) {
      var vm = createBasicVM();
      vm.items.push('d', 'e');
      waitForUpdate(function () {
        expect(vm.$el.innerHTML).toBe('<span>' + ['a', 'b', 'c'].map(function (i) {
          return '<div class="test">' + i + '</div>';
        }).join('') + '<div class="test v-enter v-enter-active">d</div>' + '<div class="test v-enter v-enter-active">e</div>' + '</span>');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<span>' + ['a', 'b', 'c'].map(function (i) {
          return '<div class="test">' + i + '</div>';
        }).join('') + '<div class="test v-enter-active v-enter-to">d</div>' + '<div class="test v-enter-active v-enter-to">e</div>' + '</span>');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.innerHTML).toBe('<span>' + vm.items.map(function (i) {
          return '<div class="test">' + i + '</div>';
        }).join('') + '</span>');
      }).then(done);
    });

    it('leave', function (done) {
      var vm = createBasicVM();
      vm.items = ['b'];
      waitForUpdate(function () {
        expect(vm.$el.innerHTML).toBe('<span>' + '<div class="test v-leave v-leave-active">a</div>' + '<div class="test">b</div>' + '<div class="test v-leave v-leave-active">c</div>' + '</span>');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<span>' + '<div class="test v-leave-active v-leave-to">a</div>' + '<div class="test">b</div>' + '<div class="test v-leave-active v-leave-to">c</div>' + '</span>');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.innerHTML).toBe('<span>' + vm.items.map(function (i) {
          return '<div class="test">' + i + '</div>';
        }).join('') + '</span>');
      }).then(done);
    });

    it('enter + leave', function (done) {
      var vm = createBasicVM();
      vm.items = ['b', 'c', 'd'];
      waitForUpdate(function () {
        expect(vm.$el.innerHTML).toBe('<span>' + '<div class="test v-leave v-leave-active">a</div>' + '<div class="test">b</div>' + '<div class="test">c</div>' + '<div class="test v-enter v-enter-active">d</div>' + '</span>');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<span>' + '<div class="test v-leave-active v-leave-to">a</div>' + '<div class="test">b</div>' + '<div class="test">c</div>' + '<div class="test v-enter-active v-enter-to">d</div>' + '</span>');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.innerHTML).toBe('<span>' + vm.items.map(function (i) {
          return '<div class="test">' + i + '</div>';
        }).join('') + '</span>');
      }).then(done);
    });

    it('use with "is" attribute', function (done) {
      var vm = createBasicVM(true);
      vm.items = ['b', 'c', 'd'];
      waitForUpdate(function () {
        expect(vm.$el.innerHTML).toBe('<span>' + '<div class="test v-leave v-leave-active">a</div>' + '<div class="test">b</div>' + '<div class="test">c</div>' + '<div class="test v-enter v-enter-active">d</div>' + '</span>');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<span>' + '<div class="test v-leave-active v-leave-to">a</div>' + '<div class="test">b</div>' + '<div class="test">c</div>' + '<div class="test v-enter-active v-enter-to">d</div>' + '</span>');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.innerHTML).toBe('<span>' + vm.items.map(function (i) {
          return '<div class="test">' + i + '</div>';
        }).join('') + '</span>');
      }).then(done);
    });

    it('appear', function (done) {
      var vm = createBasicVM(false, true /* appear */);
      waitForUpdate(function () {
        expect(vm.$el.innerHTML).toBe('<span>' + vm.items.map(function (i) {
          return '<div class="test v-enter v-enter-active">' + i + '</div>';
        }).join('') + '</span>');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<span>' + vm.items.map(function (i) {
          return '<div class="test v-enter-active v-enter-to">' + i + '</div>';
        }).join('') + '</span>');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.innerHTML).toBe('<span>' + vm.items.map(function (i) {
          return '<div class="test">' + i + '</div>';
        }).join('') + '</span>');
      }).then(done);
    });

    it('events', function (done) {
      var next = void 0;
      var beforeEnterSpy = jasmine.createSpy();
      var afterEnterSpy = jasmine.createSpy();
      var afterLeaveSpy = jasmine.createSpy();
      var vm = new _vue2.default({
        template: '\n          <div>\n            <transition-group @before-enter="beforeEnter" @after-enter="afterEnter" @after-leave="afterLeave">\n              <div v-for="item in items" :key="item" class="test">{{ item }}</div>\n            </transition-group>\n          </div>\n        ',
        data: {
          items: ['a', 'b', 'c']
        },
        methods: {
          beforeEnter: function beforeEnter(el) {
            expect(el.textContent).toBe('d');
            beforeEnterSpy();
          },
          afterEnter: function afterEnter(el) {
            expect(el.textContent).toBe('d');
            afterEnterSpy();
            next();
          },
          afterLeave: function afterLeave(el) {
            expect(el.textContent).toBe('a');
            afterLeaveSpy();
            next();
          }
        }
      }).$mount(el);

      vm.items.push('d');
      waitForUpdate(function () {
        expect(vm.$el.innerHTML).toBe('<span>' + '<div class="test">a</div>' + '<div class="test">b</div>' + '<div class="test">c</div>' + '<div class="test v-enter v-enter-active">d</div>' + '</span>');
        expect(beforeEnterSpy.calls.count()).toBe(1);
      }).thenWaitFor(function (_next) {
        next = _next;
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('<span>' + '<div class="test">a</div>' + '<div class="test">b</div>' + '<div class="test">c</div>' + '<div class="test">d</div>' + '</span>');
        expect(afterEnterSpy.calls.count()).toBe(1);
        vm.items.shift();
      }).thenWaitFor(function (_next) {
        next = _next;
      }).then(function () {
        expect(vm.$el.innerHTML).toBe('<span>' + '<div class="test">b</div>' + '<div class="test">c</div>' + '<div class="test">d</div>' + '</span>');
        expect(afterLeaveSpy.calls.count()).toBe(1);
      }).then(done);
    });

    it('move', function (done) {
      var vm = new _vue2.default({
        template: '\n          <div>\n            <transition-group name="group">\n              <div v-for="item in items" :key="item" class="test">{{ item }}</div>\n            </transition-group>\n          </div>\n        ',
        data: {
          items: ['a', 'b', 'c']
        }
      }).$mount(el);

      vm.items = ['d', 'b', 'a'];
      waitForUpdate(function () {
        expect(vm.$el.innerHTML.replace(/\s?style=""(\s?)/g, '$1')).toBe('<span>' + '<div class="test group-enter group-enter-active">d</div>' + '<div class="test">b</div>' + '<div class="test group-move">a</div>' + '<div class="test group-leave group-leave-active group-move">c</div>' + '</span>');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML.replace(/\s?style=""(\s?)/g, '$1')).toBe('<span>' + '<div class="test group-enter-active group-enter-to">d</div>' + '<div class="test">b</div>' + '<div class="test group-move">a</div>' + '<div class="test group-leave-active group-move group-leave-to">c</div>' + '</span>');
      }).thenWaitFor(duration * 2).then(function () {
        expect(vm.$el.innerHTML.replace(/\s?style=""(\s?)/g, '$1')).toBe('<span>' + '<div class="test">d</div>' + '<div class="test">b</div>' + '<div class="test">a</div>' + '</span>');
      }).then(done);
    });

    it('warn unkeyed children', function () {
      new _vue2.default({
        template: '<div><transition-group><div v-for="i in 3"></div></transition-group></div>'
      }).$mount();
      expect('<transition-group> children must be keyed: <div>').toHaveBeenWarned();
    });

    // GitHub issue #6006
    it('should work with dynamic name', function (done) {
      var vm = new _vue2.default({
        template: '\n          <div>\n            <transition-group :name="name">\n              <div v-for="item in items" :key="item">{{ item }}</div>\n            </transition-group>\n          </div>\n        ',
        data: {
          items: ['a', 'b', 'c'],
          name: 'group'
        }
      }).$mount(el);

      vm.name = 'invalid-name';
      vm.items = ['b', 'c', 'a'];
      waitForUpdate(function () {
        expect(vm.$el.innerHTML.replace(/\s?style=""(\s?)/g, '$1')).toBe('<span>' + '<div>b</div>' + '<div>c</div>' + '<div>a</div>' + '</span>');
        vm.name = 'group';
        vm.items = ['a', 'b', 'c'];
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML.replace(/\s?style=""(\s?)/g, '$1')).toBe('<span>' + '<div class="group-move">a</div>' + '<div class="group-move">b</div>' + '<div class="group-move">c</div>' + '</span>');
      }).thenWaitFor(duration * 2 + buffer).then(function () {
        expect(vm.$el.innerHTML.replace(/\s?style=""(\s?)/g, '$1')).toBe('<span>' + '<div>a</div>' + '<div>b</div>' + '<div>c</div>' + '</span>');
      }).then(done);
    });
  });
}

