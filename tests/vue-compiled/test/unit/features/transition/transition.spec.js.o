'use strict';

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

var _injectStyles2 = require('./inject-styles');

var _injectStyles3 = _interopRequireDefault(_injectStyles2);

var _env = require('core/util/env');

var _transitionUtil = require('web/runtime/transition-util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (!_env.isIE9) {
  describe('Transition basic', function () {
    var _injectStyles = (0, _injectStyles3.default)(),
        duration = _injectStyles.duration,
        buffer = _injectStyles.buffer;

    var explicitDuration = duration * 2;

    var el = void 0;
    beforeEach(function () {
      el = document.createElement('div');
      document.body.appendChild(el);
    });

    it('basic transition', function (done) {
      var vm = new _vue2.default({
        template: '<div><transition><div v-if="ok" class="test">foo</div></transition></div>',
        data: { ok: true }
      }).$mount(el);

      // should not apply transition on initial render by default
      expect(vm.$el.innerHTML).toBe('<div class="test">foo</div>');
      vm.ok = false;
      waitForUpdate(function () {
        expect(vm.$el.children[0].className).toBe('test v-leave v-leave-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test v-leave-active v-leave-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children.length).toBe(0);
        vm.ok = true;
      }).then(function () {
        expect(vm.$el.children[0].className).toBe('test v-enter v-enter-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test v-enter-active v-enter-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children[0].className).toBe('test');
      }).then(done);
    });

    it('named transition', function (done) {
      var vm = new _vue2.default({
        template: '<div><transition name="test"><div v-if="ok" class="test">foo</div></transition></div>',
        data: { ok: true }
      }).$mount(el);

      // should not apply transition on initial render by default
      expect(vm.$el.innerHTML).toBe('<div class="test">foo</div>');
      vm.ok = false;
      waitForUpdate(function () {
        expect(vm.$el.children[0].className).toBe('test test-leave test-leave-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-leave-active test-leave-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children.length).toBe(0);
        vm.ok = true;
      }).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-enter test-enter-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-enter-active test-enter-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children[0].className).toBe('test');
      }).then(done);
    });

    it('custom transition classes', function (done) {
      var vm = new _vue2.default({
        template: '\n          <div>\n            <transition\n              enter-class="hello"\n              enter-active-class="hello-active"\n              enter-to-class="hello-to"\n              leave-class="bye"\n              leave-to-class="bye-to"\n              leave-active-class="byebye active more ">\n              <div v-if="ok" class="test">foo</div>\n            </transition>\n          </div>\n        ',
        data: { ok: true }
      }).$mount(el);

      // should not apply transition on initial render by default
      expect(vm.$el.innerHTML).toBe('<div class="test">foo</div>');
      vm.ok = false;
      waitForUpdate(function () {
        expect(vm.$el.children[0].className).toBe('test bye byebye active more');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test byebye active more bye-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children.length).toBe(0);
        vm.ok = true;
      }).then(function () {
        expect(vm.$el.children[0].className).toBe('test hello hello-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test hello-active hello-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children[0].className).toBe('test');
      }).then(done);
    });

    it('dynamic transition', function (done) {
      var vm = new _vue2.default({
        template: '\n          <div>\n            <transition :name="trans">\n              <div v-if="ok" class="test">foo</div>\n            </transition>\n          </div>\n        ',
        data: {
          ok: true,
          trans: 'test'
        }
      }).$mount(el);

      // should not apply transition on initial render by default
      expect(vm.$el.innerHTML).toBe('<div class="test">foo</div>');
      vm.ok = false;
      waitForUpdate(function () {
        expect(vm.$el.children[0].className).toBe('test test-leave test-leave-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-leave-active test-leave-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children.length).toBe(0);
        vm.ok = true;
        vm.trans = 'changed';
      }).then(function () {
        expect(vm.$el.children[0].className).toBe('test changed-enter changed-enter-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test changed-enter-active changed-enter-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children[0].className).toBe('test');
      }).then(done);
    });

    it('inline transition object', function (done) {
      var enter = jasmine.createSpy('enter');
      var leave = jasmine.createSpy('leave');
      var vm = new _vue2.default({
        render: function render(h) {
          return h('div', null, [h('transition', {
            props: {
              name: 'inline',
              enterClass: 'hello',
              enterToClass: 'hello-to',
              enterActiveClass: 'hello-active',
              leaveClass: 'bye',
              leaveToClass: 'bye-to',
              leaveActiveClass: 'byebye active'
            },
            on: {
              enter: enter,
              leave: leave
            }
          }, this.ok ? [h('div', { class: 'test' }, 'foo')] : undefined)]);
        },

        data: { ok: true }
      }).$mount(el);

      // should not apply transition on initial render by default
      expect(vm.$el.innerHTML).toBe('<div class="test">foo</div>');
      vm.ok = false;
      waitForUpdate(function () {
        expect(vm.$el.children[0].className).toBe('test bye byebye active');
        expect(leave).toHaveBeenCalled();
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test byebye active bye-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children.length).toBe(0);
        vm.ok = true;
      }).then(function () {
        expect(vm.$el.children[0].className).toBe('test hello hello-active');
        expect(enter).toHaveBeenCalled();
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test hello-active hello-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children[0].className).toBe('test');
      }).then(done);
    });

    it('transition events', function (done) {
      var onLeaveSpy = jasmine.createSpy('leave');
      var onEnterSpy = jasmine.createSpy('enter');
      var beforeLeaveSpy = jasmine.createSpy('beforeLeave');
      var beforeEnterSpy = jasmine.createSpy('beforeEnter');
      var afterLeaveSpy = jasmine.createSpy('afterLeave');
      var afterEnterSpy = jasmine.createSpy('afterEnter');

      var vm = new _vue2.default({
        template: '\n          <div>\n            <transition\n              name="test"\n              @before-enter="beforeEnter"\n              @enter="enter"\n              @after-enter="afterEnter"\n              @before-leave="beforeLeave"\n              @leave="leave"\n              @after-leave="afterLeave">\n              <div v-if="ok" class="test">foo</div>\n            </transition>\n          </div>\n        ',
        data: { ok: true },
        methods: {
          beforeLeave: function beforeLeave(el) {
            expect(el).toBe(vm.$el.children[0]);
            expect(el.className).toBe('test');
            beforeLeaveSpy(el);
          },
          leave: function leave(el) {
            return onLeaveSpy(el);
          },
          afterLeave: function afterLeave(el) {
            return afterLeaveSpy(el);
          },
          beforeEnter: function beforeEnter(el) {
            expect(vm.$el.contains(el)).toBe(false);
            expect(el.className).toBe('test');
            beforeEnterSpy(el);
          },
          enter: function enter(el) {
            expect(vm.$el.contains(el)).toBe(true);
            onEnterSpy(el);
          },
          afterEnter: function afterEnter(el) {
            return afterEnterSpy(el);
          }
        }
      }).$mount(el);

      // should not apply transition on initial render by default
      expect(vm.$el.innerHTML).toBe('<div class="test">foo</div>');

      var _el = vm.$el.children[0];
      vm.ok = false;
      waitForUpdate(function () {
        expect(beforeLeaveSpy).toHaveBeenCalledWith(_el);
        expect(onLeaveSpy).toHaveBeenCalledWith(_el);
        expect(vm.$el.children[0].className).toBe('test test-leave test-leave-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(afterLeaveSpy).not.toHaveBeenCalled();
        expect(vm.$el.children[0].className).toBe('test test-leave-active test-leave-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(afterLeaveSpy).toHaveBeenCalledWith(_el);
        expect(vm.$el.children.length).toBe(0);
        vm.ok = true;
      }).then(function () {
        _el = vm.$el.children[0];
        expect(beforeEnterSpy).toHaveBeenCalledWith(_el);
        expect(onEnterSpy).toHaveBeenCalledWith(_el);
        expect(vm.$el.children[0].className).toBe('test test-enter test-enter-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(afterEnterSpy).not.toHaveBeenCalled();
        expect(vm.$el.children[0].className).toBe('test test-enter-active test-enter-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(afterEnterSpy).toHaveBeenCalledWith(_el);
        expect(vm.$el.children[0].className).toBe('test');
      }).then(done);
    });

    it('transition events (v-show)', function (done) {
      var onLeaveSpy = jasmine.createSpy('leave');
      var onEnterSpy = jasmine.createSpy('enter');
      var beforeLeaveSpy = jasmine.createSpy('beforeLeave');
      var beforeEnterSpy = jasmine.createSpy('beforeEnter');
      var afterLeaveSpy = jasmine.createSpy('afterLeave');
      var afterEnterSpy = jasmine.createSpy('afterEnter');

      var vm = new _vue2.default({
        template: '\n          <div>\n            <transition\n              name="test"\n              @before-enter="beforeEnter"\n              @enter="enter"\n              @after-enter="afterEnter"\n              @before-leave="beforeLeave"\n              @leave="leave"\n              @after-leave="afterLeave">\n              <div v-show="ok" class="test">foo</div>\n            </transition>\n          </div>\n        ',
        data: { ok: true },
        methods: {
          beforeLeave: function beforeLeave(el) {
            expect(el.style.display).toBe('');
            expect(el).toBe(vm.$el.children[0]);
            expect(el.className).toBe('test');
            beforeLeaveSpy(el);
          },
          leave: function leave(el) {
            expect(el.style.display).toBe('');
            onLeaveSpy(el);
          },
          afterLeave: function afterLeave(el) {
            expect(el.style.display).toBe('none');
            afterLeaveSpy(el);
          },
          beforeEnter: function beforeEnter(el) {
            expect(el.className).toBe('test');
            expect(el.style.display).toBe('none');
            beforeEnterSpy(el);
          },
          enter: function enter(el) {
            expect(el.style.display).toBe('');
            onEnterSpy(el);
          },
          afterEnter: function afterEnter(el) {
            expect(el.style.display).toBe('');
            afterEnterSpy(el);
          }
        }
      }).$mount(el);

      // should not apply transition on initial render by default
      expect(vm.$el.innerHTML).toBe('<div class="test">foo</div>');

      var _el = vm.$el.children[0];
      vm.ok = false;
      waitForUpdate(function () {
        expect(beforeLeaveSpy).toHaveBeenCalledWith(_el);
        expect(onLeaveSpy).toHaveBeenCalledWith(_el);
        expect(vm.$el.children[0].className).toBe('test test-leave test-leave-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(afterLeaveSpy).not.toHaveBeenCalled();
        expect(vm.$el.children[0].className).toBe('test test-leave-active test-leave-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(afterLeaveSpy).toHaveBeenCalledWith(_el);
        expect(vm.$el.children[0].style.display).toBe('none');
        vm.ok = true;
      }).then(function () {
        _el = vm.$el.children[0];
        expect(beforeEnterSpy).toHaveBeenCalledWith(_el);
        expect(onEnterSpy).toHaveBeenCalledWith(_el);
        expect(vm.$el.children[0].className).toBe('test test-enter test-enter-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(afterEnterSpy).not.toHaveBeenCalled();
        expect(vm.$el.children[0].className).toBe('test test-enter-active test-enter-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(afterEnterSpy).toHaveBeenCalledWith(_el);
        expect(vm.$el.children[0].className).toBe('test');
      }).then(done);
    });

    it('explicit user callback in JavaScript hooks', function (done) {
      var next = void 0;
      var vm = new _vue2.default({
        template: '<div>\n          <transition name="test" @enter="enter" @leave="leave">\n            <div v-if="ok" class="test">foo</div>\n          </transition>\n        </div>',
        data: { ok: true },
        methods: {
          enter: function enter(el, cb) {
            next = cb;
          },
          leave: function leave(el, cb) {
            next = cb;
          }
        }
      }).$mount(el);
      vm.ok = false;
      waitForUpdate(function () {
        expect(vm.$el.children[0].className).toBe('test test-leave test-leave-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-leave-active test-leave-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-leave-active test-leave-to');
        expect(next).toBeTruthy();
        next();
        expect(vm.$el.children.length).toBe(0);
      }).then(function () {
        vm.ok = true;
      }).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-enter test-enter-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-enter-active test-enter-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-enter-active test-enter-to');
        expect(next).toBeTruthy();
        next();
        expect(vm.$el.children[0].className).toBe('test');
      }).then(done);
    });

    it('css: false', function (done) {
      var enterSpy = jasmine.createSpy('enter');
      var leaveSpy = jasmine.createSpy('leave');
      var vm = new _vue2.default({
        template: '\n          <div>\n            <transition :css="false" name="test" @enter="enter" @leave="leave">\n              <div v-if="ok" class="test">foo</div>\n            </transition>\n          </div>\n        ',
        data: { ok: true },
        methods: {
          enter: enterSpy,
          leave: leaveSpy
        }
      }).$mount(el);

      vm.ok = false;
      waitForUpdate(function () {
        expect(leaveSpy).toHaveBeenCalled();
        expect(vm.$el.innerHTML).toBe('<!---->');
        vm.ok = true;
      }).then(function () {
        expect(enterSpy).toHaveBeenCalled();
        expect(vm.$el.innerHTML).toBe('<div class="test">foo</div>');
      }).then(done);
    });

    it('no transition detected', function (done) {
      var enterSpy = jasmine.createSpy('enter');
      var leaveSpy = jasmine.createSpy('leave');
      var vm = new _vue2.default({
        template: '<div><transition name="nope" @enter="enter" @leave="leave"><div v-if="ok">foo</div></transition></div>',
        data: { ok: true },
        methods: {
          enter: enterSpy,
          leave: leaveSpy
        }
      }).$mount(el);

      vm.ok = false;
      waitForUpdate(function () {
        expect(leaveSpy).toHaveBeenCalled();
        expect(vm.$el.innerHTML).toBe('<div class="nope-leave nope-leave-active">foo</div><!---->');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<!---->');
        vm.ok = true;
      }).then(function () {
        expect(enterSpy).toHaveBeenCalled();
        expect(vm.$el.innerHTML).toBe('<div class="nope-enter nope-enter-active">foo</div>');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.innerHTML).toBe('<div>foo</div>');
      }).then(done);
    });

    it('enterCancelled', function (done) {
      var spy = jasmine.createSpy('enterCancelled');
      var vm = new _vue2.default({
        template: '\n          <div>\n            <transition name="test" @enter-cancelled="enterCancelled">\n              <div v-if="ok" class="test">foo</div>\n            </transition>\n          </div>\n        ',
        data: { ok: false },
        methods: {
          enterCancelled: spy
        }
      }).$mount(el);

      expect(vm.$el.innerHTML).toBe('<!---->');
      vm.ok = true;
      waitForUpdate(function () {
        expect(vm.$el.children[0].className).toBe('test test-enter test-enter-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-enter-active test-enter-to');
      }).thenWaitFor(duration / 2).then(function () {
        vm.ok = false;
      }).then(function () {
        expect(spy).toHaveBeenCalled();
        expect(vm.$el.children[0].className).toBe('test test-leave test-leave-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-leave-active test-leave-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children.length).toBe(0);
      }).then(done);
    });

    it('should remove stale leaving elements', function (done) {
      var spy = jasmine.createSpy('afterLeave');
      var vm = new _vue2.default({
        template: '\n          <div>\n            <transition name="test" @after-leave="afterLeave">\n              <div v-if="ok" class="test">foo</div>\n            </transition>\n          </div>\n        ',
        data: { ok: true },
        methods: {
          afterLeave: spy
        }
      }).$mount(el);

      expect(vm.$el.innerHTML).toBe('<div class="test">foo</div>');
      vm.ok = false;
      waitForUpdate(function () {
        expect(vm.$el.children[0].className).toBe('test test-leave test-leave-active');
      }).thenWaitFor(duration / 2).then(function () {
        vm.ok = true;
      }).then(function () {
        expect(spy).toHaveBeenCalled();
        expect(vm.$el.children.length).toBe(1); // should have removed leaving element
        expect(vm.$el.children[0].className).toBe('test test-enter test-enter-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-enter-active test-enter-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test">foo</div>');
      }).then(done);
    });

    it('transition with v-show', function (done) {
      var vm = new _vue2.default({
        template: '\n          <div>\n            <transition name="test">\n              <div v-show="ok" class="test">foo</div>\n            </transition>\n          </div>\n        ',
        data: { ok: true }
      }).$mount(el);

      // should not apply transition on initial render by default
      expect(vm.$el.textContent).toBe('foo');
      expect(vm.$el.children[0].style.display).toBe('');
      expect(vm.$el.children[0].className).toBe('test');
      vm.ok = false;
      waitForUpdate(function () {
        expect(vm.$el.children[0].className).toBe('test test-leave test-leave-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-leave-active test-leave-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children[0].style.display).toBe('none');
        vm.ok = true;
      }).then(function () {
        expect(vm.$el.children[0].style.display).toBe('');
        expect(vm.$el.children[0].className).toBe('test test-enter test-enter-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-enter-active test-enter-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children[0].className).toBe('test');
      }).then(done);
    });

    it('transition with v-show, inside child component', function (done) {
      var vm = new _vue2.default({
        template: '\n          <div>\n            <test v-show="ok"></test>\n          </div>\n        ',
        data: { ok: true },
        components: {
          test: {
            template: '<transition name="test"><div class="test">foo</div></transition>'
          }
        }
      }).$mount(el);

      // should not apply transition on initial render by default
      expect(vm.$el.textContent).toBe('foo');
      expect(vm.$el.children[0].style.display).toBe('');
      vm.ok = false;
      waitForUpdate(function () {
        expect(vm.$el.children[0].className).toBe('test test-leave test-leave-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-leave-active test-leave-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children[0].style.display).toBe('none');
        vm.ok = true;
      }).then(function () {
        expect(vm.$el.children[0].style.display).toBe('');
        expect(vm.$el.children[0].className).toBe('test test-enter test-enter-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-enter-active test-enter-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children[0].className).toBe('test');
      }).then(done);
    });

    it('leaveCancelled (v-show only)', function (done) {
      var spy = jasmine.createSpy('leaveCancelled');
      var vm = new _vue2.default({
        template: '\n          <div>\n            <transition name="test" @leave-cancelled="leaveCancelled">\n              <div v-show="ok" class="test">foo</div>\n            </transition>\n          </div>\n        ',
        data: { ok: true },
        methods: {
          leaveCancelled: spy
        }
      }).$mount(el);

      expect(vm.$el.children[0].style.display).toBe('');
      vm.ok = false;
      waitForUpdate(function () {
        expect(vm.$el.children[0].className).toBe('test test-leave test-leave-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-leave-active test-leave-to');
      }).thenWaitFor(10).then(function () {
        vm.ok = true;
      }).then(function () {
        expect(spy).toHaveBeenCalled();
        expect(vm.$el.children[0].className).toBe('test test-enter test-enter-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-enter-active test-enter-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children[0].style.display).toBe('');
      }).then(done);
    });

    it('leave transition with v-show: cancelled on next frame', function (done) {
      var vm = new _vue2.default({
        template: '\n          <div>\n            <transition name="test">\n              <div v-show="ok" class="test">foo</div>\n            </transition>\n          </div>\n        ',
        data: { ok: true }
      }).$mount(el);

      vm.ok = false;
      waitForUpdate(function () {
        vm.ok = true;
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-enter-active test-enter-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children[0].className).toBe('test');
      }).then(done);
    });

    it('enter transition with v-show: cancelled on next frame', function (done) {
      var vm = new _vue2.default({
        template: '\n          <div>\n            <transition name="test">\n              <div v-show="ok" class="test">foo</div>\n            </transition>\n          </div>\n        ',
        data: { ok: false }
      }).$mount(el);

      vm.ok = true;
      waitForUpdate(function () {
        vm.ok = false;
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-leave-active test-leave-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children[0].className).toBe('test');
      }).then(done);
    });

    it('animations', function (done) {
      var vm = new _vue2.default({
        template: '\n          <div>\n            <transition name="test-anim">\n              <div v-if="ok">foo</div>\n            </transition>\n          </div>\n        ',
        data: { ok: true }
      }).$mount(el);

      // should not apply transition on initial render by default
      expect(vm.$el.innerHTML).toBe('<div>foo</div>');
      vm.ok = false;
      waitForUpdate(function () {
        expect(vm.$el.children[0].className).toBe('test-anim-leave test-anim-leave-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test-anim-leave-active test-anim-leave-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children.length).toBe(0);
        vm.ok = true;
      }).then(function () {
        expect(vm.$el.children[0].className).toBe('test-anim-enter test-anim-enter-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test-anim-enter-active test-anim-enter-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children[0].className).toBe('');
      }).then(done);
    });

    it('explicit transition type', function (done) {
      var vm = new _vue2.default({
        template: '\n          <div>\n            <transition name="test-anim-long" type="animation">\n              <div v-if="ok" class="test">foo</div>\n            </transition>\n          </div>\n        ',
        data: { ok: true }
      }).$mount(el);

      // should not apply transition on initial render by default
      expect(vm.$el.innerHTML).toBe('<div class="test">foo</div>');
      vm.ok = false;
      waitForUpdate(function () {
        expect(vm.$el.children[0].className).toBe('test test-anim-long-leave test-anim-long-leave-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-anim-long-leave-active test-anim-long-leave-to');
      }).thenWaitFor(duration + 5).then(function () {
        // should not end early due to transition presence
        expect(vm.$el.children[0].className).toBe('test test-anim-long-leave-active test-anim-long-leave-to');
      }).thenWaitFor(duration + 5).then(function () {
        expect(vm.$el.children.length).toBe(0);
        vm.ok = true;
      }).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-anim-long-enter test-anim-long-enter-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-anim-long-enter-active test-anim-long-enter-to');
      }).thenWaitFor(duration + 5).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-anim-long-enter-active test-anim-long-enter-to');
      }).thenWaitFor(duration + 5).then(function () {
        expect(vm.$el.children[0].className).toBe('test');
      }).then(done);
    });

    it('transition on appear', function (done) {
      var vm = new _vue2.default({
        template: '\n          <div>\n            <transition name="test"\n              appear\n              appear-class="test-appear"\n              appear-to-class="test-appear-to"\n              appear-active-class="test-appear-active">\n              <div v-if="ok" class="test">foo</div>\n            </transition>\n          </div>\n        ',
        data: { ok: true }
      }).$mount(el);

      waitForUpdate(function () {
        expect(vm.$el.children[0].className).toBe('test test-appear test-appear-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-appear-active test-appear-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children[0].className).toBe('test');
      }).then(done);
    });

    it('transition on appear with v-show', function (done) {
      var vm = new _vue2.default({
        template: '\n          <div>\n            <transition name="test" appear>\n              <div v-show="ok" class="test">foo</div>\n            </transition>\n          </div>\n        ',
        data: { ok: true }
      }).$mount(el);

      waitForUpdate(function () {
        expect(vm.$el.children[0].className).toBe('test test-enter test-enter-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-enter-active test-enter-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children[0].className).toBe('test');
      }).then(done);
    });

    it('transition on SVG elements', function (done) {
      var vm = new _vue2.default({
        template: '\n          <svg>\n            <transition>\n              <circle cx="0" cy="0" r="10" v-if="ok" class="test"></circle>\n            </transition>\n          </svg>\n        ',
        data: { ok: true }
      }).$mount(el);

      // should not apply transition on initial render by default
      expect(vm.$el.childNodes[0].getAttribute('class')).toBe('test');
      vm.ok = false;
      waitForUpdate(function () {
        expect(vm.$el.childNodes[0].getAttribute('class')).toBe('test v-leave v-leave-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.childNodes[0].getAttribute('class')).toBe('test v-leave-active v-leave-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.childNodes.length).toBe(1);
        expect(vm.$el.childNodes[0].nodeType).toBe(8); // should be an empty comment node
        expect(vm.$el.childNodes[0].textContent).toBe('');
        vm.ok = true;
      }).then(function () {
        expect(vm.$el.childNodes[0].getAttribute('class')).toBe('test v-enter v-enter-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.childNodes[0].getAttribute('class')).toBe('test v-enter-active v-enter-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.childNodes[0].getAttribute('class')).toBe('test');
      }).then(done);
    });

    it('transition on child components', function (done) {
      var vm = new _vue2.default({
        template: '\n          <div>\n            <transition>\n              <test v-if="ok" class="test"></test>\n            </transition>\n          </div>\n        ',
        data: { ok: true },
        components: {
          test: {
            template: '\n              <transition name="test">\n                <div>foo</div>\n              </transition>\n            ' // test transition override from parent
          }
        }
      }).$mount(el);

      // should not apply transition on initial render by default
      expect(vm.$el.innerHTML).toBe('<div class="test">foo</div>');
      vm.ok = false;
      waitForUpdate(function () {
        expect(vm.$el.children[0].className).toBe('test v-leave v-leave-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test v-leave-active v-leave-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children.length).toBe(0);
        vm.ok = true;
      }).then(function () {
        expect(vm.$el.children[0].className).toBe('test v-enter v-enter-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test v-enter-active v-enter-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children[0].className).toBe('test');
      }).then(done);
    });

    it('transition inside child component', function (done) {
      var vm = new _vue2.default({
        template: '\n          <div>\n            <test v-if="ok" class="test"></test>\n          </div>\n        ',
        data: { ok: true },
        components: {
          test: {
            template: '\n              <transition>\n                <div>foo</div>\n              </transition>\n            '
          }
        }
      }).$mount(el);

      // should not apply transition on initial render by default
      expect(vm.$el.innerHTML).toBe('<div class="test">foo</div>');
      vm.ok = false;
      waitForUpdate(function () {
        expect(vm.$el.children[0].className).toBe('test v-leave v-leave-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test v-leave-active v-leave-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children.length).toBe(0);
        vm.ok = true;
      }).then(function () {
        expect(vm.$el.children[0].className).toBe('test v-enter v-enter-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test v-enter-active v-enter-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children[0].className).toBe('test');
      }).then(done);
    });

    it('custom transition higher-order component', function (done) {
      var vm = new _vue2.default({
        template: '<div><my-transition><div v-if="ok" class="test">foo</div></my-transition></div>',
        data: { ok: true },
        components: {
          'my-transition': {
            functional: true,
            render: function render(h, _ref) {
              var data = _ref.data,
                  children = _ref.children;

              (data.props || (data.props = {})).name = 'test';
              return h('transition', data, children);
            }
          }
        }
      }).$mount(el);

      // should not apply transition on initial render by default
      expect(vm.$el.innerHTML).toBe('<div class="test">foo</div>');
      vm.ok = false;
      waitForUpdate(function () {
        expect(vm.$el.children[0].className).toBe('test test-leave test-leave-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-leave-active test-leave-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children.length).toBe(0);
        vm.ok = true;
      }).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-enter test-enter-active');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test test-enter-active test-enter-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children[0].className).toBe('test');
      }).then(done);
    });

    it('warn when used on multiple elements', function () {
      new _vue2.default({
        template: '<transition><p>1</p><p>2</p></transition>'
      }).$mount();
      expect('<transition> can only be used on a single element').toHaveBeenWarned();
    });

    describe('explicit durations -', function () {
      it('single value', function (done) {
        var vm = new _vue2.default({
          template: '\n            <div>\n              <transition duration="' + explicitDuration + '">\n                <div v-if="ok" class="test">foo</div>\n              </transition>\n            </div>\n          ',
          data: { ok: true }
        }).$mount(el);

        vm.ok = false;

        waitForUpdate(function () {
          expect(vm.$el.children[0].className).toBe('test v-leave v-leave-active');
        }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
          expect(vm.$el.children[0].className).toBe('test v-leave-active v-leave-to');
        }).thenWaitFor(explicitDuration + buffer).then(function () {
          expect(vm.$el.children.length).toBe(0);
          vm.ok = true;
        }).then(function () {
          expect(vm.$el.children[0].className).toBe('test v-enter v-enter-active');
        }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
          expect(vm.$el.children[0].className).toBe('test v-enter-active v-enter-to');
        }).thenWaitFor(explicitDuration + buffer).then(function () {
          expect(vm.$el.children[0].className).toBe('test');
        }).then(done);
      });

      it('enter and auto leave', function (done) {
        var vm = new _vue2.default({
          template: '\n            <div>\n              <transition :duration="{ enter: ' + explicitDuration + ' }">\n                <div v-if="ok" class="test">foo</div>\n              </transition>\n            </div>\n          ',
          data: { ok: true }
        }).$mount(el);

        vm.ok = false;

        waitForUpdate(function () {
          expect(vm.$el.children[0].className).toBe('test v-leave v-leave-active');
        }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
          expect(vm.$el.children[0].className).toBe('test v-leave-active v-leave-to');
        }).thenWaitFor(duration + buffer).then(function () {
          expect(vm.$el.children.length).toBe(0);
          vm.ok = true;
        }).then(function () {
          expect(vm.$el.children[0].className).toBe('test v-enter v-enter-active');
        }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
          expect(vm.$el.children[0].className).toBe('test v-enter-active v-enter-to');
        }).thenWaitFor(explicitDuration + buffer).then(function () {
          expect(vm.$el.children[0].className).toBe('test');
        }).then(done);
      });

      it('leave and auto enter', function (done) {
        var vm = new _vue2.default({
          template: '\n            <div>\n              <transition :duration="{ leave: ' + explicitDuration + ' }">\n                <div v-if="ok" class="test">foo</div>\n              </transition>\n            </div>\n          ',
          data: { ok: true }
        }).$mount(el);

        vm.ok = false;

        waitForUpdate(function () {
          expect(vm.$el.children[0].className).toBe('test v-leave v-leave-active');
        }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
          expect(vm.$el.children[0].className).toBe('test v-leave-active v-leave-to');
        }).thenWaitFor(explicitDuration + buffer).then(function () {
          expect(vm.$el.children.length).toBe(0);
          vm.ok = true;
        }).then(function () {
          expect(vm.$el.children[0].className).toBe('test v-enter v-enter-active');
        }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
          expect(vm.$el.children[0].className).toBe('test v-enter-active v-enter-to');
        }).thenWaitFor(duration + buffer).then(function () {
          expect(vm.$el.children[0].className).toBe('test');
        }).then(done);
      });

      it('separate enter and leave', function (done) {
        var enter = explicitDuration;
        var leave = explicitDuration * 2;

        var vm = new _vue2.default({
          template: '\n            <div>\n              <transition :duration="{ enter: ' + enter + ', leave: ' + leave + ' }">\n                <div v-if="ok" class="test">foo</div>\n              </transition>\n            </div>\n          ',
          data: { ok: true }
        }).$mount(el);

        vm.ok = false;

        waitForUpdate(function () {
          expect(vm.$el.children[0].className).toBe('test v-leave v-leave-active');
        }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
          expect(vm.$el.children[0].className).toBe('test v-leave-active v-leave-to');
        }).thenWaitFor(leave + buffer).then(function () {
          expect(vm.$el.children.length).toBe(0);
          vm.ok = true;
        }).then(function () {
          expect(vm.$el.children[0].className).toBe('test v-enter v-enter-active');
        }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
          expect(vm.$el.children[0].className).toBe('test v-enter-active v-enter-to');
        }).thenWaitFor(enter + buffer).then(function () {
          expect(vm.$el.children[0].className).toBe('test');
        }).then(done);
      });

      it('enter and leave + duration change', function (done) {
        var enter1 = explicitDuration * 2;
        var enter2 = explicitDuration;
        var leave1 = explicitDuration * 0.5;
        var leave2 = explicitDuration * 3;

        var vm = new _vue2.default({
          template: '\n            <div>\n              <transition :duration="{ enter: enter, leave: leave }">\n                <div v-if="ok" class="test">foo</div>\n              </transition>\n            </div>\n          ',
          data: {
            ok: true,
            enter: enter1,
            leave: leave1
          }
        }).$mount(el);

        vm.ok = false;

        waitForUpdate(function () {
          expect(vm.$el.children[0].className).toBe('test v-leave v-leave-active');
        }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
          expect(vm.$el.children[0].className).toBe('test v-leave-active v-leave-to');
        }).thenWaitFor(leave1 + buffer).then(function () {
          expect(vm.$el.children.length).toBe(0);
          vm.ok = true;
        }).then(function () {
          expect(vm.$el.children[0].className).toBe('test v-enter v-enter-active');
        }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
          expect(vm.$el.children[0].className).toBe('test v-enter-active v-enter-to');
        }).thenWaitFor(enter1 + buffer).then(function () {
          expect(vm.$el.children[0].className).toBe('test');
          vm.enter = enter2;
          vm.leave = leave2;
        }).then(function () {
          vm.ok = false;
        }).then(function () {
          expect(vm.$el.children[0].className).toBe('test v-leave v-leave-active');
        }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
          expect(vm.$el.children[0].className).toBe('test v-leave-active v-leave-to');
        }).thenWaitFor(leave2 + buffer).then(function () {
          expect(vm.$el.children.length).toBe(0);
          vm.ok = true;
        }).then(function () {
          expect(vm.$el.children[0].className).toBe('test v-enter v-enter-active');
        }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
          expect(vm.$el.children[0].className).toBe('test v-enter-active v-enter-to');
        }).thenWaitFor(enter2 + buffer).then(function () {
          expect(vm.$el.children[0].className).toBe('test');
        }).then(done);
      }, 10000);

      it('warn invalid durations', function (done) {
        var vm = new _vue2.default({
          template: '\n            <div>\n              <transition :duration="{ enter: NaN, leave: \'foo\' }">\n                <div v-if="ok" class="test">foo</div>\n              </transition>\n            </div>\n          ',
          data: {
            ok: true
          }
        }).$mount(el);

        vm.ok = false;
        waitForUpdate(function () {
          expect('<transition> explicit leave duration is not a valid number - got "foo"').toHaveBeenWarned();
        }).thenWaitFor(duration + buffer).then(function () {
          vm.ok = true;
        }).then(function () {
          expect('<transition> explicit enter duration is NaN').toHaveBeenWarned();
        }).then(done);
      });
    });

    // #6687
    it('transition on child components with empty root node', function (done) {
      var vm = new _vue2.default({
        template: '\n          <div>\n            <transition mode="out-in">\n              <component class="test" :is="view"></component>\n            </transition>\n          </div>\n        ',
        data: { view: 'one' },
        components: {
          'one': {
            template: '<div v-if="false">one</div>'
          },
          'two': {
            template: '<div>two</div>'
          }
        }
      }).$mount(el);

      // should not apply transition on initial render by default
      expect(vm.$el.innerHTML).toBe('<!---->');
      vm.view = 'two';
      waitForUpdate(function () {
        expect(vm.$el.innerHTML).toBe('<div class="test v-enter v-enter-active">two</div>');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test v-enter-active v-enter-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.children[0].className).toBe('test');
        vm.view = 'one';
      }).then(function () {
        // incoming comment node is appended instantly because it doesn't have
        // data and therefore doesn't go through the transition module.
        expect(vm.$el.innerHTML).toBe('<div class="test v-leave v-leave-active">two</div><!---->');
      }).thenWaitFor(_transitionUtil.nextFrame).then(function () {
        expect(vm.$el.children[0].className).toBe('test v-leave-active v-leave-to');
      }).thenWaitFor(duration + buffer).then(function () {
        expect(vm.$el.innerHTML).toBe('<!---->');
      }).then(done);
    });
  });
}

