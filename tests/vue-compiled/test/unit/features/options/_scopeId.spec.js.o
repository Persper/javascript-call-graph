'use strict';

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Options _scopeId', function () {
  it('should add scopeId attributes', function () {
    var vm = new _vue2.default({
      _scopeId: 'foo',
      template: '<div><p><span></span></p></div>'
    }).$mount();
    expect(vm.$el.hasAttribute('foo')).toBe(true);
    expect(vm.$el.children[0].hasAttribute('foo')).toBe(true);
    expect(vm.$el.children[0].children[0].hasAttribute('foo')).toBe(true);
  });

  it('should add scopedId attributes from both parent and child on child root', function () {
    var vm = new _vue2.default({
      _scopeId: 'foo',
      template: '<div><child></child></div>',
      components: {
        child: {
          _scopeId: 'bar',
          template: '<div></div>'
        }
      }
    }).$mount();
    expect(vm.$el.children[0].hasAttribute('foo')).toBe(true);
    expect(vm.$el.children[0].hasAttribute('bar')).toBe(true);
  });

  it('should add scopedId attributes from both parent and child on slot contents', function () {
    var vm = new _vue2.default({
      _scopeId: 'foo',
      template: '<div><child><p>hi</p></child></div>',
      components: {
        child: {
          _scopeId: 'bar',
          template: '<div><slot></slot></div>'
        }
      }
    }).$mount();
    expect(vm.$el.children[0].children[0].hasAttribute('foo')).toBe(true);
    expect(vm.$el.children[0].children[0].hasAttribute('bar')).toBe(true);
  });

  // #4774
  it('should not discard parent scopeId when component root element is replaced', function (done) {
    var vm = new _vue2.default({
      _scopeId: 'data-1',
      template: '<div><child ref="child" /></div>',
      components: {
        child: {
          _scopeId: 'data-2',
          data: function data() {
            return { show: true };
          },
          template: '<div v-if="show"></div>'
        }
      }
    }).$mount();

    var child = vm.$refs.child;

    expect(child.$el.hasAttribute('data-1')).toBe(true);
    expect(child.$el.hasAttribute('data-2')).toBe(true);

    child.show = false;
    waitForUpdate(function () {
      child.show = true;
    }).then(function () {
      expect(child.$el.hasAttribute('data-1')).toBe(true);
      expect(child.$el.hasAttribute('data-2')).toBe(true);
    }).then(done);
  });

  it('should work on functional components', function () {
    var child = {
      functional: true,
      _scopeId: 'child',
      render: function render(h) {
        return h('div', { class: 'child' }, [h('span', { class: 'child' }, 'child')]);
      }
    };
    var vm = new _vue2.default({
      _scopeId: 'parent',
      components: { child: child },
      template: '<div><child></child></div>'
    }).$mount();

    expect(vm.$el.hasAttribute('parent')).toBe(true);
    var childEls = vm.$el.querySelectorAll('.child');[].forEach.call(childEls, function (el) {
      expect(el.hasAttribute('child')).toBe(true);
      // functional component with scopeId will not inherit parent scopeId
      expect(el.hasAttribute('parent')).toBe(false);
    });
  });
});

