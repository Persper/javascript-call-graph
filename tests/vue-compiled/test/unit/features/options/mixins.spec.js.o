'use strict';

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

var _index = require('core/util/index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Options mixins', function () {
  it('vm should have options from mixin', function () {
    var mixin = {
      directives: {
        c: {}
      },
      methods: {
        a: function a() {}
      }
    };

    var vm = new _vue2.default({
      mixins: [mixin],
      methods: {
        b: function b() {}
      }
    });

    expect(vm.a).toBeDefined();
    expect(vm.b).toBeDefined();
    expect(vm.$options.directives.c).toBeDefined();
  });

  it('should call hooks from mixins first', function () {
    var a = {};
    var b = {};
    var c = {};
    var f1 = function f1() {};
    var f2 = function f2() {};
    var f3 = function f3() {};
    var mixinA = {
      a: 1,
      template: 'foo',
      directives: {
        a: a
      },
      created: f1
    };
    var mixinB = {
      b: 1,
      directives: {
        b: b
      },
      created: f2
    };
    var result = (0, _index.mergeOptions)({}, {
      directives: {
        c: c
      },
      template: 'bar',
      mixins: [mixinA, mixinB],
      created: f3
    });
    expect(result.a).toBe(1);
    expect(result.b).toBe(1);
    expect(result.directives.a).toBe(a);
    expect(result.directives.b).toBe(b);
    expect(result.directives.c).toBe(c);
    expect(result.created[0]).toBe(f1);
    expect(result.created[1]).toBe(f2);
    expect(result.created[2]).toBe(f3);
    expect(result.template).toBe('bar');
  });

  it('mixin methods should not override defined method', function () {
    var f1 = function f1() {};
    var f2 = function f2() {};
    var f3 = function f3() {};
    var mixinA = {
      methods: {
        xyz: f1
      }
    };
    var mixinB = {
      methods: {
        xyz: f2
      }
    };
    var result = (0, _index.mergeOptions)({}, {
      mixins: [mixinA, mixinB],
      methods: {
        xyz: f3
      }
    });
    expect(result.methods.xyz).toBe(f3);
  });

  it('should accept constructors as mixins', function () {
    var mixin = _vue2.default.extend({
      directives: {
        c: {}
      },
      methods: {
        a: function a() {}
      }
    });

    var vm = new _vue2.default({
      mixins: [mixin],
      methods: {
        b: function b() {}
      }
    });

    expect(vm.a).toBeDefined();
    expect(vm.b).toBeDefined();
    expect(vm.$options.directives.c).toBeDefined();
  });
});

