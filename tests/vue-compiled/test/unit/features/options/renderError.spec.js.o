'use strict';

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Options renderError', function () {
  it('should be used on render errors', function (done) {
    _vue2.default.config.errorHandler = function () {};
    var vm = new _vue2.default({
      data: {
        ok: true
      },
      render: function render(h) {
        if (this.ok) {
          return h('div', 'ok');
        } else {
          throw new Error('no');
        }
      },
      renderError: function renderError(h, err) {
        return h('div', err.toString());
      }
    }).$mount();
    expect(vm.$el.textContent).toBe('ok');
    vm.ok = false;
    waitForUpdate(function () {
      expect(vm.$el.textContent).toBe('Error: no');
      _vue2.default.config.errorHandler = null;
    }).then(done);
  });

  it('should pass on errors in renderError to global handler', function () {
    var spy = _vue2.default.config.errorHandler = jasmine.createSpy();
    var err = new Error('renderError');
    var vm = new _vue2.default({
      render: function render() {
        throw new Error('render');
      },
      renderError: function renderError() {
        throw err;
      }
    }).$mount();
    expect(spy).toHaveBeenCalledWith(err, vm, 'renderError');
  });
});

