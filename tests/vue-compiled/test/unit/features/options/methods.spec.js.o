'use strict';

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

var _testObjectOption = require('../../../helpers/test-object-option');

var _testObjectOption2 = _interopRequireDefault(_testObjectOption);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Options methods', function () {
  (0, _testObjectOption2.default)('methods');

  it('should have correct context', function () {
    var vm = new _vue2.default({
      data: {
        a: 1
      },
      methods: {
        plus: function plus() {
          this.a++;
        }
      }
    });
    vm.plus();
    expect(vm.a).toBe(2);
  });

  it('should warn undefined methods', function () {
    new _vue2.default({
      methods: {
        hello: undefined
      }
    });
    expect('Method "hello" has an undefined value in the component definition').toHaveBeenWarned();
  });

  it('should warn methods conflicting with data', function () {
    new _vue2.default({
      data: {
        foo: 1
      },
      methods: {
        foo: function foo() {}
      }
    });
    expect('Method "foo" has already been defined as a data property').toHaveBeenWarned();
  });

  it('should warn methods conflicting with internal methods', function () {
    new _vue2.default({
      methods: {
        _update: function _update() {}
      }
    });
    expect('Method "_update" conflicts with an existing Vue instance method').toHaveBeenWarned();
  });
});

