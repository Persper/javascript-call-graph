'use strict';

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Options directives', function () {
  it('basic usage', function (done) {
    var bindSpy = jasmine.createSpy('bind');
    var insertedSpy = jasmine.createSpy('inserted');
    var updateSpy = jasmine.createSpy('update');
    var componentUpdatedSpy = jasmine.createSpy('componentUpdated');
    var unbindSpy = jasmine.createSpy('unbind');

    var assertContext = function assertContext(el, binding, vnode) {
      expect(vnode.context).toBe(vm);
      expect(binding.arg).toBe('arg');
      expect(binding.modifiers).toEqual({ hello: true });
    };

    var vm = new _vue2.default({
      template: '<div class="hi"><div v-if="ok" v-test:arg.hello="a">{{ msg }}</div></div>',
      data: {
        msg: 'hi',
        a: 'foo',
        ok: true
      },
      directives: {
        test: {
          bind: function bind(el, binding, vnode) {
            bindSpy();
            assertContext(el, binding, vnode);
            expect(binding.value).toBe('foo');
            expect(binding.expression).toBe('a');
            expect(binding.oldValue).toBeUndefined();
            expect(el.parentNode).toBeNull();
          },
          inserted: function inserted(el, binding, vnode) {
            insertedSpy();
            assertContext(el, binding, vnode);
            expect(binding.value).toBe('foo');
            expect(binding.expression).toBe('a');
            expect(binding.oldValue).toBeUndefined();
            expect(el.parentNode.className).toBe('hi');
          },
          update: function update(el, binding, vnode, oldVnode) {
            updateSpy();
            assertContext(el, binding, vnode);
            expect(el).toBe(vm.$el.children[0]);
            expect(oldVnode).not.toBe(vnode);
            expect(binding.expression).toBe('a');
            if (binding.value !== binding.oldValue) {
              expect(binding.value).toBe('bar');
              expect(binding.oldValue).toBe('foo');
            }
          },
          componentUpdated: function componentUpdated(el, binding, vnode) {
            componentUpdatedSpy();
            assertContext(el, binding, vnode);
          },
          unbind: function unbind(el, binding, vnode) {
            unbindSpy();
            assertContext(el, binding, vnode);
          }
        }
      }
    });

    vm.$mount();
    expect(bindSpy).toHaveBeenCalled();
    expect(insertedSpy).toHaveBeenCalled();
    expect(updateSpy).not.toHaveBeenCalled();
    expect(componentUpdatedSpy).not.toHaveBeenCalled();
    expect(unbindSpy).not.toHaveBeenCalled();
    vm.a = 'bar';
    waitForUpdate(function () {
      expect(updateSpy).toHaveBeenCalled();
      expect(componentUpdatedSpy).toHaveBeenCalled();
      expect(unbindSpy).not.toHaveBeenCalled();
      vm.msg = 'bye';
    }).then(function () {
      expect(componentUpdatedSpy.calls.count()).toBe(2);
      vm.ok = false;
    }).then(function () {
      expect(unbindSpy).toHaveBeenCalled();
    }).then(done);
  });

  it('function shorthand', function (done) {
    var spy = jasmine.createSpy('directive');
    var vm = new _vue2.default({
      template: '<div v-test:arg.hello="a"></div>',
      data: { a: 'foo' },
      directives: {
        test: function test(el, binding, vnode) {
          expect(vnode.context).toBe(vm);
          expect(binding.arg).toBe('arg');
          expect(binding.modifiers).toEqual({ hello: true });
          spy(binding.value, binding.oldValue);
        }
      }
    });
    vm.$mount();
    expect(spy).toHaveBeenCalledWith('foo', undefined);
    vm.a = 'bar';
    waitForUpdate(function () {
      expect(spy).toHaveBeenCalledWith('bar', 'foo');
    }).then(done);
  });

  it('function shorthand (global)', function (done) {
    var spy = jasmine.createSpy('directive');
    _vue2.default.directive('test', function (el, binding, vnode) {
      expect(vnode.context).toBe(vm);
      expect(binding.arg).toBe('arg');
      expect(binding.modifiers).toEqual({ hello: true });
      spy(binding.value, binding.oldValue);
    });
    var vm = new _vue2.default({
      template: '<div v-test:arg.hello="a"></div>',
      data: { a: 'foo' }
    });
    vm.$mount();
    expect(spy).toHaveBeenCalledWith('foo', undefined);
    vm.a = 'bar';
    waitForUpdate(function () {
      expect(spy).toHaveBeenCalledWith('bar', 'foo');
      delete _vue2.default.options.directives.test;
    }).then(done);
  });

  it('should teardown directives on old vnodes when new vnodes have none', function (done) {
    var vm = new _vue2.default({
      data: {
        ok: true
      },
      template: '\n        <div>\n          <div v-if="ok" v-test>a</div>\n          <div v-else class="b">b</div>\n        </div>\n      ',
      directives: {
        test: {
          bind: function bind(el) {
            el.id = 'a';
          },
          unbind: function unbind(el) {
            el.id = '';
          }
        }
      }
    }).$mount();
    expect(vm.$el.children[0].id).toBe('a');
    vm.ok = false;
    waitForUpdate(function () {
      expect(vm.$el.children[0].id).toBe('');
      expect(vm.$el.children[0].className).toBe('b');
    }).then(done);
  });

  it('should properly handle same node with different directive sets', function (done) {
    var spies = {};
    var createSpy = function createSpy(name) {
      return spies[name] = jasmine.createSpy(name);
    };
    var vm = new _vue2.default({
      data: {
        ok: true,
        val: 123
      },
      template: '\n        <div>\n          <div v-if="ok" v-test="val" v-test.hi="val"></div>\n          <div v-if="!ok" v-test.hi="val" v-test2="val"></div>\n        </div>\n      ',
      directives: {
        test: {
          bind: createSpy('bind1'),
          inserted: createSpy('inserted1'),
          update: createSpy('update1'),
          componentUpdated: createSpy('componentUpdated1'),
          unbind: createSpy('unbind1')
        },
        test2: {
          bind: createSpy('bind2'),
          inserted: createSpy('inserted2'),
          update: createSpy('update2'),
          componentUpdated: createSpy('componentUpdated2'),
          unbind: createSpy('unbind2')
        }
      }
    }).$mount();

    expect(spies.bind1.calls.count()).toBe(2);
    expect(spies.inserted1.calls.count()).toBe(2);
    expect(spies.bind2.calls.count()).toBe(0);
    expect(spies.inserted2.calls.count()).toBe(0);

    vm.ok = false;
    waitForUpdate(function () {
      // v-test with modifier should be updated
      expect(spies.update1.calls.count()).toBe(1);
      expect(spies.componentUpdated1.calls.count()).toBe(1);

      // v-test without modifier should be unbound
      expect(spies.unbind1.calls.count()).toBe(1);

      // v-test2 should be bound
      expect(spies.bind2.calls.count()).toBe(1);
      expect(spies.inserted2.calls.count()).toBe(1);

      vm.ok = true;
    }).then(function () {
      // v-test without modifier should be bound again
      expect(spies.bind1.calls.count()).toBe(3);
      expect(spies.inserted1.calls.count()).toBe(3);

      // v-test2 should be unbound
      expect(spies.unbind2.calls.count()).toBe(1);

      // v-test with modifier should be updated again
      expect(spies.update1.calls.count()).toBe(2);
      expect(spies.componentUpdated1.calls.count()).toBe(2);

      vm.val = 234;
    }).then(function () {
      expect(spies.update1.calls.count()).toBe(4);
      expect(spies.componentUpdated1.calls.count()).toBe(4);
    }).then(done);
  });

  it('warn non-existent', function () {
    new _vue2.default({
      template: '<div v-test></div>'
    }).$mount();
    expect('Failed to resolve directive: test').toHaveBeenWarned();
  });

  // #6513
  it('should invoke unbind & inserted on inner component root element change', function (done) {
    var dir = {
      bind: jasmine.createSpy('bind'),
      inserted: jasmine.createSpy('inserted'),
      unbind: jasmine.createSpy('unbind')
    };

    var Child = {
      template: '<div v-if="ok"/><span v-else/>',
      data: function data() {
        return { ok: true };
      }
    };

    var vm = new _vue2.default({
      template: '<child ref="child" v-test />',
      directives: { test: dir },
      components: { Child: Child }
    }).$mount();

    var oldEl = vm.$el;
    expect(dir.bind.calls.count()).toBe(1);
    expect(dir.bind.calls.argsFor(0)[0]).toBe(oldEl);
    expect(dir.inserted.calls.count()).toBe(1);
    expect(dir.inserted.calls.argsFor(0)[0]).toBe(oldEl);
    expect(dir.unbind).not.toHaveBeenCalled();

    vm.$refs.child.ok = false;
    waitForUpdate(function () {
      expect(vm.$el.tagName).toBe('SPAN');
      expect(dir.bind.calls.count()).toBe(2);
      expect(dir.bind.calls.argsFor(1)[0]).toBe(vm.$el);
      expect(dir.inserted.calls.count()).toBe(2);
      expect(dir.inserted.calls.argsFor(1)[0]).toBe(vm.$el);
      expect(dir.unbind.calls.count()).toBe(1);
      expect(dir.unbind.calls.argsFor(0)[0]).toBe(oldEl);
    }).then(done);
  });
});

