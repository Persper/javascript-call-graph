'use strict';

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

var _testObjectOption = require('../../../helpers/test-object-option');

var _testObjectOption2 = _interopRequireDefault(_testObjectOption);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Options watch', function () {
  var spy = void 0;
  beforeEach(function () {
    spy = jasmine.createSpy('watch');
  });

  (0, _testObjectOption2.default)('watch');

  it('basic usage', function (done) {
    var vm = new _vue2.default({
      data: {
        a: 1
      },
      watch: {
        a: spy
      }
    });
    expect(spy).not.toHaveBeenCalled();
    vm.a = 2;
    expect(spy).not.toHaveBeenCalled();
    waitForUpdate(function () {
      expect(spy).toHaveBeenCalledWith(2, 1);
    }).then(done);
  });

  it('string method name', function (done) {
    var vm = new _vue2.default({
      data: {
        a: 1
      },
      watch: {
        a: 'onChange'
      },
      methods: {
        onChange: spy
      }
    });
    expect(spy).not.toHaveBeenCalled();
    vm.a = 2;
    expect(spy).not.toHaveBeenCalled();
    waitForUpdate(function () {
      expect(spy).toHaveBeenCalledWith(2, 1);
    }).then(done);
  });

  it('multiple cbs (after option merge)', function (done) {
    var spy1 = jasmine.createSpy('watch');
    var Test = _vue2.default.extend({
      watch: {
        a: spy1
      }
    });
    var vm = new Test({
      data: { a: 1 },
      watch: {
        a: spy
      }
    });
    vm.a = 2;
    waitForUpdate(function () {
      expect(spy1).toHaveBeenCalledWith(2, 1);
      expect(spy).toHaveBeenCalledWith(2, 1);
    }).then(done);
  });

  it('with option: immediate', function (done) {
    var vm = new _vue2.default({
      data: { a: 1 },
      watch: {
        a: {
          handler: spy,
          immediate: true
        }
      }
    });
    expect(spy).toHaveBeenCalledWith(1);
    vm.a = 2;
    waitForUpdate(function () {
      expect(spy).toHaveBeenCalledWith(2, 1);
    }).then(done);
  });

  it('with option: deep', function (done) {
    var vm = new _vue2.default({
      data: { a: { b: 1 } },
      watch: {
        a: {
          handler: spy,
          deep: true
        }
      }
    });
    var oldA = vm.a;
    expect(spy).not.toHaveBeenCalled();
    vm.a.b = 2;
    expect(spy).not.toHaveBeenCalled();
    waitForUpdate(function () {
      expect(spy).toHaveBeenCalledWith(vm.a, vm.a);
      vm.a = { b: 3 };
    }).then(function () {
      expect(spy).toHaveBeenCalledWith(vm.a, oldA);
    }).then(done);
  });

  it('correctly merges multiple extends', function (done) {
    var spy2 = jasmine.createSpy('A');
    var spy3 = jasmine.createSpy('B');
    var A = _vue2.default.extend({
      data: function data() {
        return {
          a: 0,
          b: 0
        };
      },
      watch: {
        b: spy
      }
    });

    var B = _vue2.default.extend({
      extends: A,
      watch: {
        a: spy2
      }
    });

    var C = _vue2.default.extend({
      extends: B,
      watch: {
        a: spy3
      }
    });

    var vm = new C();
    vm.a = 1;

    waitForUpdate(function () {
      expect(spy).not.toHaveBeenCalled();
      expect(spy2).toHaveBeenCalledWith(1, 0);
      expect(spy3).toHaveBeenCalledWith(1, 0);
    }).then(done);
  });
});

