'use strict';

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('ref', function () {
  var components = {
    test: {
      id: 'test',
      template: '<div>test</div>'
    },
    test2: {
      id: 'test2',
      template: '<div>test2</div>'
    },
    test3: {
      id: 'test3',
      template: '<div>test3</div>'
    }
  };

  it('should work', function () {
    var vm = new _vue2.default({
      data: {
        value: 'bar'
      },
      template: '<div>\n        <test ref="foo"></test>\n        <test2 :ref="value"></test2>\n        <test3 :ref="0"></test3>\n      </div>',
      components: components
    });
    vm.$mount();
    expect(vm.$refs.foo).toBeTruthy();
    expect(vm.$refs.foo.$options.id).toBe('test');
    expect(vm.$refs.bar).toBeTruthy();
    expect(vm.$refs.bar.$options.id).toBe('test2');
    expect(vm.$refs['0']).toBeTruthy();
    expect(vm.$refs['0'].$options.id).toBe('test3');
  });

  it('should dynamically update refs', function (done) {
    var vm = new _vue2.default({
      data: {
        value: 'foo'
      },
      template: '<div :ref="value"></div>'
    }).$mount();
    expect(vm.$refs.foo).toBe(vm.$el);
    vm.value = 'bar';
    waitForUpdate(function () {
      expect(vm.$refs.foo).toBeUndefined();
      expect(vm.$refs.bar).toBe(vm.$el);
    }).then(done);
  });

  it('should work as a hyperscript prop', function () {
    var vm = new _vue2.default({
      components: components,
      render: function render(h) {
        return h('div', null, [h('test', { ref: 'test' })]);
      }
    });
    vm.$mount();
    expect(vm.$refs.test).toBeTruthy();
    expect(vm.$refs.test.$options.id).toBe('test');
  });

  it('should accept HOC component', function () {
    var vm = new _vue2.default({
      template: '<test ref="test"></test>',
      components: components
    });
    vm.$mount();
    expect(vm.$refs.test).toBeTruthy();
    expect(vm.$refs.test.$options.id).toBe('test');
  });

  it('should accept dynamic component', function (done) {
    var vm = new _vue2.default({
      template: '<div>\n        <component :is="test" ref="test"></component>\n      </div>',
      components: components,
      data: { test: 'test' }
    });
    vm.$mount();
    expect(vm.$refs.test.$options.id).toBe('test');
    vm.test = 'test2';
    waitForUpdate(function () {
      expect(vm.$refs.test.$options.id).toBe('test2');
      vm.test = '';
    }).then(function () {
      expect(vm.$refs.test).toBeUndefined();
    }).then(done);
  });

  it('should register as Array when used with v-for', function (done) {
    var vm = new _vue2.default({
      data: {
        items: [1, 2, 3]
      },
      template: '\n        <div>\n          <div v-for="n in items" ref="list">{{n}}</div>\n        </div>\n      '
    }).$mount();
    assertRefs();
    // updating
    vm.items.push(4);
    waitForUpdate(assertRefs).then(function () {
      vm.items = [];
    }).then(assertRefs).then(done);

    function assertRefs() {
      expect(Array.isArray(vm.$refs.list)).toBe(true);
      expect(vm.$refs.list.length).toBe(vm.items.length);
      expect(vm.$refs.list.every(function (item, i) {
        return item.textContent === String(i + 1);
      })).toBe(true);
    }
  });

  it('should register as Array when used with v-for (components)', function (done) {
    var vm = new _vue2.default({
      data: {
        items: [1, 2, 3]
      },
      template: '\n        <div>\n          <test v-for="n in items" ref="list" :key="n" :n="n"></test>\n        </div>\n      ',
      components: {
        test: {
          props: ['n'],
          template: '<div>{{ n }}</div>'
        }
      }
    }).$mount();
    assertRefs();
    // updating
    vm.items.push(4);
    waitForUpdate(assertRefs).then(function () {
      vm.items = [];
    }).then(assertRefs).then(done);

    function assertRefs() {
      expect(Array.isArray(vm.$refs.list)).toBe(true);
      expect(vm.$refs.list.length).toBe(vm.items.length);
      expect(vm.$refs.list.every(function (comp, i) {
        return comp.$el.textContent === String(i + 1);
      })).toBe(true);
    }
  });

  it('should work with v-for on dynamic component', function (done) {
    components.test3 = {
      id: 'test3',
      template: '<test1 v-if="!normal"></test1><div v-else>test3</div>',
      data: function data() {
        return { normal: false };
      },

      components: { test1: components.test }
      // a flag that representing whether to test component content or not
    };var testContent = false;

    var vm = new _vue2.default({
      template: '\n        <div>\n          <component\n            v-for="(item, index) in items"\n            :key="index"\n            :is="item"\n            ref="children">\n          </component>\n        </div>\n      ',
      data: {
        items: ['test2', 'test3']
      },
      components: components
    }).$mount();
    assertRefs();
    expect(vm.$refs.children[0].$el.textContent).toBe('test2');
    expect(vm.$refs.children[1].$el.textContent).toBe('test');
    // updating
    vm.$refs.children[1].normal = true;
    testContent = true;
    waitForUpdate(assertRefs).then(function () {
      vm.items.push('test');
    }).then(assertRefs).then(done);

    function assertRefs() {
      expect(Array.isArray(vm.$refs.children)).toBe(true);
      expect(vm.$refs.children.length).toBe(vm.items.length);
      if (testContent) {
        expect(vm.$refs.children.every(function (comp, i) {
          return comp.$el.textContent === vm.items[i];
        })).toBe(true);
      }
    }
  });

  it('should register on component with empty roots', function (done) {
    var vm = new _vue2.default({
      template: '<child ref="test"></child>',
      components: {
        child: {
          template: '<div v-if="show"></div>',
          data: function data() {
            return { show: false };
          }
        }
      }
    }).$mount();
    expect(vm.$refs.test).toBe(vm.$children[0]);
    vm.$refs.test.show = true;
    waitForUpdate(function () {
      expect(vm.$refs.test).toBe(vm.$children[0]);
      vm.$refs.test.show = false;
    }).then(function () {
      expect(vm.$refs.test).toBe(vm.$children[0]);
    }).then(done);
  });
});

