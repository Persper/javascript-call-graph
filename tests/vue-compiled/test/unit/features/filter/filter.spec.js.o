'use strict';

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

var _filterParser = require('compiler/parser/filter-parser');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Filters', function () {
  it('basic usage', function () {
    var vm = new _vue2.default({
      template: '<div>{{ msg | upper }}</div>',
      data: {
        msg: 'hi'
      },
      filters: {
        upper: function upper(v) {
          return v.toUpperCase();
        }
      }
    }).$mount();
    expect(vm.$el.textContent).toBe('HI');
  });

  it('chained usage', function () {
    var vm = new _vue2.default({
      template: '<div>{{ msg | upper | reverse }}</div>',
      data: {
        msg: 'hi'
      },
      filters: {
        upper: function upper(v) {
          return v.toUpperCase();
        },
        reverse: function reverse(v) {
          return v.split('').reverse().join('');
        }
      }
    }).$mount();
    expect(vm.$el.textContent).toBe('IH');
  });

  it('in v-bind', function () {
    var vm = new _vue2.default({
      template: '\n        <div\n          v-bind:id="id | upper | reverse"\n          :class="cls | reverse"\n          :ref="ref | lower">\n        </div>\n      ',
      filters: {
        upper: function upper(v) {
          return v.toUpperCase();
        },
        reverse: function reverse(v) {
          return v.split('').reverse().join('');
        },
        lower: function lower(v) {
          return v.toLowerCase();
        }
      },
      data: {
        id: 'abc',
        cls: 'foo',
        ref: 'BAR'
      }
    }).$mount();
    expect(vm.$el.id).toBe('CBA');
    expect(vm.$el.className).toBe('oof');
    expect(vm.$refs.bar).toBe(vm.$el);
  });

  it('handle regex with pipe', function () {
    var vm = new _vue2.default({
      template: '<test ref="test" :pattern="/a|b\\// | identity"></test>',
      filters: { identity: function identity(v) {
          return v;
        } },
      components: {
        test: {
          props: ['pattern'],
          template: '<div></div>'
        }
      }
    }).$mount();
    expect(vm.$refs.test.pattern instanceof RegExp).toBe(true);
    expect(vm.$refs.test.pattern.toString()).toBe('/a|b\\//');
  });

  it('handle division', function () {
    var vm = new _vue2.default({
      data: { a: 2 },
      template: '<div>{{ 1/a / 4 | double }}</div>',
      filters: { double: function double(v) {
          return v * 2;
        } }
    }).$mount();
    expect(vm.$el.textContent).toBe(String(1 / 4));
  });

  it('handle division with parenthesis', function () {
    var vm = new _vue2.default({
      data: { a: 20 },
      template: '<div>{{ (a*2) / 5 | double }}</div>',
      filters: { double: function double(v) {
          return v * 2;
        } }
    }).$mount();
    expect(vm.$el.textContent).toBe(String(16));
  });

  it('handle division with dot', function () {
    var vm = new _vue2.default({
      template: '<div>{{ 20. / 5 | double }}</div>',
      filters: { double: function double(v) {
          return v * 2;
        } }
    }).$mount();
    expect(vm.$el.textContent).toBe(String(8));
  });

  it('handle division with array values', function () {
    var vm = new _vue2.default({
      data: { a: [20] },
      template: '<div>{{ a[0] / 5 | double }}</div>',
      filters: { double: function double(v) {
          return v * 2;
        } }
    }).$mount();
    expect(vm.$el.textContent).toBe(String(8));
  });

  it('handle division with hash values', function () {
    var vm = new _vue2.default({
      data: { a: { n: 20 } },
      template: '<div>{{ a[\'n\'] / 5 | double }}</div>',
      filters: { double: function double(v) {
          return v * 2;
        } }
    }).$mount();
    expect(vm.$el.textContent).toBe(String(8));
  });

  it('handle division with variable_', function () {
    var vm = new _vue2.default({
      data: { a_: 8 },
      template: '<div>{{ a_ / 2 | double }}</div>',
      filters: { double: function double(v) {
          return v * 2;
        } }
    }).$mount();
    expect(vm.$el.textContent).toBe(String(8));
  });

  it('arguments', function () {
    var vm = new _vue2.default({
      template: '<div>{{ msg | add(a, 3) }}</div>',
      data: {
        msg: 1,
        a: 2
      },
      filters: {
        add: function add(v, arg1, arg2) {
          return v + arg1 + arg2;
        }
      }
    }).$mount();
    expect(vm.$el.textContent).toBe('6');
  });

  it('quotes', function () {
    var vm = new _vue2.default({
      template: '<div>{{ msg + "b | c" + \'d\' | upper }}</div>',
      data: {
        msg: 'a'
      },
      filters: {
        upper: function upper(v) {
          return v.toUpperCase();
        }
      }
    }).$mount();
    expect(vm.$el.textContent).toBe('AB | CD');
  });

  it('double pipe', function () {
    var vm = new _vue2.default({
      template: '<div>{{ b || msg | upper }}</div>',
      data: {
        b: false,
        msg: 'a'
      },
      filters: {
        upper: function upper(v) {
          return v.toUpperCase();
        }
      }
    }).$mount();
    expect(vm.$el.textContent).toBe('A');
  });

  it('object literal', function () {
    var vm = new _vue2.default({
      template: '<div>{{ { a: 123 } | pick(\'a\') }}</div>',
      filters: {
        pick: function pick(v, key) {
          return v[key];
        }
      }
    }).$mount();
    expect(vm.$el.textContent).toBe('123');
  });

  it('array literal', function () {
    var vm = new _vue2.default({
      template: '<div>{{ [1, 2, 3] | reverse }}</div>',
      filters: {
        reverse: function reverse(arr) {
          return arr.reverse().join(',');
        }
      }
    }).$mount();
    expect(vm.$el.textContent).toBe('3,2,1');
  });

  it('warn non-existent', function () {
    new _vue2.default({
      template: '<div>{{ msg | upper }}</div>',
      data: { msg: 'foo' }
    }).$mount();
    expect('Failed to resolve filter: upper').toHaveBeenWarned();
  });

  it('support template string', function () {
    expect((0, _filterParser.parseFilters)('`a | ${b}c` | d')).toBe('_f("d")(`a | ${b}c`)');
  });
});

