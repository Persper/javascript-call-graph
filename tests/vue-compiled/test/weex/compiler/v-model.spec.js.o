'use strict';

var _weexTemplateCompiler = require('../../../packages/weex-template-compiler');

var _index = require('../helpers/index');

describe('compile v-model', function () {
  it('should compile modelable native component', function () {
    var _compile = (0, _weexTemplateCompiler.compile)('<div><input v-model="x" /></div>'),
        render = _compile.render,
        staticRenderFns = _compile.staticRenderFns,
        errors = _compile.errors;

    expect(render).not.toBeUndefined();
    expect(render).toMatch((0, _index.strToRegExp)('attrs:{"value":(x)}'));
    expect(render).toMatch((0, _index.strToRegExp)('on:{"input":function($event){x=$event.target.attr.value}}'));
    expect(staticRenderFns).toEqual([]);
    expect(errors).toEqual([]);
  });

  it('should compile other component with whole $event as the value', function () {
    var _compile2 = (0, _weexTemplateCompiler.compile)('<div><foo v-model="x" /></div>'),
        render = _compile2.render,
        staticRenderFns = _compile2.staticRenderFns,
        errors = _compile2.errors;

    expect(render).not.toBeUndefined();
    expect(render).toMatch((0, _index.strToRegExp)('model:{value:(x),callback:function ($$v) {x=$$v},expression:"x"}'));
    expect(staticRenderFns).toEqual([]);
    expect(errors).toEqual([]);
  });

  it('should compile with trim modifier for modelable native component', function () {
    var _compile3 = (0, _weexTemplateCompiler.compile)('<div><input v-model.trim="x" /></div>'),
        render = _compile3.render,
        staticRenderFns = _compile3.staticRenderFns,
        errors = _compile3.errors;

    expect(render).not.toBeUndefined();
    expect(render).toMatch((0, _index.strToRegExp)('attrs:{"value":(x)}'));
    expect(render).toMatch((0, _index.strToRegExp)('on:{"input":function($event){x=$event.target.attr.value.trim()}}'));
    expect(staticRenderFns).toEqual([]);
    expect(errors).toEqual([]);
  });

  it('should compile with trim & lazy modifier', function () {
    var _compile4 = (0, _weexTemplateCompiler.compile)('<div><input v-model.trim.lazy="x" /><input v-model.lazy.trim="y" /></div>'),
        render = _compile4.render,
        staticRenderFns = _compile4.staticRenderFns,
        errors = _compile4.errors;

    expect(render).not.toBeUndefined();
    expect(render).toMatch((0, _index.strToRegExp)('attrs:{"value":(x)}'));
    expect(render).toMatch((0, _index.strToRegExp)('attrs:{"value":(y)}'));
    expect(render).toMatch((0, _index.strToRegExp)('on:{"change":function($event){x=$event.target.attr.value.trim()}}'));
    expect(render).toMatch((0, _index.strToRegExp)('on:{"change":function($event){y=$event.target.attr.value.trim()}}'));
    expect(staticRenderFns).toEqual([]);
    expect(errors).toEqual([]);
  });
});

