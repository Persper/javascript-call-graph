'use strict';

var _index = require('../helpers/index');

describe('generate class', function () {
  it('should be generated', function () {
    (0, _index.compileAndExecute)('\n      <div>\n        <text class="a b c">Hello World</text>\n      </div>\n    ', '\n      style: {\n        a: { fontSize: \'100\' },\n        b: { color: \'#ff0000\' },\n        c: { fontWeight: \'bold\' }\n      }\n    ').then(function (instance) {
      expect((0, _index.getRoot)(instance)).toEqual({
        type: 'div',
        children: [{
          type: 'text',
          classList: ['a', 'b', 'c'],
          attr: { value: 'Hello World' }
        }]
      });
    });
  });

  it('should be updated', function (done) {
    (0, _index.compileAndExecute)('\n      <div @click="foo">\n        <text :class="[\'a\', x]">Hello World</text>\n      </div>\n    ', '\n      data: { x: \'b\' },\n      style: {\n        a: { fontSize: \'100\' },\n        b: { color: \'#ff0000\' },\n        c: { fontWeight: \'bold\' },\n        d: {\n          color: \'#0000ff\',\n          fontWeight: \'bold\'\n        }\n      },\n      methods: {\n        foo: function () {\n          this.x = \'d\'\n        }\n      }\n    ').then(function (instance) {
      expect((0, _index.getRoot)(instance)).toEqual({
        type: 'div',
        event: ['click'],
        children: [{
          type: 'text',
          classList: ['a', 'b'],
          attr: { value: 'Hello World' }
        }]
      });
      (0, _index.fireEvent)(instance, '_root', 'click');
      return instance;
    }).then(function (instance) {
      expect((0, _index.getRoot)(instance)).toEqual({
        type: 'div',
        event: ['click'],
        children: [{
          type: 'text',
          classList: ['a', 'd'],
          attr: { value: 'Hello World' }
        }]
      });
      done();
    });
  });

  it('should be applied in order', function (done) {
    (0, _index.compileAndExecute)('\n      <div @click="foo">\n        <text :class="arr">Hello World</text>\n      </div>\n    ', '\n      data: {\n        arr: [\'b\', \'a\']\n      },\n      style: {\n        a: { color: \'#ff0000\' },\n        b: { color: \'#00ff00\' },\n        c: { color: \'#0000ff\' }\n      },\n      methods: {\n        foo: function () {\n          this.arr.push(\'c\')\n        }\n      }\n    ').then(function (instance) {
      expect((0, _index.getRoot)(instance)).toEqual({
        type: 'div',
        event: ['click'],
        children: [{
          type: 'text',
          classList: ['b', 'a'],
          attr: { value: 'Hello World' }
        }]
      });
      (0, _index.fireEvent)(instance, '_root', 'click');
      return instance;
    }).then(function (instance) {
      expect((0, _index.getRoot)(instance)).toEqual({
        type: 'div',
        event: ['click'],
        children: [{
          type: 'text',
          classList: ['b', 'a', 'c'],
          attr: { value: 'Hello World' }
        }]
      });
      done();
    });
  });

  it('should be cleared', function (done) {
    (0, _index.compileAndExecute)('\n      <div @click="foo">\n        <text :class="[\'a\', x]">Hello World</text>\n      </div>\n    ', '\n      data: { x: \'b\' },\n      style: {\n        a: { fontSize: \'100\' },\n        b: { color: \'#ff0000\' },\n        c: { fontWeight: \'bold\' }\n      },\n      methods: {\n        foo: function () {\n          this.x = \'c\'\n        }\n      }\n    ').then(function (instance) {
      expect((0, _index.getRoot)(instance)).toEqual({
        type: 'div',
        event: ['click'],
        children: [{
          type: 'text',
          classList: ['a', 'b'],
          attr: { value: 'Hello World' }
        }]
      });
      (0, _index.fireEvent)(instance, '_root', 'click');
      return instance;
    }).then(function (instance) {
      expect((0, _index.getRoot)(instance)).toEqual({
        type: 'div',
        event: ['click'],
        children: [{
          type: 'text',
          classList: ['a', 'c'],
          attr: { value: 'Hello World' }
        }]
      });
      done();
    });
  });
});

