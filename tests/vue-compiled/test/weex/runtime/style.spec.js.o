'use strict';

var _index = require('../helpers/index');

describe('generate style', function () {
  it('should be generated', function () {
    (0, _index.compileAndExecute)('\n      <div>\n        <text style="font-size: 100">Hello World</text>\n      </div>\n    ').then(function (instance) {
      expect((0, _index.getRoot)(instance)).toEqual({
        type: 'div',
        children: [{
          type: 'text',
          style: { fontSize: '100' },
          attr: { value: 'Hello World' }
        }]
      });
    });
  });

  it('should be generated by array binding', function (done) {
    (0, _index.compileAndExecute)('\n      <div>\n        <text :style="[x, y]" @click="foo">Hello {{z}}</text>\n      </div>\n    ', '\n      data: {\n        x: { fontSize: 100, color: \'#00ff00\' },\n        y: { color: \'#ff0000\', fontWeight: \'bold\' },\n        z: \'World\'\n      },\n      methods: {\n        foo: function () {\n          this.x.fontSize = 200\n          this.x.color = \'#0000ff\'\n          Vue.delete(this.y, \'fontWeight\')\n          this.z = \'Weex\'\n        }\n      }\n    ').then(function (instance) {
      expect((0, _index.getRoot)(instance)).toEqual({
        type: 'div',
        children: [{
          type: 'text',
          event: ['click'],
          style: { fontSize: 100, color: '#ff0000', fontWeight: 'bold' },
          attr: { value: 'Hello World' }
        }]
      });
      (0, _index.fireEvent)(instance, instance.document.body.children[0].ref, 'click');
      return instance;
    }).then(function (instance) {
      expect((0, _index.getRoot)(instance)).toEqual({
        type: 'div',
        children: [{
          type: 'text',
          event: ['click'],
          style: { fontSize: 200, color: '#ff0000', fontWeight: '' },
          attr: { value: 'Hello Weex' }
        }]
      });
      done();
    });
  });

  it('should be generated by map binding', function (done) {
    (0, _index.compileAndExecute)('\n      <div>\n        <text :style="{ fontSize: x, color: \'#00ff00\' }" @click="foo">Hello</text>\n        <text :style="y">{{z}}</text>\n      </div>\n    ', '\n      data: {\n        x: 100,\n        y: { color: \'#ff0000\', fontWeight: \'bold\' },\n        z: \'World\'\n      },\n      methods: {\n        foo: function () {\n          this.x = 200\n          this.y.color = \'#0000ff\'\n          Vue.delete(this.y, \'fontWeight\')\n          this.z = \'Weex\'\n        }\n      }\n    ').then(function (instance) {
      expect((0, _index.getRoot)(instance)).toEqual({
        type: 'div',
        children: [{
          type: 'text',
          event: ['click'],
          style: { fontSize: 100, color: '#00ff00' },
          attr: { value: 'Hello' }
        }, {
          type: 'text',
          style: { color: '#ff0000', fontWeight: 'bold' },
          attr: { value: 'World' }
        }]
      });
      (0, _index.fireEvent)(instance, instance.document.body.children[0].ref, 'click');
      return instance;
    }).then(function (instance) {
      expect((0, _index.getRoot)(instance)).toEqual({
        type: 'div',
        children: [{
          type: 'text',
          event: ['click'],
          style: { fontSize: 200, color: '#00ff00' },
          attr: { value: 'Hello' }
        }, {
          type: 'text',
          style: { color: '#0000ff', fontWeight: '' },
          attr: { value: 'Weex' }
        }]
      });
      done();
    });
  });
});

