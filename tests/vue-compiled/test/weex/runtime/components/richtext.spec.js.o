'use strict';

var _index = require('../../helpers/index');

function compileSnippet(snippet, additional) {
  var _compileAndStringify = (0, _index.compileAndStringify)('<div>' + snippet + '</div>'),
      render = _compileAndStringify.render,
      staticRenderFns = _compileAndStringify.staticRenderFns;

  var id = String(Date.now() * Math.random());
  var instance = (0, _index.createInstance)(id, '\n    new Vue({\n      el: \'body\',\n      render: ' + render + ',\n      staticRenderFns: ' + staticRenderFns + ',\n      ' + additional + '\n    })\n  ');
  return (0, _index.getRoot)(instance).children[0];
}

describe('richtext component', function () {
  it('with no child', function () {
    expect(compileSnippet('\n      <richtext></richtext>\n    ')).toEqual({
      type: 'richtext'
    });
  });

  it('with single text node', function () {
    expect(compileSnippet('\n      <richtext>single</richtext>\n    ')).toEqual({
      type: 'richtext',
      attr: {
        value: [{
          type: 'span',
          attr: {
            value: 'single'
          }
        }]
      }
    });
  });

  describe('span', function () {
    it('single node', function () {
      expect(compileSnippet('\n        <richtext>\n          <span>single</span>\n        </richtext>\n      ')).toEqual({
        type: 'richtext',
        attr: {
          value: [{
            type: 'span',
            attr: {
              value: 'single'
            }
          }]
        }
      });
    });

    it('multiple node', function () {
      expect(compileSnippet('\n        <richtext>\n          <span>AAA</span>\n          <span>BBB</span>\n        </richtext>\n      ')).toEqual({
        type: 'richtext',
        attr: {
          value: [{
            type: 'span',
            attr: { value: 'AAA' }
          }, {
            type: 'span',
            attr: { value: 'BBB' }
          }]
        }
      });
    });

    it('with raw text', function () {
      expect(compileSnippet('\n        <richtext>\n          AAA\n          <span>BBB</span>CCC\n          <span>DDD</span>\n        </richtext>\n      ')).toEqual({
        type: 'richtext',
        attr: {
          value: [{
            type: 'span',
            attr: { value: 'AAA' }
          }, {
            type: 'span',
            attr: { value: 'BBB' }
          }, {
            type: 'span',
            attr: { value: 'CCC' }
          }, {
            type: 'span',
            attr: { value: 'DDD' }
          }]
        }
      });
    });
  });

  describe('a', function () {
    it('single node', function () {
      expect(compileSnippet('\n        <richtext>\n          <a href="http://whatever.com"></a>\n        </richtext>\n      ')).toEqual({
        type: 'richtext',
        attr: {
          value: [{
            type: 'a',
            attr: { href: 'http://whatever.com' }
          }]
        }
      });
    });

    it('multiple node', function () {
      expect(compileSnippet('\n        <richtext>\n          <a href="http://a.whatever.com"></a>\n          <a href="http://b.whatever.com"></a>\n        </richtext>\n      ')).toEqual({
        type: 'richtext',
        attr: {
          value: [{
            type: 'a',
            attr: { href: 'http://a.whatever.com' }
          }, {
            type: 'a',
            attr: { href: 'http://b.whatever.com' }
          }]
        }
      });
    });
  });

  describe('image', function () {
    it('single node', function () {
      expect(compileSnippet('\n        <richtext>\n          <image src="path/to/profile.png"></image>\n        </richtext>\n      ')).toEqual({
        type: 'richtext',
        attr: {
          value: [{
            type: 'image',
            attr: { src: 'path/to/profile.png' }
          }]
        }
      });
    });

    it('multiple node', function () {
      expect(compileSnippet('\n        <richtext>\n          <image src="path/to/A.png"></image>\n          <image src="path/to/B.png"></image>\n        </richtext>\n      ')).toEqual({
        type: 'richtext',
        attr: {
          value: [{
            type: 'image',
            attr: { src: 'path/to/A.png' }
          }, {
            type: 'image',
            attr: { src: 'path/to/B.png' }
          }]
        }
      });
    });

    it('with width and height', function () {
      expect(compileSnippet('\n        <richtext>\n          <image\n            style="width:150px;height:150px;"\n            src="path/to/profile.png">\n          </image>\n        </richtext>\n      ')).toEqual({
        type: 'richtext',
        attr: {
          value: [{
            type: 'image',
            style: { width: '150px', height: '150px' },
            attr: { src: 'path/to/profile.png' }
          }]
        }
      });
    });
  });

  describe('nested', function () {
    it('span', function () {
      expect(compileSnippet('\n        <richtext>\n          <span>AAA\n            <span>\n              <span>BBB</span>\n              <span><span>CCC</span>DDD</span>\n            </span>\n          </span>\n        </richtext>\n      ')).toEqual({
        type: 'richtext',
        attr: {
          value: [{
            type: 'span',
            children: [{
              type: 'span',
              attr: { value: 'AAA' }
            }, {
              type: 'span',
              children: [{
                type: 'span',
                attr: { value: 'BBB' }
              }, {
                type: 'span',
                children: [{
                  type: 'span',
                  attr: { value: 'CCC' }
                }, {
                  type: 'span',
                  attr: { value: 'DDD' }
                }]
              }]
            }]
          }]
        }
      });
    });

    it('image and a', function () {
      expect(compileSnippet('\n        <richtext>\n          <span>title</span>\n          <a href="http://remote.com/xx.js">\n            <span><span>name</span></span>\n            <image src="path/to/yy.gif"></image>\n          </a>\n        </richtext>\n      ')).toEqual({
        type: 'richtext',
        attr: {
          value: [{
            type: 'span',
            attr: { value: 'title' }
          }, {
            type: 'a',
            attr: { href: 'http://remote.com/xx.js' },
            children: [{
              type: 'span',
              children: [{
                type: 'span',
                attr: { value: 'name' }
              }]
            }, {
              type: 'image',
              attr: { src: 'path/to/yy.gif' }
            }]
          }]
        }
      });
    });
  });

  describe('with styles', function () {
    it('inline', function () {
      expect(compileSnippet('\n        <richtext>\n          <span style="font-size:16px;color:#FF6600;">ABCD</span>\n          <image style="width:33.33px;height:66.67px" src="path/to/A.png"></image>\n        </richtext>\n      ')).toEqual({
        type: 'richtext',
        attr: {
          value: [{
            type: 'span',
            style: { fontSize: '16px', color: '#FF6600' },
            attr: { value: 'ABCD' }
          }, {
            type: 'image',
            style: { width: '33.33px', height: '66.67px' },
            attr: { src: 'path/to/A.png' }
          }]
        }
      });
    });

    it('class list', function () {
      expect(compileSnippet('\n        <richtext>\n          <image class="icon" src="path/to/A.png"></image>\n          <span class="title large">ABCD</span>\n        </richtext>\n      ', '\n        style: {\n          title: { color: \'#FF6600\' },\n          large: { fontSize: 24 },\n          icon: { width: 40, height: 60 }\n        }\n      ')).toEqual({
        type: 'richtext',
        attr: {
          value: [{
            type: 'image',
            style: { width: 40, height: 60 },
            attr: { src: 'path/to/A.png' }
          }, {
            type: 'span',
            style: { fontSize: 24, color: '#FF6600' },
            attr: { value: 'ABCD' }
          }]
        }
      });
    });
  });

  describe('data binding', function () {
    it('simple', function () {
      expect(compileSnippet('\n        <richtext>\n          <span>{{name}}</span>\n        </richtext>\n      ', 'data: { name: \'ABCDEFG\' }')).toEqual({
        type: 'richtext',
        attr: {
          value: [{
            type: 'span',
            attr: { value: 'ABCDEFG' }
          }]
        }
      });
    });

    it('nested', function () {
      expect(compileSnippet('\n        <richtext>\n          <span>{{a}}</span>\n          <span>{{b}}<span>{{c.d}}</span></span>\n          <span>{{e}}</span>\n        </richtext>\n      ', '\n        data: { a: \'A\', b: \'B\', c: { d: \'CD\' }, e: \'E\' }\n      ')).toEqual({
        type: 'richtext',
        attr: {
          value: [{
            type: 'span',
            attr: { value: 'A' }
          }, {
            type: 'span',
            children: [{
              type: 'span',
              attr: { value: 'B' }
            }, {
              type: 'span',
              attr: { value: 'CD' }
            }]
          }, {
            type: 'span',
            attr: { value: 'E' }
          }]
        }
      });
    });

    it('update', function () {
      expect(compileSnippet('\n        <richtext>\n          <span>{{name}}</span>\n        </richtext>\n      ', '\n        data: { name: \'default\' },\n        created: function () {\n          this.name = \'updated\'\n        }\n      ')).toEqual({
        type: 'richtext',
        attr: {
          value: [{
            type: 'span',
            attr: { value: 'updated' }
          }]
        }
      });
    });

    it('attribute', function () {
      expect(compileSnippet('\n        <richtext>\n          <span :label="label">{{name}}</span>\n        </richtext>\n      ', '\n        data: {\n          label: \'uid\',\n          name: \'10100\'\n        }\n      ')).toEqual({
        type: 'richtext',
        attr: {
          value: [{
            type: 'span',
            attr: {
              label: 'uid',
              value: '10100'
            }
          }]
        }
      });
    });

    it('update attribute', function () {
      expect(compileSnippet('\n        <richtext>\n          <span :label="label">{{name}}</span>\n        </richtext>\n      ', '\n        data: {\n          label: \'name\',\n          name: \'Hanks\'\n        },\n        created: function () {\n          this.label = \'uid\';\n          this.name = \'10100\';\n        }\n      ')).toEqual({
        type: 'richtext',
        attr: {
          value: [{
            type: 'span',
            attr: {
              label: 'uid',
              value: '10100'
            }
          }]
        }
      });
    });

    it('inline style', function () {
      expect(compileSnippet('\n        <richtext>\n          <span :style="styleObject">ABCD</span>\n          <span :style="{ textAlign: align, color: \'red\' }">EFGH</span>\n        </richtext>\n      ', '\n        data: {\n          styleObject: { fontSize: \'32px\', color: \'#F6F660\' },\n          align: \'center\'\n        }\n      ')).toEqual({
        type: 'richtext',
        attr: {
          value: [{
            type: 'span',
            style: { fontSize: '32px', color: '#F6F660' },
            attr: { value: 'ABCD' }
          }, {
            type: 'span',
            style: { textAlign: 'center', color: 'red' },
            attr: { value: 'EFGH' }
          }]
        }
      });
    });

    it('class list', function () {
      expect(compileSnippet('\n        <richtext>\n          <image :class="classList" src="path/to/A.png"></image>\n          <span :class="[\'title\', size]">ABCD</span>\n          <span class="large" style="color:#F6F0F4">EFGH</span>\n        </richtext>\n      ', '\n        style: {\n          title: { color: \'#FF6600\' },\n          large: { fontSize: 24 },\n          icon: { width: 40, height: 60 }\n        },\n        data: {\n          classList: [\'unknown\'],\n          size: \'small\'\n        },\n        created: function () {\n          this.classList = [\'icon\'];\n          this.size = \'large\';\n        }\n      ')).toEqual({
        type: 'richtext',
        attr: {
          value: [{
            type: 'image',
            style: { width: 40, height: 60 },
            attr: { src: 'path/to/A.png' }
          }, {
            type: 'span',
            style: { fontSize: 24, color: '#FF6600' },
            attr: { value: 'ABCD' }
          }, {
            type: 'span',
            style: { fontSize: 24, color: '#F6F0F4' },
            attr: { value: 'EFGH' }
          }]
        }
      });
    });

    it('update inline style', function () {
      expect(compileSnippet('\n        <richtext>\n          <span :style="styleObject">ABCD</span>\n          <span :style="{ textAlign: align, color: \'red\' }">EFGH</span>\n        </richtext>\n      ', '\n        data: {\n          styleObject: { fontSize: \'32px\', color: \'#F6F660\' }\n        },\n        created: function () {\n          this.styleObject = { fontSize: \'24px\', color: \'blue\' }\n          this.styleObject.color = \'#ABCDEF\'\n          this.align = \'left\'\n        }\n      ')).toEqual({
        type: 'richtext',
        attr: {
          value: [{
            type: 'span',
            style: { fontSize: '24px', color: '#ABCDEF' },
            attr: { value: 'ABCD' }
          }, {
            type: 'span',
            style: { textAlign: 'left', color: 'red' },
            attr: { value: 'EFGH' }
          }]
        }
      });
    });
  });

  describe('itself', function () {
    it('inline styles', function () {
      expect(compileSnippet('\n        <richtext style="background-color:red">\n          <span>empty</span>\n        </richtext>\n      ')).toEqual({
        type: 'richtext',
        style: { backgroundColor: 'red' },
        attr: {
          value: [{
            type: 'span',
            attr: { value: 'empty' }
          }]
        }
      });
    });

    it('class list', function () {
      expect(compileSnippet('\n        <richtext class="title">\n          <span class="large">ABCD</span>\n        </richtext>\n      ', '\n        style: {\n          title: { backgroundColor: \'#FF6600\', height: 200 },\n          large: { fontSize: 24 }\n        }\n      ')).toEqual({
        type: 'richtext',
        classList: ['title'],
        attr: {
          value: [{
            type: 'span',
            style: { fontSize: 24 },
            attr: { value: 'ABCD' }
          }]
        }
      });
    });

    it('update styles', function () {
      expect(compileSnippet('\n        <richtext :class="classList" :style="{ backgroundColor: color }">\n          <span class="large">ABCD</span>\n        </richtext>\n      ', '\n        data: { classList: [\'unknow\'], color: \'#FF6600\' },\n        style: {\n          title: { height: 200 },\n          large: { fontSize: 24 }\n        },\n        created: function () {\n          this.classList = [\'title\']\n        }\n      ')).toEqual({
        type: 'richtext',
        classList: ['title'],
        style: { backgroundColor: '#FF6600' },
        attr: {
          value: [{
            type: 'span',
            style: { fontSize: 24 },
            attr: { value: 'ABCD' }
          }]
        }
      });
    });

    it('bind events', function (done) {
      var _compileAndStringify2 = (0, _index.compileAndStringify)('\n        <div>\n          <richtext @click="handler">\n            <span>Label: {{label}}</span>\n          </richtext>\n        </div>\n      '),
          render = _compileAndStringify2.render,
          staticRenderFns = _compileAndStringify2.staticRenderFns;

      var id = String(Date.now() * Math.random());
      var instance = (0, _index.createInstance)(id, '\n        new Vue({\n          el: \'body\',\n          render: ' + render + ',\n          staticRenderFns: ' + staticRenderFns + ',\n          data: { label: \'AAA\' },\n          methods: {\n            handler: function () {\n              this.label = \'BBB\'\n            }\n          }\n        })\n      ');
      var richtext = instance.document.body.children[0];
      (0, _index.fireEvent)(instance, richtext.ref, 'click');
      setTimeout(function () {
        expect((0, _index.getRoot)(instance).children[0]).toEqual({
          type: 'richtext',
          event: ['click'],
          attr: {
            value: [{
              type: 'span',
              attr: { value: 'Label: BBB' }
            }]
          }
        });
        done();
      }, 0);
    });

    it('v-for', function () {
      expect(compileSnippet('\n        <div>\n          <richtext v-for="k in labels">\n            <span>{{k}}</span>\n          </richtext>\n        </div>\n      ', '\n        data: {\n          labels: [\'A\', \'B\', \'C\']\n        }\n      ')).toEqual({
        type: 'div',
        children: [{
          type: 'richtext',
          attr: { value: [{ type: 'span', attr: { value: 'A' } }] }
        }, {
          type: 'richtext',
          attr: { value: [{ type: 'span', attr: { value: 'B' } }] }
        }, {
          type: 'richtext',
          attr: { value: [{ type: 'span', attr: { value: 'C' } }] }
        }]
      });
    });
  });
});

