'use strict';

var _index = require('../helpers/index');

describe('generate events', function () {
  it('should be bound and fired for native component', function (done) {
    (0, _index.compileAndExecute)('\n      <div @click="foo">\n        <text>Hello {{x}}</text>\n      </div>\n    ', '\n      data: { x: \'World\' },\n      methods: {\n        foo: function () {\n          this.x = \'Weex\'\n        }\n      }\n    ').then(function (instance) {
      expect((0, _index.getRoot)(instance)).toEqual({
        type: 'div',
        event: ['click'],
        children: [{
          type: 'text',
          attr: { value: 'Hello World' }
        }]
      });
      (0, _index.fireEvent)(instance, '_root', 'click');
      return instance;
    }).then(function (instance) {
      expect((0, _index.getRoot)(instance)).toEqual({
        type: 'div',
        event: ['click'],
        children: [{
          type: 'text',
          attr: { value: 'Hello Weex' }
        }]
      });
      done();
    });
  });

  it('should be bound and fired by custom component', function (done) {
    var _compileAndStringify = (0, _index.compileAndStringify)('<text>Hello {{x}}</text>'),
        render = _compileAndStringify.render,
        staticRenderFns = _compileAndStringify.staticRenderFns;

    (0, _index.compileAndExecute)('\n      <div>\n        <text>Hello {{x}}</text>\n        <sub @click="foo" @click.native="bar"></sub>\n      </div>\n    ', '\n      data: { x: \'World\' },\n      components: {\n        sub: {\n          data: function () {\n            return { x: \'Sub\' }\n          },\n          render: ' + render + ',\n          staticRenderFns: ' + staticRenderFns + ',\n          created: function () {\n            this.$emit(\'click\')\n          }\n        }\n      },\n      methods: {\n        foo: function () {\n          this.x = \'Foo\'\n        },\n        bar: function () {\n          this.x = \'Bar\'\n        }\n      }\n    ').then(function (instance) {
      expect((0, _index.getRoot)(instance)).toEqual({
        type: 'div',
        children: [{
          type: 'text',
          attr: { value: 'Hello Foo' }
        }, {
          type: 'text',
          event: ['click'],
          attr: { value: 'Hello Sub' }
        }]
      });
      (0, _index.fireEvent)(instance, instance.document.body.children[1].ref, 'click');
      return instance;
    }).then(function (instance) {
      expect((0, _index.getRoot)(instance)).toEqual({
        type: 'div',
        children: [{
          type: 'text',
          attr: { value: 'Hello Bar' }
        }, {
          type: 'text',
          event: ['click'],
          attr: { value: 'Hello Sub' }
        }]
      });
      done();
    });
  });
});

