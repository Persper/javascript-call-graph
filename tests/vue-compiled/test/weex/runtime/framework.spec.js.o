'use strict';

var _index = require('../helpers/index');

describe('framework APIs', function () {
  it('createInstance', function () {
    var id = String(Date.now() * Math.random());
    var instance = (0, _index.createInstance)(id, '\n      new Vue({\n        render: function (createElement) {\n          return createElement(\'div\', {}, [\n            createElement(\'text\', { attrs: { value: \'Hello\' }}, [])\n          ])\n        },\n        el: "body"\n      })\n    ');
    expect((0, _index.getRoot)(instance)).toEqual({
      type: 'div',
      children: [{ type: 'text', attr: { value: 'Hello' } }]
    });
  });

  it('createInstance with config', function () {
    var id = String(Date.now() * Math.random());
    var instance = (0, _index.createInstance)(id, '\n      new Vue({\n        render: function (createElement) {\n          return createElement(\'div\', {}, [\n            createElement(\'text\', { attrs: { value: JSON.stringify(weex.config) }}, [])\n          ])\n        },\n        el: "body"\n      })\n    ', { bundleType: 'Vue', bundleUrl: 'http://example.com/', a: 1, b: 2 });
    expect((0, _index.getRoot)(instance)).toEqual({
      type: 'div',
      children: [{
        type: 'text',
        attr: { value: '{"bundleType":"Vue","bundleUrl":"http://example.com/","a":1,"b":2,"env":{}}' }
      }]
    });
  });

  it('createInstance with external data', function () {
    var id = String(Date.now() * Math.random());
    var instance = (0, _index.createInstance)(id, '\n      new Vue({\n        data: {\n          a: 1,\n          b: 2\n        },\n        render: function (createElement) {\n          return createElement(\'div\', {}, [\n            createElement(\'text\', { attrs: { value: this.a + \'-\' + this.b }}, [])\n          ])\n        },\n        el: "body"\n      })\n    ', undefined, { a: 111 });
    expect((0, _index.getRoot)(instance)).toEqual({
      type: 'div',
      children: [{ type: 'text', attr: { value: '111-2' } }]
    });
  });

  it('destroyInstance', function (done) {
    var id = String(Date.now() * Math.random());
    var instance = (0, _index.createInstance)(id, '\n      new Vue({\n        data: {\n          x: \'Hello\'\n        },\n        render: function (createElement) {\n          return createElement(\'div\', {}, [\n            createElement(\'text\', { attrs: { value: this.x }}, [])\n          ])\n        },\n        el: "body"\n      })\n    ');
    expect((0, _index.getRoot)(instance)).toEqual({
      type: 'div',
      children: [{ type: 'text', attr: { value: 'Hello' } }]
    });
    instance.$destroy();
    setTimeout(function () {
      expect(instance.document).toBeUndefined();
      expect(instance.app).toBeUndefined();
      done();
    }, 0);
  });

  it('refreshInstance', function (done) {
    var id = String(Date.now() * Math.random());
    var instance = (0, _index.createInstance)(id, '\n      new Vue({\n        data: {\n          x: \'Hello\'\n        },\n        render: function (createElement) {\n          return createElement(\'div\', {}, [\n            createElement(\'text\', { attrs: { value: this.x }}, [])\n          ])\n        },\n        el: "body"\n      })\n    ');
    expect((0, _index.getRoot)(instance)).toEqual({
      type: 'div',
      children: [{ type: 'text', attr: { value: 'Hello' } }]
    });
    instance.$refresh({ x: 'World' });
    setTimeout(function () {
      expect((0, _index.getRoot)(instance)).toEqual({
        type: 'div',
        children: [{ type: 'text', attr: { value: 'World' } }]
      });
      instance.$destroy();
      var result = instance.$refresh({ x: 'World' });
      expect(result instanceof Error).toBe(true);
      done();
    });
  });

  it('registering global assets', function () {
    var id = String(Date.now() * Math.random());
    var instance = (0, _index.createInstance)(id, '\n      Vue.component(\'test\', {\n        render (h) {\n          return h(\'div\', \'Hello\')\n        }\n      })\n      new Vue({\n        render (h) {\n          return h(\'test\')\n        },\n        el: \'body\'\n      })\n    ');
    expect((0, _index.getRoot)(instance)).toEqual({
      type: 'div',
      children: [{ type: 'text', attr: { value: 'Hello' } }]
    });
  });

  it('adding prototype methods', function () {
    var id = String(Date.now() * Math.random());
    var instance = (0, _index.createInstance)(id, '\n      Vue.prototype.$test = () => \'Hello\'\n      const Test = {\n        render (h) {\n          return h(\'div\', this.$test())\n        }\n      }\n      new Vue({\n        render (h) {\n          return h(Test)\n        },\n        el: \'body\'\n      })\n    ');
    expect((0, _index.getRoot)(instance)).toEqual({
      type: 'div',
      children: [{ type: 'text', attr: { value: 'Hello' } }]
    });
  });

  it('using global mixins', function () {
    var id = String(Date.now() * Math.random());
    var instance = (0, _index.createInstance)(id, '\n      Vue.mixin({\n        created () {\n          this.test = true\n        }\n      })\n      const Test = {\n        data: () => ({ test: false }),\n        render (h) {\n          return h(\'div\', this.test ? \'Hello\' : \'nope\')\n        }\n      }\n      new Vue({\n        data: { test: false },\n        render (h) {\n          return this.test ? h(Test) : h(\'p\')\n        },\n        el: \'body\'\n      })\n    ');
    expect((0, _index.getRoot)(instance)).toEqual({
      type: 'div',
      children: [{ type: 'text', attr: { value: 'Hello' } }]
    });
  });
});

