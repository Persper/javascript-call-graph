'use strict';

var _helpers = require('../helpers');

// Create one-off render test case
function createRenderTestCase(name) {
  var source = (0, _helpers.readFile)(name + '.vue');
  var target = (0, _helpers.readObject)(name + '.vdom.js');
  return function (done) {
    (0, _helpers.compileVue)(source).then(function (code) {
      var id = String(Date.now() * Math.random());
      var instance = (0, _helpers.createInstance)(id, code);
      setTimeout(function () {
        expect((0, _helpers.getRoot)(instance)).toEqual(target);
        instance.$destroy();
        done();
      }, 50);
    }).catch(done.fail);
  };
}

// Create event test case, will trigger the first bind event
function createEventTestCase(name) {
  var source = (0, _helpers.readFile)(name + '.vue');
  var before = (0, _helpers.readObject)(name + '.before.vdom.js');
  var after = (0, _helpers.readObject)(name + '.after.vdom.js');
  return function (done) {
    (0, _helpers.compileVue)(source).then(function (code) {
      var id = String(Date.now() * Math.random());
      var instance = (0, _helpers.createInstance)(id, code);
      setTimeout(function () {
        expect((0, _helpers.getRoot)(instance)).toEqual(before);
        var event = (0, _helpers.getEvents)(instance)[0];
        (0, _helpers.fireEvent)(instance, event.ref, event.type, {});
        setTimeout(function () {
          expect((0, _helpers.getRoot)(instance)).toEqual(after);
          instance.$destroy();
          done();
        }, 50);
      }, 50);
    }).catch(done.fail);
  };
}

describe('Usage', function () {
  describe('render', function () {
    it('sample', createRenderTestCase('render/sample'));
  });

  describe('event', function () {
    it('click', createEventTestCase('event/click'));
  });

  describe('recycle-list', function () {
    it('text node', createRenderTestCase('recycle-list/text-node'));
    it('attributes', createRenderTestCase('recycle-list/attrs'));
    // it('class name', createRenderTestCase('recycle-list/classname'))
    it('inline style', createRenderTestCase('recycle-list/inline-style'));
    it('v-if', createRenderTestCase('recycle-list/v-if'));
    it('v-else', createRenderTestCase('recycle-list/v-else'));
    it('v-else-if', createRenderTestCase('recycle-list/v-else-if'));
    it('v-for', createRenderTestCase('recycle-list/v-for'));
    it('v-for-iterator', createRenderTestCase('recycle-list/v-for-iterator'));
    it('v-on', createRenderTestCase('recycle-list/v-on'));
    it('v-on-inline', createRenderTestCase('recycle-list/v-on-inline'));
    it('v-once', createRenderTestCase('recycle-list/v-once'));

    it('stateless component', function (done) {
      (0, _helpers.compileWithDeps)('recycle-list/components/stateless.vue', [{
        name: 'banner',
        path: 'recycle-list/components/banner.vue'
      }]).then(function (code) {
        var id = String(Date.now() * Math.random());
        var instance = (0, _helpers.createInstance)(id, code);
        setTimeout(function () {
          var target = (0, _helpers.readObject)('recycle-list/components/stateless.vdom.js');
          expect((0, _helpers.getRoot)(instance)).toEqual(target);
          instance.$destroy();
          done();
        }, 50);
      }).catch(done.fail);
    });

    it('stateless component with props', function (done) {
      (0, _helpers.compileWithDeps)('recycle-list/components/stateless-with-props.vue', [{
        name: 'poster',
        path: 'recycle-list/components/poster.vue'
      }]).then(function (code) {
        var id = String(Date.now() * Math.random());
        var instance = (0, _helpers.createInstance)(id, code);
        setTimeout(function () {
          var target = (0, _helpers.readObject)('recycle-list/components/stateless-with-props.vdom.js');
          expect((0, _helpers.getRoot)(instance)).toEqual(target);
          instance.$destroy();
          done();
        }, 50);
      }).catch(done.fail);
    });

    it('multi stateless components', function (done) {
      (0, _helpers.compileWithDeps)('recycle-list/components/stateless-multi-components.vue', [{
        name: 'banner',
        path: 'recycle-list/components/banner.vue'
      }, {
        name: 'poster',
        path: 'recycle-list/components/poster.vue'
      }, {
        name: 'footer',
        path: 'recycle-list/components/footer.vue'
      }]).then(function (code) {
        var id = String(Date.now() * Math.random());
        var instance = (0, _helpers.createInstance)(id, code);
        setTimeout(function () {
          var target = (0, _helpers.readObject)('recycle-list/components/stateless-multi-components.vdom.js');
          expect((0, _helpers.getRoot)(instance)).toEqual(target);
          instance.$destroy();
          done();
        }, 50);
      }).catch(done.fail);
    });

    it('stateful component', function (done) {
      var tasks = [];
      (0, _helpers.addTaskHook)(function (_, task) {
        return tasks.push(task);
      });
      (0, _helpers.compileWithDeps)('recycle-list/components/stateful.vue', [{
        name: 'counter',
        path: 'recycle-list/components/counter.vue'
      }]).then(function (code) {
        var id = String(Date.now() * Math.random());
        var instance = (0, _helpers.createInstance)(id, code);
        // expect(tasks.length).toEqual(3)
        setTimeout(function () {
          // check the render results
          var target = (0, _helpers.readObject)('recycle-list/components/stateful.vdom.js');
          expect((0, _helpers.getRoot)(instance)).toEqual(target);
          tasks.length = 0;

          // // trigger component hooks
          // instance.$triggerHook(
          //   2, // cid of the virtual component template
          //   'create', // lifecycle hook name

          //   // arguments for the callback
          //   [
          //     'x-1', // componentId of the virtual component
          //     { start: 3 } // propsData of the virtual component
          //   ]
          // )
          // instance.$triggerHook(2, 'create', ['x-2', { start: 11 }])

          // // the state (_data) of the virtual component should be sent to native
          // expect(tasks.length).toEqual(2)
          // expect(tasks[0].method).toEqual('updateComponentData')
          // expect(tasks[0].args).toEqual(['x-1', { count: 6 }, ''])
          // expect(tasks[1].method).toEqual('updateComponentData')
          // expect(tasks[1].args).toEqual(['x-2', { count: 22 }, ''])

          // instance.$triggerHook('x-1', 'attach')
          // instance.$triggerHook('x-2', 'attach')
          // tasks.length = 0

          // // simulate a click event
          // // the event will be caught by the virtual component template and
          // // should be dispatched to virtual component according to the componentId
          // const event = getEvents(instance)[0]
          // fireEvent(instance, event.ref, 'click', { componentId: 'x-1' })
          setTimeout(function () {
            // expect(tasks.length).toEqual(1)
            // expect(tasks[0].method).toEqual('updateComponentData')
            // expect(tasks[0].args).toEqual([{ count: 7 }])
            instance.$destroy();
            (0, _helpers.resetTaskHook)();
            done();
          });
        }, 50);
      }).catch(done.fail);
    });

    // it('component lifecycle', done => {
    //   global.__lifecycles = []
    //   compileWithDeps('recycle-list/components/stateful-lifecycle.vue', [{
    //     name: 'lifecycle',
    //     path: 'recycle-list/components/lifecycle.vue'
    //   }]).then(code => {
    //     const id = String(Date.now() * Math.random())
    //     const instance = createInstance(id, code)
    //     setTimeout(() => {
    //       const target = readObject('recycle-list/components/stateful-lifecycle.vdom.js')
    //       expect(getRoot(instance)).toEqual(target)

    //       instance.$triggerHook(2, 'create', ['y-1'])
    //       instance.$triggerHook('y-1', 'attach')
    //       instance.$triggerHook('y-1', 'detach')
    //       expect(global.__lifecycles).toEqual([
    //         'beforeCreate undefined',
    //         'created 0',
    //         'beforeMount 1',
    //         'mounted 1',
    //         'beforeUpdate 2',
    //         'updated 2',
    //         'beforeDestroy 2',
    //         'destroyed 2'
    //       ])

    //       delete global.__lifecycles
    //       instance.$destroy()
    //       done()
    //     }, 50)
    //   }).catch(done.fail)
    // })

    it('stateful component with v-model', function (done) {
      (0, _helpers.compileWithDeps)('recycle-list/components/stateful-v-model.vue', [{
        name: 'editor',
        path: 'recycle-list/components/editor.vue'
      }]).then(function (code) {
        var id = String(Date.now() * Math.random());
        var instance = (0, _helpers.createInstance)(id, code);
        setTimeout(function () {
          var target = (0, _helpers.readObject)('recycle-list/components/stateful-v-model.vdom.js');
          expect((0, _helpers.getRoot)(instance)).toEqual(target);
          instance.$destroy();
          done();
        }, 50);
      }).catch(done.fail);
    });
  });
});

