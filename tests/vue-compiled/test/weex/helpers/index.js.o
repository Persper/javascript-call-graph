'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.readFile = readFile;
exports.readObject = readObject;
exports.strToRegExp = strToRegExp;
exports.compileAndStringify = compileAndStringify;
exports.compileVue = compileVue;
exports.compileWithDeps = compileWithDeps;
exports.getRoot = getRoot;
exports.getEvents = getEvents;
exports.fireEvent = fireEvent;
exports.createInstance = createInstance;
exports.compileAndExecute = compileAndExecute;
exports.syncPromise = syncPromise;
exports.checkRefresh = checkRefresh;
exports.addTaskHook = addTaskHook;
exports.resetTaskHook = resetTaskHook;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _weexVueFramework = require('../../../packages/weex-vue-framework');

var Vue = _interopRequireWildcard(_weexVueFramework);

var _weexTemplateCompiler = require('../../../packages/weex-template-compiler');

var _weexJsRuntime = require('weex-js-runtime');

var _weexJsRuntime2 = _interopRequireDefault(_weexJsRuntime);

var _weexStyler = require('weex-styler');

var _weexStyler2 = _interopRequireDefault(_weexStyler);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var styleRE = /<\s*style\s*\w*>([^(<\/)]*)<\/\s*style\s*>/g;
var scriptRE = /<\s*script.*>([^]*)<\/\s*script\s*>/;
var templateRE = /<\s*template\s*([^>]*)>([^]*)<\/\s*template\s*>/;

function readFile(filename) {
  return _fs2.default.readFileSync(_path2.default.resolve(__dirname, '../cases/', filename), 'utf8');
}

function readObject(filename) {
  return new Function('return ' + readFile(filename))();
}

console.debug = function () {};

// http://stackoverflow.com/a/35478115
var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
function strToRegExp(str) {
  return new RegExp(str.replace(matchOperatorsRe, '\\$&'));
}

function parseStatic(fns) {
  return '[' + fns.map(function (fn) {
    return 'function () { ' + fn + ' }';
  }).join(',') + ']';
}

function compileAndStringify(template) {
  var _compile = (0, _weexTemplateCompiler.compile)(template),
      render = _compile.render,
      staticRenderFns = _compile.staticRenderFns;

  return {
    render: 'function () { ' + render + ' }',
    staticRenderFns: parseStatic(staticRenderFns)
  };
}

/**
 * Compile *.vue file into js code
 * @param {string} source raw text of *.vue file
 * @param {string} componentName whether compile to a component
 */
function compileVue(source, componentName) {
  return new Promise(function (resolve, reject) {
    if (!templateRE.test(source)) {
      return reject('No Template!');
    }
    var scriptMatch = scriptRE.exec(source);
    var script = scriptMatch ? scriptMatch[1] : '';
    var templateMatch = templateRE.exec(source);
    var compileOptions = {};
    if (/\s*recyclable\=?/i.test(templateMatch[1])) {
      compileOptions.recyclable = true;
    }
    var res = (0, _weexTemplateCompiler.compile)(templateMatch[2], compileOptions);

    var name = 'test_case_' + (Math.random() * 99999999).toFixed(0);
    var generateCode = function generateCode(styles) {
      return '\n      try { weex.document.registerStyleSheets("' + name + '", [' + JSON.stringify(styles) + ']) } catch(e) {};\n      var ' + name + ' = Object.assign({\n        _scopeId: "' + name + '",\n        style: ' + JSON.stringify(styles) + ',\n        render: function () { ' + res.render + ' },\n        ' + (res['@render'] ? '"@render": function () {' + res['@render'] + '},' : '') + '\n        staticRenderFns: ' + parseStatic(res.staticRenderFns) + ',\n      }, (function(){\n        var module = { exports: {} };\n        ' + script + ';\n        return module.exports;\n      })());\n    ' + (componentName ? 'Vue.component(\'' + componentName + '\', ' + name + ');\n' : name + '.el = \'body\';new Vue(' + name + ');');
    };

    var cssText = '';
    var styleMatch = null;
    while (styleMatch = styleRE.exec(source)) {
      cssText += '\n' + styleMatch[1] + '\n';
    }
    _weexStyler2.default.parse(cssText, function (error, result) {
      if (error) {
        return reject(error);
      }
      resolve(generateCode(result.jsonStyle));
    });
    resolve(generateCode({}));
  });
}

function compileWithDeps(entryPath, deps) {
  return new Promise(function (resolve, reject) {
    if (Array.isArray(deps)) {
      Promise.all(deps.map(function (dep) {
        return compileVue(readFile(dep.path), dep.name).catch(reject);
      })).then(function (depCodes) {
        compileVue(readFile(entryPath)).then(function (entryCode) {
          resolve(depCodes.join('\n') + entryCode);
        }).catch(reject);
      }).catch(reject);
    }
  });
}

function isObject(object) {
  return object !== null && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object';
}

function isEmptyObject(object) {
  return isObject(object) && Object.keys(object).length < 1;
}

function omitUseless(object) {
  if (isObject(object)) {
    delete object.ref;
    for (var key in object) {
      omitUseless(object[key]);
      if (key === '@styleScope' || key === '@templateId' || key === 'bindingExpression') {
        delete object[key];
      }
      if (key.charAt(0) !== '@' && (isEmptyObject(object[key]) || object[key] === undefined)) {
        delete object[key];
      }
    }
  }
  return object;
}

function getRoot(instance) {
  return omitUseless(instance.$getRoot());
}

// Get all binding events in the instance
function getEvents(instance) {
  var events = [];
  var recordEvent = function recordEvent(node) {
    if (!node) {
      return;
    }
    if (Array.isArray(node.event)) {
      node.event.forEach(function (type) {
        events.push({ ref: node.ref, type: type });
      });
    }
    if (Array.isArray(node.children)) {
      node.children.forEach(recordEvent);
    }
  };
  recordEvent(instance.$getRoot());
  return events;
}

function fireEvent(instance, ref, type) {
  var event = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

  var el = instance.document.getRef(ref);
  if (el) {
    instance.document.fireEvent(el, type, event);
  }
}

function createInstance(id, code) {
  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  _weexJsRuntime2.default.config.frameworks = { Vue: Vue };
  var context = _weexJsRuntime2.default.init(_weexJsRuntime2.default.config);
  context.registerModules({
    timer: ['setTimeout', 'setInterval']
  });
  var instance = context.createInstance.apply(context, [id, '// { "framework": "Vue" }\n' + code].concat(args)) || {};
  instance.document = context.getDocument(id);
  instance.$getRoot = function () {
    return context.getRoot(id);
  };
  instance.$refresh = function (data) {
    return context.refreshInstance(id, data);
  };
  instance.$destroy = function () {
    delete instance.document;
    context.destroyInstance(id);
  };
  instance.$triggerHook = function (id, hook, args) {
    instance.document.taskCenter.triggerHook(id, 'lifecycle', hook, { args: args });
  };
  return instance;
}

function compileAndExecute(template) {
  var additional = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  return new Promise(function (resolve) {
    var id = String(Date.now() * Math.random());

    var _compile2 = (0, _weexTemplateCompiler.compile)(template),
        render = _compile2.render,
        staticRenderFns = _compile2.staticRenderFns;

    var instance = createInstance(id, '\n      new Vue({\n        el: \'#whatever\',\n        render: function () { ' + render + ' },\n        staticRenderFns: ' + parseStatic(staticRenderFns) + ',\n        ' + additional + '\n      })\n    ');
    setTimeout(function () {
      return resolve(instance);
    }, 10);
  });
}

function syncPromise(arr) {
  var p = Promise.resolve();
  arr.forEach(function (item) {
    p = p.then(item);
  });
  return p;
}

function checkRefresh(instance, data, checker) {
  return function () {
    return new Promise(function (res) {
      instance.$refresh(data);
      setTimeout(function () {
        checker(getRoot(instance));
        res();
      });
    });
  };
}

function addTaskHook(hook) {
  global.callNative = function callNative(id, tasks) {
    if (Array.isArray(tasks) && typeof hook === 'function') {
      tasks.forEach(function (task) {
        hook(id, {
          module: task.module,
          method: task.method,
          args: Array.from(task.args)
        });
      });
    }
  };
}

function resetTaskHook() {
  delete global.callNative;
}

