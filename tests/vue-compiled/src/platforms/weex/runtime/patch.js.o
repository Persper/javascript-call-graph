'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.patch = undefined;

var _nodeOps = require('weex/runtime/node-ops');

var nodeOps = _interopRequireWildcard(_nodeOps);

var _patch = require('core/vdom/patch');

var _index = require('core/vdom/modules/index');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('weex/runtime/modules/index');

var _index4 = _interopRequireDefault(_index3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// the directive module should be applied last, after all
// built-in modules have been applied.
var modules = _index4.default.concat(_index2.default);

var patch = exports.patch = (0, _patch.createPatchFunction)({
  nodeOps: nodeOps,
  modules: modules,
  LONG_LIST_THRESHOLD: 10
});

