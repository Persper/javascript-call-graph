'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _updateListeners = require('core/vdom/helpers/update-listeners');

var target = void 0;

function add(event, handler, once, capture, passive, params) {
  if (capture) {
    console.log('Weex do not support event in bubble phase.');
    return;
  }
  if (once) {
    var oldHandler = handler;
    var _target = target; // save current target element in closure
    handler = function handler(ev) {
      var res = arguments.length === 1 ? oldHandler(ev) : oldHandler.apply(null, arguments);
      if (res !== null) {
        remove(event, null, null, _target);
      }
    };
  }
  target.addEvent(event, handler, params);
}

function remove(event, handler, capture, _target) {
  (_target || target).removeEvent(event);
}

function updateDOMListeners(oldVnode, vnode) {
  if (!oldVnode.data.on && !vnode.data.on) {
    return;
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target = vnode.elm;
  (0, _updateListeners.updateListeners)(on, oldOn, add, remove, vnode.context);
  target = undefined;
}

exports.default = {
  create: updateDOMListeners,
  update: updateDOMListeners
};

