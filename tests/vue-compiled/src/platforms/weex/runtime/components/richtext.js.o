'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
function getVNodeType(vnode) {
  if (!vnode.tag) {
    return '';
  }
  return vnode.tag.replace(/vue\-component\-(\d+\-)?/, '');
}

function isSimpleSpan(vnode) {
  return vnode.children && vnode.children.length === 1 && !vnode.children[0].tag;
}

function parseStyle(vnode) {
  if (!vnode || !vnode.data) {
    return;
  }
  var _vnode$data = vnode.data,
      staticStyle = _vnode$data.staticStyle,
      staticClass = _vnode$data.staticClass;

  if (vnode.data.style || vnode.data.class || staticStyle || staticClass) {
    var styles = Object.assign({}, staticStyle, vnode.data.style);
    var cssMap = vnode.context.$options.style || {};
    var classList = [].concat(staticClass, vnode.data.class);
    classList.forEach(function (name) {
      if (name && cssMap[name]) {
        Object.assign(styles, cssMap[name]);
      }
    });
    return styles;
  }
}

function convertVNodeChildren(children) {
  if (!children.length) {
    return;
  }

  return children.map(function (vnode) {
    var type = getVNodeType(vnode);
    var props = { type: type

      // convert raw text node
    };if (!type) {
      props.type = 'span';
      props.attr = {
        value: (vnode.text || '').trim()
      };
    } else {
      props.style = parseStyle(vnode);
      if (vnode.data) {
        props.attr = vnode.data.attrs;
        if (vnode.data.on) {
          props.events = vnode.data.on;
        }
      }
      if (type === 'span' && isSimpleSpan(vnode)) {
        props.attr = props.attr || {};
        props.attr.value = vnode.children[0].text.trim();
        return props;
      }
    }

    if (vnode.children && vnode.children.length) {
      props.children = convertVNodeChildren(vnode.children);
    }

    return props;
  });
}

exports.default = {
  name: 'richtext',
  render: function render(h) {
    return h('weex:richtext', {
      on: this._events,
      attrs: {
        value: convertVNodeChildren(this.$options._renderChildren || [])
      }
    });
  }
};

