'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _util = require('shared/util');

var _textParser = require('compiler/parser/text-parser');

var _helpers = require('compiler/helpers');

var normalize = (0, _util.cached)(_util.camelize);

function transformNode(el, options) {
  var warn = options.warn || _helpers.baseWarn;
  var staticStyle = (0, _helpers.getAndRemoveAttr)(el, 'style');

  var _parseStaticStyle = parseStaticStyle(staticStyle, options),
      dynamic = _parseStaticStyle.dynamic,
      styleResult = _parseStaticStyle.styleResult;

  if (process.env.NODE_ENV !== 'production' && dynamic) {
    warn('style="' + String(staticStyle) + '": ' + 'Interpolation inside attributes has been deprecated. ' + 'Use v-bind or the colon shorthand instead.');
  }
  if (!dynamic && styleResult) {
    // $flow-disable-line
    el.staticStyle = styleResult;
  }
  var styleBinding = (0, _helpers.getBindingAttr)(el, 'style', false /* getStatic */);
  if (styleBinding) {
    el.styleBinding = styleBinding;
  } else if (dynamic) {
    // $flow-disable-line
    el.styleBinding = styleResult;
  }
}

function genData(el) {
  var data = '';
  if (el.staticStyle) {
    data += 'staticStyle:' + el.staticStyle + ',';
  }
  if (el.styleBinding) {
    data += 'style:' + el.styleBinding + ',';
  }
  return data;
}

function parseStaticStyle(staticStyle, options) {
  // "width: 200px; height: 200px;" -> {width: 200, height: 200}
  // "width: 200px; height: {{y}}" -> {width: 200, height: y}
  var dynamic = false;
  var styleResult = '';
  if (typeof staticStyle === 'string') {
    var styleList = staticStyle.trim().split(';').map(function (style) {
      var result = style.trim().split(':');
      if (result.length !== 2) {
        return;
      }
      var key = normalize(result[0].trim());
      var value = result[1].trim();
      var dynamicValue = (0, _textParser.parseText)(value, options.delimiters);
      if (dynamicValue) {
        dynamic = true;
        return key + ':' + dynamicValue.expression;
      }
      return key + ':' + JSON.stringify(value);
    }).filter(function (result) {
      return result;
    });
    if (styleList.length) {
      styleResult = '{' + styleList.join(',') + '}';
    }
  } else if ((0, _util.isPlainObject)(staticStyle)) {
    styleResult = JSON.stringify(staticStyle) || '';
  }
  return { dynamic: dynamic, styleResult: styleResult };
}

exports.default = {
  staticKeys: ['staticStyle'],
  transformNode: transformNode,
  genData: genData
};

