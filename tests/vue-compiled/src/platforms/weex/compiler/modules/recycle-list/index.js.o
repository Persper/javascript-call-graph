'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _recycleList = require('./recycle-list');

var _component = require('./component');

var _componentRoot = require('./component-root');

var _text = require('./text');

var _vBind = require('./v-bind');

var _vIf = require('./v-if');

var _vFor = require('./v-for');

var _vOn = require('./v-on');

var _vOnce = require('./v-once');

var currentRecycleList = null;

function shouldCompile(el, options) {
  return options.recyclable || currentRecycleList && el !== currentRecycleList;
}

function preTransformNode(el, options) {
  if (el.tag === 'recycle-list') {
    (0, _recycleList.preTransformRecycleList)(el, options);
    currentRecycleList = el;
  }
  if (shouldCompile(el, options)) {
    (0, _vBind.preTransformVBind)(el, options);
    (0, _vIf.preTransformVIf)(el, options); // also v-else-if and v-else
    (0, _vFor.preTransformVFor)(el, options);
    (0, _vOnce.preTransformVOnce)(el, options);
  }
}

function transformNode(el, options) {
  if (shouldCompile(el, options)) {
    // do nothing yet
  }
}

function postTransformNode(el, options) {
  if (shouldCompile(el, options)) {
    // mark child component in parent template
    (0, _component.postTransformComponent)(el, options);
    // mark root in child component template
    (0, _componentRoot.postTransformComponentRoot)(el, options);
    // <text>: transform children text into value attr
    if (el.tag === 'text') {
      (0, _text.postTransformText)(el, options);
    }
    (0, _vOn.postTransformVOn)(el, options);
  }
  if (el === currentRecycleList) {
    currentRecycleList = null;
  }
}

exports.default = {
  preTransformNode: preTransformNode,
  transformNode: transformNode,
  postTransformNode: postTransformNode
};

