'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _util = require('shared/util');

var normalize = (0, _util.cached)(_util.camelize);

function normalizeKeyName(str) {
  if (str.match(/^v\-/)) {
    return str.replace(/(v-[a-z\-]+\:)([a-z\-]+)$/i, function ($, directive, prop) {
      return directive + normalize(prop);
    });
  }
  return normalize(str);
}

function transformNode(el, options) {
  if (Array.isArray(el.attrsList)) {
    el.attrsList.forEach(function (attr) {
      if (attr.name && attr.name.match(/\-/)) {
        var realName = normalizeKeyName(attr.name);
        if (el.attrsMap) {
          el.attrsMap[realName] = el.attrsMap[attr.name];
          delete el.attrsMap[attr.name];
        }
        attr.name = realName;
      }
    });
  }
}
exports.default = {
  transformNode: transformNode
};

