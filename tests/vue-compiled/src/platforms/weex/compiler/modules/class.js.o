'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _textParser = require('compiler/parser/text-parser');

var _helpers = require('compiler/helpers');

function transformNode(el, options) {
  var warn = options.warn || _helpers.baseWarn;
  var staticClass = (0, _helpers.getAndRemoveAttr)(el, 'class');

  var _parseStaticClass = parseStaticClass(staticClass, options),
      dynamic = _parseStaticClass.dynamic,
      classResult = _parseStaticClass.classResult;

  if (process.env.NODE_ENV !== 'production' && dynamic && staticClass) {
    warn('class="' + staticClass + '": ' + 'Interpolation inside attributes has been deprecated. ' + 'Use v-bind or the colon shorthand instead.');
  }
  if (!dynamic && classResult) {
    el.staticClass = classResult;
  }
  var classBinding = (0, _helpers.getBindingAttr)(el, 'class', false /* getStatic */);
  if (classBinding) {
    el.classBinding = classBinding;
  } else if (dynamic) {
    el.classBinding = classResult;
  }
}

function genData(el) {
  var data = '';
  if (el.staticClass) {
    data += 'staticClass:' + el.staticClass + ',';
  }
  if (el.classBinding) {
    data += 'class:' + el.classBinding + ',';
  }
  return data;
}

function parseStaticClass(staticClass, options) {
  // "a b c" -> ["a", "b", "c"] => staticClass: ["a", "b", "c"]
  // "a {{x}} c" -> ["a", x, "c"] => classBinding: '["a", x, "c"]'
  var dynamic = false;
  var classResult = '';
  if (staticClass) {
    var classList = staticClass.trim().split(' ').map(function (name) {
      var result = (0, _textParser.parseText)(name, options.delimiters);
      if (result) {
        dynamic = true;
        return result.expression;
      }
      return JSON.stringify(name);
    });
    if (classList.length) {
      classResult = '[' + classList.join(',') + ']';
    }
  }
  return { dynamic: dynamic, classResult: classResult };
}

exports.default = {
  staticKeys: ['staticClass'],
  transformNode: transformNode,
  genData: genData
};

