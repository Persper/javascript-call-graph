'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _helpers = require('compiler/helpers');

var _index = require('compiler/parser/index');

/**
 * Expand input[v-model] with dyanmic type bindings into v-if-else chains
 * Turn this:
 *   <input v-model="data[type]" :type="type">
 * into this:
 *   <input v-if="type === 'checkbox'" type="checkbox" v-model="data[type]">
 *   <input v-else-if="type === 'radio'" type="radio" v-model="data[type]">
 *   <input v-else :type="type" v-model="data[type]">
 */

function preTransformNode(el, options) {
  if (el.tag === 'input') {
    var map = el.attrsMap;
    if (!map['v-model']) {
      return;
    }

    var typeBinding = void 0;
    if (map[':type'] || map['v-bind:type']) {
      typeBinding = (0, _helpers.getBindingAttr)(el, 'type');
    }
    if (!typeBinding && map['v-bind']) {
      typeBinding = '(' + map['v-bind'] + ').type';
    }

    if (typeBinding) {
      var ifCondition = (0, _helpers.getAndRemoveAttr)(el, 'v-if', true);
      var ifConditionExtra = ifCondition ? '&&(' + ifCondition + ')' : '';
      var hasElse = (0, _helpers.getAndRemoveAttr)(el, 'v-else', true) != null;
      var elseIfCondition = (0, _helpers.getAndRemoveAttr)(el, 'v-else-if', true);
      // 1. checkbox
      var branch0 = cloneASTElement(el);
      // process for on the main node
      (0, _index.processFor)(branch0);
      (0, _helpers.addRawAttr)(branch0, 'type', 'checkbox');
      (0, _index.processElement)(branch0, options);
      branch0.processed = true; // prevent it from double-processed
      branch0.if = '(' + typeBinding + ')===\'checkbox\'' + ifConditionExtra;
      (0, _index.addIfCondition)(branch0, {
        exp: branch0.if,
        block: branch0
      });
      // 2. add radio else-if condition
      var branch1 = cloneASTElement(el);
      (0, _helpers.getAndRemoveAttr)(branch1, 'v-for', true);
      (0, _helpers.addRawAttr)(branch1, 'type', 'radio');
      (0, _index.processElement)(branch1, options);
      (0, _index.addIfCondition)(branch0, {
        exp: '(' + typeBinding + ')===\'radio\'' + ifConditionExtra,
        block: branch1
      });
      // 3. other
      var branch2 = cloneASTElement(el);
      (0, _helpers.getAndRemoveAttr)(branch2, 'v-for', true);
      (0, _helpers.addRawAttr)(branch2, ':type', typeBinding);
      (0, _index.processElement)(branch2, options);
      (0, _index.addIfCondition)(branch0, {
        exp: ifCondition,
        block: branch2
      });

      if (hasElse) {
        branch0.else = true;
      } else if (elseIfCondition) {
        branch0.elseif = elseIfCondition;
      }

      return branch0;
    }
  }
}

function cloneASTElement(el) {
  return (0, _index.createASTElement)(el.tag, el.attrsList.slice(), el.parent);
}

exports.default = {
  preTransformNode: preTransformNode
};

