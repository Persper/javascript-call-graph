'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _util = require('shared/util');

var _index = require('core/vdom/helpers/index');

var _index2 = require('core/util/index');

var _model = require('web/compiler/directives/model');

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
function normalizeEvents(on) {
  /* istanbul ignore if */
  if ((0, _util.isDef)(on[_model.RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = _index2.isIE ? 'change' : 'input';
    on[event] = [].concat(on[_model.RANGE_TOKEN], on[event] || []);
    delete on[_model.RANGE_TOKEN];
  }
  // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4
  /* istanbul ignore if */
  if ((0, _util.isDef)(on[_model.CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[_model.CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[_model.CHECKBOX_RADIO_TOKEN];
  }
}

var target = void 0;

function createOnceHandler(handler, event, capture) {
  var _target = target; // save current target element in closure
  return function onceHandler() {
    var res = handler.apply(null, arguments);
    if (res !== null) {
      remove(event, onceHandler, capture, _target);
    }
  };
}

function add(event, handler, once, capture, passive) {
  handler = (0, _index2.withMacroTask)(handler);
  if (once) handler = createOnceHandler(handler, event, capture);
  target.addEventListener(event, handler, _index2.supportsPassive ? { capture: capture, passive: passive } : capture);
}

function remove(event, handler, capture, _target) {
  (_target || target).removeEventListener(event, handler._withTask || handler, capture);
}

function updateDOMListeners(oldVnode, vnode) {
  if ((0, _util.isUndef)(oldVnode.data.on) && (0, _util.isUndef)(vnode.data.on)) {
    return;
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target = vnode.elm;
  normalizeEvents(on);
  (0, _index.updateListeners)(on, oldOn, add, remove, vnode.context);
  target = undefined;
}

exports.default = {
  create: updateDOMListeners,
  update: updateDOMListeners
};

