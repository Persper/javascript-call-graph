'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _index = require('core/index');

var _index2 = _interopRequireDefault(_index);

var _config = require('core/config');

var _config2 = _interopRequireDefault(_config);

var _util = require('shared/util');

var _lifecycle = require('core/instance/lifecycle');

var _index3 = require('core/util/index');

var _index4 = require('web/util/index');

var _patch = require('./patch');

var _index5 = require('./directives/index');

var _index6 = _interopRequireDefault(_index5);

var _index7 = require('./components/index');

var _index8 = _interopRequireDefault(_index7);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// install platform specific utils
_index2.default.config.mustUseProp = _index4.mustUseProp;

_index2.default.config.isReservedTag = _index4.isReservedTag;
_index2.default.config.isReservedAttr = _index4.isReservedAttr;
_index2.default.config.getTagNamespace = _index4.getTagNamespace;
_index2.default.config.isUnknownElement = _index4.isUnknownElement;

// install platform runtime directives & components
(0, _util.extend)(_index2.default.options.directives, _index6.default);
(0, _util.extend)(_index2.default.options.components, _index8.default);

// install platform patch function
_index2.default.prototype.__patch__ = _index3.inBrowser ? _patch.patch : _util.noop;

// public mount method
_index2.default.prototype.$mount = function (el, hydrating) {
  el = el && _index3.inBrowser ? (0, _index4.query)(el) : undefined;
  return (0, _lifecycle.mountComponent)(this, el, hydrating);
};

// devtools global hook
/* istanbul ignore next */
if (_index3.inBrowser) {
  setTimeout(function () {
    if (_config2.default.devtools) {
      if (_index3.devtools) {
        _index3.devtools.emit('init', _index2.default);
      } else if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test' && _index3.isChrome) {
        console[console.info ? 'info' : 'log']('Download the Vue Devtools extension for a better development experience:\n' + 'https://github.com/vuejs/vue-devtools');
      }
    }
    if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test' && _config2.default.productionTip !== false && typeof console !== 'undefined') {
      console[console.info ? 'info' : 'log']('You are running Vue in development mode.\n' + 'Make sure to turn on production mode when deploying for production.\n' + 'See more tips at https://vuejs.org/guide/deployment.html');
    }
  }, 0);
}

exports.default = _index2.default;

