'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _util = require('./util');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var hash = require('hash-sum');
var uniq = require('lodash.uniq');

var VueSSRClientPlugin = function () {
  function VueSSRClientPlugin() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, VueSSRClientPlugin);

    this.options = Object.assign({
      filename: 'vue-ssr-client-manifest.json'
    }, options);
  }

  _createClass(VueSSRClientPlugin, [{
    key: 'apply',
    value: function apply(compiler) {
      var _this = this;

      compiler.plugin('emit', function (compilation, cb) {
        var stats = compilation.getStats().toJson();

        var allFiles = uniq(stats.assets.map(function (a) {
          return a.name;
        }));

        var initialFiles = uniq(Object.keys(stats.entrypoints).map(function (name) {
          return stats.entrypoints[name].assets;
        }).reduce(function (assets, all) {
          return all.concat(assets);
        }, []).filter(_util.isJS));

        var asyncFiles = allFiles.filter(_util.isJS).filter(function (file) {
          return initialFiles.indexOf(file) < 0;
        });

        var manifest = {
          publicPath: stats.publicPath,
          all: allFiles,
          initial: initialFiles,
          async: asyncFiles,
          modules: {/* [identifier: string]: Array<index: number> */}
        };

        var assetModules = stats.modules.filter(function (m) {
          return m.assets.length;
        });
        var fileToIndex = function fileToIndex(file) {
          return manifest.all.indexOf(file);
        };
        stats.modules.forEach(function (m) {
          // ignore modules duplicated in multiple chunks
          if (m.chunks.length === 1) {
            var cid = m.chunks[0];
            var chunk = stats.chunks.find(function (c) {
              return c.id === cid;
            });
            if (!chunk || !chunk.files) {
              return;
            }
            var files = manifest.modules[hash(m.identifier)] = chunk.files.map(fileToIndex);
            // find all asset modules associated with the same chunk
            assetModules.forEach(function (m) {
              if (m.chunks.some(function (id) {
                return id === cid;
              })) {
                files.push.apply(files, m.assets.map(fileToIndex));
              }
            });
          }
        });

        // const debug = (file, obj) => {
        //   require('fs').writeFileSync(__dirname + '/' + file, JSON.stringify(obj, null, 2))
        // }
        // debug('stats.json', stats)
        // debug('client-manifest.json', manifest)

        var json = JSON.stringify(manifest, null, 2);
        compilation.assets[_this.options.filename] = {
          source: function source() {
            return json;
          },
          size: function size() {
            return json.length;
          }
        };
        cb();
      });
    }
  }]);

  return VueSSRClientPlugin;
}();

exports.default = VueSSRClientPlugin;

