'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _util = require('shared/util');

var _write = require('./write');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Original RenderStream implementation by Sasha Aickin (@aickin)
 * Licensed under the Apache License, Version 2.0
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Modified by Evan You (@yyx990803)
 */

var stream = require('stream');

var RenderStream = function (_stream$Readable) {
  _inherits(RenderStream, _stream$Readable);

  function RenderStream(render) {
    _classCallCheck(this, RenderStream);

    var _this = _possibleConstructorReturn(this, (RenderStream.__proto__ || Object.getPrototypeOf(RenderStream)).call(this));

    _this.buffer = '';
    _this.render = render;
    _this.expectedSize = 0;

    _this.write = (0, _write.createWriteFunction)(function (text, next) {
      var n = _this.expectedSize;
      _this.buffer += text;
      if (_this.buffer.length >= n) {
        _this.next = next;
        _this.pushBySize(n);
        return true; // we will decide when to call next
      }
      return false;
    }, function (err) {
      _this.emit('error', err);
    });

    _this.end = function () {
      // the rendering is finished; we should push out the last of the buffer.
      _this.done = true;
      _this.push(_this.buffer);
    };
    return _this;
  }

  _createClass(RenderStream, [{
    key: 'pushBySize',
    value: function pushBySize(n) {
      var bufferToPush = this.buffer.substring(0, n);
      this.buffer = this.buffer.substring(n);
      this.push(bufferToPush);
    }
  }, {
    key: 'tryRender',
    value: function tryRender() {
      try {
        this.render(this.write, this.end);
      } catch (e) {
        this.emit('error', e);
      }
    }
  }, {
    key: 'tryNext',
    value: function tryNext() {
      try {
        this.next();
      } catch (e) {
        this.emit('error', e);
      }
    }
  }, {
    key: '_read',
    value: function _read(n) {
      this.expectedSize = n;
      // it's possible that the last chunk added bumped the buffer up to > 2 * n,
      // which means we will need to go through multiple read calls to drain it
      // down to < n.
      if ((0, _util.isTrue)(this.done)) {
        this.push(null);
        return;
      }
      if (this.buffer.length >= n) {
        this.pushBySize(n);
        return;
      }
      if ((0, _util.isUndef)(this.next)) {
        // start the rendering chain.
        this.tryRender();
      } else {
        // continue with the rendering.
        this.tryNext();
      }
    }
  }]);

  return RenderStream;
}(stream.Readable);

exports.default = RenderStream;

