'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRenderer = createRenderer;

var _renderStream = require('./render-stream');

var _renderStream2 = _interopRequireDefault(_renderStream);

var _write = require('./write');

var _render = require('./render');

var _util = require('./util');

var _index = require('./template-renderer/index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createRenderer() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$modules = _ref.modules,
      modules = _ref$modules === undefined ? [] : _ref$modules,
      _ref$directives = _ref.directives,
      directives = _ref$directives === undefined ? {} : _ref$directives,
      _ref$isUnaryTag = _ref.isUnaryTag,
      isUnaryTag = _ref$isUnaryTag === undefined ? function () {
    return false;
  } : _ref$isUnaryTag,
      template = _ref.template,
      inject = _ref.inject,
      cache = _ref.cache,
      shouldPreload = _ref.shouldPreload,
      shouldPrefetch = _ref.shouldPrefetch,
      clientManifest = _ref.clientManifest;

  var render = (0, _render.createRenderFunction)(modules, directives, isUnaryTag, cache);
  var templateRenderer = new _index2.default({
    template: template,
    inject: inject,
    shouldPreload: shouldPreload,
    shouldPrefetch: shouldPrefetch,
    clientManifest: clientManifest
  });

  return {
    renderToString: function renderToString(component, context, cb) {
      if (typeof context === 'function') {
        cb = context;
        context = {};
      }
      if (context) {
        templateRenderer.bindRenderFns(context);
      }

      // no callback, return Promise
      var promise = void 0;
      if (!cb) {
        var _createPromiseCallbac = (0, _util.createPromiseCallback)();

        promise = _createPromiseCallbac.promise;
        cb = _createPromiseCallbac.cb;
      }

      var result = '';
      var write = (0, _write.createWriteFunction)(function (text) {
        result += text;
        return false;
      }, cb);
      try {
        render(component, write, context, function (err) {
          if (template) {
            result = templateRenderer.renderSync(result, context);
          }
          if (err) {
            cb(err);
          } else {
            cb(null, result);
          }
        });
      } catch (e) {
        cb(e);
      }

      return promise;
    },
    renderToStream: function renderToStream(component, context) {
      if (context) {
        templateRenderer.bindRenderFns(context);
      }
      var renderStream = new _renderStream2.default(function (write, done) {
        render(component, write, context, done);
      });
      if (!template) {
        return renderStream;
      } else {
        var templateStream = templateRenderer.createStream(context);
        renderStream.on('error', function (err) {
          templateStream.emit('error', err);
        });
        renderStream.pipe(templateStream);
        return templateStream;
      }
    }
  };
}

