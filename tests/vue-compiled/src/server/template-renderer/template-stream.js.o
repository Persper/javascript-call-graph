'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Transform = require('stream').Transform;

var TemplateStream = function (_Transform) {
  _inherits(TemplateStream, _Transform);

  function TemplateStream(renderer, template, context) {
    _classCallCheck(this, TemplateStream);

    var _this = _possibleConstructorReturn(this, (TemplateStream.__proto__ || Object.getPrototypeOf(TemplateStream)).call(this));

    _this.started = false;
    _this.renderer = renderer;
    _this.template = template;
    _this.context = context || {};
    _this.inject = renderer.inject;
    return _this;
  }

  _createClass(TemplateStream, [{
    key: '_transform',
    value: function _transform(data, encoding, done) {
      if (!this.started) {
        this.emit('beforeStart');
        this.start();
      }
      this.push(data);
      done();
    }
  }, {
    key: 'start',
    value: function start() {
      this.started = true;
      this.push(this.template.head(this.context));

      if (this.inject) {
        // inline server-rendered head meta information
        if (this.context.head) {
          this.push(this.context.head);
        }

        // inline preload/prefetch directives for initial/async chunks
        var links = this.renderer.renderResourceHints(this.context);
        if (links) {
          this.push(links);
        }

        // CSS files and inline server-rendered CSS collected by vue-style-loader
        var styles = this.renderer.renderStyles(this.context);
        if (styles) {
          this.push(styles);
        }
      }

      this.push(this.template.neck(this.context));
    }
  }, {
    key: '_flush',
    value: function _flush(done) {
      this.emit('beforeEnd');

      if (this.inject) {
        // inline initial store state
        var state = this.renderer.renderState(this.context);
        if (state) {
          this.push(state);
        }

        // embed scripts needed
        var scripts = this.renderer.renderScripts(this.context);
        if (scripts) {
          this.push(scripts);
        }
      }

      this.push(this.template.tail(this.context));
      done();
    }
  }]);

  return TemplateStream;
}(Transform);

exports.default = TemplateStream;

