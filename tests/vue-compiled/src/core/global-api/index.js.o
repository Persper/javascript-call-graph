'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initGlobalAPI = initGlobalAPI;

var _config = require('../config');

var _config2 = _interopRequireDefault(_config);

var _use = require('./use');

var _mixin = require('./mixin');

var _extend = require('./extend');

var _assets = require('./assets');

var _index = require('../observer/index');

var _constants = require('shared/constants');

var _index2 = require('../components/index');

var _index3 = _interopRequireDefault(_index2);

var _index4 = require('../util/index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function initGlobalAPI(Vue) {
  // config
  var configDef = {};
  configDef.get = function () {
    return _config2.default;
  };
  if (process.env.NODE_ENV !== 'production') {
    configDef.set = function () {
      (0, _index4.warn)('Do not replace the Vue.config object, set individual fields instead.');
    };
  }
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: _index4.warn,
    extend: _index4.extend,
    mergeOptions: _index4.mergeOptions,
    defineReactive: _index4.defineReactive
  };

  Vue.set = _index.set;
  Vue.delete = _index.del;
  Vue.nextTick = _index4.nextTick;

  Vue.options = Object.create(null);
  _constants.ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  (0, _index4.extend)(Vue.options.components, _index3.default);

  (0, _use.initUse)(Vue);
  (0, _mixin.initMixin)(Vue);
  (0, _extend.initExtend)(Vue);
  (0, _assets.initAssetRegisters)(Vue);
}

