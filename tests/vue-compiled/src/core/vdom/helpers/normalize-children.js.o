'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.simpleNormalizeChildren = simpleNormalizeChildren;
exports.normalizeChildren = normalizeChildren;

var _vnode = require('core/vdom/vnode');

var _vnode2 = _interopRequireDefault(_vnode);

var _util = require('shared/util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren(children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children);
    }
  }
  return children;
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren(children) {
  return (0, _util.isPrimitive)(children) ? [(0, _vnode.createTextVNode)(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;
}

function isTextNode(node) {
  return (0, _util.isDef)(node) && (0, _util.isDef)(node.text) && (0, _util.isFalse)(node.isComment);
}

function normalizeArrayChildren(children, nestedIndex) {
  var res = [];
  var i = void 0,
      c = void 0,
      lastIndex = void 0,
      last = void 0;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if ((0, _util.isUndef)(c) || typeof c === 'boolean') continue;
    lastIndex = res.length - 1;
    last = res[lastIndex];
    //  nested
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, (nestedIndex || '') + '_' + i);
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = (0, _vnode.createTextVNode)(last.text + c[0].text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if ((0, _util.isPrimitive)(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = (0, _vnode.createTextVNode)(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push((0, _vnode.createTextVNode)(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = (0, _vnode.createTextVNode)(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if ((0, _util.isTrue)(children._isVList) && (0, _util.isDef)(c.tag) && (0, _util.isUndef)(c.key) && (0, _util.isDef)(nestedIndex)) {
          c.key = '__vlist' + nestedIndex + '_' + i + '__';
        }
        res.push(c);
      }
    }
  }
  return res;
}

