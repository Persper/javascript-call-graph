'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFnInvoker = createFnInvoker;
exports.updateListeners = updateListeners;

var _index = require('core/util/index');

var _util = require('shared/util');

var normalizeEvent = (0, _util.cached)(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once,
    capture: capture,
    passive: passive
  };
});

function createFnInvoker(fns) {
  function invoker() {
    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        cloned[i].apply(null, arguments);
      }
    } else {
      // return handler return value for single handlers
      return fns.apply(null, arguments);
    }
  }
  invoker.fns = fns;
  return invoker;
}

function updateListeners(on, oldOn, add, remove, vm) {
  var name = void 0,
      def = void 0,
      cur = void 0,
      old = void 0,
      event = void 0;
  for (name in on) {
    def = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    /* istanbul ignore if */
    if (__WEEX__ && (0, _util.isPlainObject)(def)) {
      cur = def.handler;
      event.params = def.params;
    }
    if ((0, _util.isUndef)(cur)) {
      process.env.NODE_ENV !== 'production' && (0, _index.warn)('Invalid handler for event "' + event.name + '": got ' + String(cur), vm);
    } else if ((0, _util.isUndef)(old)) {
      if ((0, _util.isUndef)(cur.fns)) {
        cur = on[name] = createFnInvoker(cur);
      }
      add(event.name, cur, event.once, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if ((0, _util.isUndef)(on[name])) {
      event = normalizeEvent(name);
      remove(event.name, oldOn[name], event.capture);
    }
  }
}

