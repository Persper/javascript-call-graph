'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initRender = initRender;
exports.renderMixin = renderMixin;

var _index = require('../util/index');

var _createElement = require('../vdom/create-element');

var _index2 = require('./render-helpers/index');

var _resolveSlots = require('./render-helpers/resolve-slots');

var _vnode = require('../vdom/vnode');

var _vnode2 = _interopRequireDefault(_vnode);

var _lifecycle = require('./lifecycle');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function initRender(vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null; // v-once cached trees
  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = (0, _resolveSlots.resolveSlots)(options._renderChildren, renderContext);
  vm.$scopedSlots = _index.emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) {
    return (0, _createElement.createElement)(vm, a, b, c, d, false);
  };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) {
    return (0, _createElement.createElement)(vm, a, b, c, d, true);
  };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;

  /* istanbul ignore else */
  if (process.env.NODE_ENV !== 'production') {
    (0, _index.defineReactive)(vm, '$attrs', parentData && parentData.attrs || _index.emptyObject, function () {
      !_lifecycle.isUpdatingChildComponent && (0, _index.warn)('$attrs is readonly.', vm);
    }, true);
    (0, _index.defineReactive)(vm, '$listeners', options._parentListeners || _index.emptyObject, function () {
      !_lifecycle.isUpdatingChildComponent && (0, _index.warn)('$listeners is readonly.', vm);
    }, true);
  } else {
    (0, _index.defineReactive)(vm, '$attrs', parentData && parentData.attrs || _index.emptyObject, null, true);
    (0, _index.defineReactive)(vm, '$listeners', options._parentListeners || _index.emptyObject, null, true);
  }
}

function renderMixin(Vue) {
  // install runtime convenience helpers
  (0, _index2.installRenderHelpers)(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return (0, _index.nextTick)(fn, this);
  };

  Vue.prototype._render = function () {
    var vm = this;
    var _vm$$options = vm.$options,
        render = _vm$$options.render,
        _parentVnode = _vm$$options._parentVnode;

    // reset _rendered flag on slots for duplicate slot check

    if (process.env.NODE_ENV !== 'production') {
      for (var key in vm.$slots) {
        // $flow-disable-line
        vm.$slots[key]._rendered = false;
      }
    }

    if (_parentVnode) {
      vm.$scopedSlots = _parentVnode.data.scopedSlots || _index.emptyObject;
    }

    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode = void 0;
    try {
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      (0, _index.handleError)(e, vm, 'render');
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if (process.env.NODE_ENV !== 'production') {
        if (vm.$options.renderError) {
          try {
            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
          } catch (e) {
            (0, _index.handleError)(e, vm, 'renderError');
            vnode = vm._vnode;
          }
        } else {
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof _vnode2.default)) {
      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {
        (0, _index.warn)('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);
      }
      vnode = (0, _vnode.createEmptyVNode)();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode;
  };
}

