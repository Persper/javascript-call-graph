'use strict';

var fs = require('fs');
var path = require('path');
var zlib = require('zlib');
var rollup = require('rollup');
var uglify = require('uglify-js');

if (!fs.existsSync('dist')) {
  fs.mkdirSync('dist');
}

var builds = require('./config').getAllBuilds();

// filter builds via command line arg
if (process.argv[2]) {
  var filters = process.argv[2].split(',');
  builds = builds.filter(function (b) {
    return filters.some(function (f) {
      return b.output.file.indexOf(f) > -1 || b._name.indexOf(f) > -1;
    });
  });
} else {
  // filter out weex builds by default
  builds = builds.filter(function (b) {
    return b.output.file.indexOf('weex') === -1;
  });
}

build(builds);

function build(builds) {
  var built = 0;
  var total = builds.length;
  var next = function next() {
    buildEntry(builds[built]).then(function () {
      built++;
      if (built < total) {
        next();
      }
    }).catch(logError);
  };

  next();
}

function buildEntry(config) {
  var output = config.output;
  var file = output.file,
      banner = output.banner;

  var isProd = /min\.js$/.test(file);
  return rollup.rollup(config).then(function (bundle) {
    return bundle.generate(output);
  }).then(function (_ref) {
    var code = _ref.code;

    if (isProd) {
      var minified = (banner ? banner + '\n' : '') + uglify.minify(code, {
        output: {
          ascii_only: true
        },
        compress: {
          pure_funcs: ['makeMap']
        }
      }).code;
      return write(file, minified, true);
    } else {
      return write(file, code);
    }
  });
}

function write(dest, code, zip) {
  return new Promise(function (resolve, reject) {
    function report(extra) {
      console.log(blue(path.relative(process.cwd(), dest)) + ' ' + getSize(code) + (extra || ''));
      resolve();
    }

    fs.writeFile(dest, code, function (err) {
      if (err) return reject(err);
      if (zip) {
        zlib.gzip(code, function (err, zipped) {
          if (err) return reject(err);
          report(' (gzipped: ' + getSize(zipped) + ')');
        });
      } else {
        report();
      }
    });
  });
}

function getSize(code) {
  return (code.length / 1024).toFixed(2) + 'kb';
}

function logError(e) {
  console.log(e);
}

function blue(str) {
  return '\x1b[1m\x1b[34m' + str + '\x1b[39m\x1b[22m';
}

